
Drone_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004560  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08004730  08004730  00005730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047b4  080047b4  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080047b4  080047b4  000057b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047bc  080047bc  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047bc  080047bc  000057bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080047c0  080047c0  000057c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080047c4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  20000068  0800482c  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000034c  0800482c  0000634c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c518  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d61  00000000  00000000  000125b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d98  00000000  00000000  00014318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000aa5  00000000  00000000  000150b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022ab5  00000000  00000000  00015b55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001130d  00000000  00000000  0003860a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2dc1  00000000  00000000  00049917  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011c6d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004158  00000000  00000000  0011c71c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00120874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004718 	.word	0x08004718

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08004718 	.word	0x08004718

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005e4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005e8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80005ec:	f003 0301 	and.w	r3, r3, #1
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d013      	beq.n	800061c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005f4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005f8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80005fc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000600:	2b00      	cmp	r3, #0
 8000602:	d00b      	beq.n	800061c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000604:	e000      	b.n	8000608 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000606:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000608:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d0f9      	beq.n	8000606 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000612:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000616:	687a      	ldr	r2, [r7, #4]
 8000618:	b2d2      	uxtb	r2, r2
 800061a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800061c:	687b      	ldr	r3, [r7, #4]
}
 800061e:	4618      	mov	r0, r3
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
	...

0800062c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000632:	f000 fd75 	bl	8001120 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000636:	f000 f849 	bl	80006cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063a:	f000 fa73 	bl	8000b24 <MX_GPIO_Init>
  MX_I2C1_Init();
 800063e:	f000 f8b1 	bl	80007a4 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000642:	f000 f8dd 	bl	8000800 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000646:	f000 f95f 	bl	8000908 <MX_TIM2_Init>
  MX_TIM3_Init();
 800064a:	f000 f9b7 	bl	80009bc <MX_TIM3_Init>
  MX_TIM5_Init();
 800064e:	f000 fa0f 	bl	8000a70 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 8000652:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000656:	f000 fdd5 	bl	8001204 <HAL_Delay>

  // 2. PWM 시작 전에 최소값(1000us)으로 설정
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1000);
 800065a:	4b1a      	ldr	r3, [pc, #104]	@ (80006c4 <main+0x98>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000662:	635a      	str	r2, [r3, #52]	@ 0x34

  // 3. PWM 출력 시작
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000664:	2100      	movs	r1, #0
 8000666:	4817      	ldr	r0, [pc, #92]	@ (80006c4 <main+0x98>)
 8000668:	f002 fc54 	bl	8002f14 <HAL_TIM_PWM_Start>

  // 4. ESC가 PWM 신호 인식할 수 있도록 대기
  HAL_Delay(1000);
 800066c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000670:	f000 fdc8 	bl	8001204 <HAL_Delay>

  // 5. 원하는 속도로 변경 (예: 1500us 중간 속도)
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1500);
 8000674:	4b13      	ldr	r3, [pc, #76]	@ (80006c4 <main+0x98>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800067c:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int16_t yaw, pitch, roll;
  while (1)
  {
	 BNO055_Read_Raw_Euler_Angles(&yaw, &roll, &pitch);
 800067e:	1d3a      	adds	r2, r7, #4
 8000680:	1cb9      	adds	r1, r7, #2
 8000682:	1dbb      	adds	r3, r7, #6
 8000684:	4618      	mov	r0, r3
 8000686:	f000 fa75 	bl	8000b74 <BNO055_Read_Raw_Euler_Angles>
	 printf("Yaw: %d, Roll: %d, Pitch: %d\n", yaw/16, roll/16, pitch/16);
 800068a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800068e:	2b00      	cmp	r3, #0
 8000690:	da00      	bge.n	8000694 <main+0x68>
 8000692:	330f      	adds	r3, #15
 8000694:	111b      	asrs	r3, r3, #4
 8000696:	b21b      	sxth	r3, r3
 8000698:	4619      	mov	r1, r3
 800069a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	da00      	bge.n	80006a4 <main+0x78>
 80006a2:	330f      	adds	r3, #15
 80006a4:	111b      	asrs	r3, r3, #4
 80006a6:	b21b      	sxth	r3, r3
 80006a8:	461a      	mov	r2, r3
 80006aa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	da00      	bge.n	80006b4 <main+0x88>
 80006b2:	330f      	adds	r3, #15
 80006b4:	111b      	asrs	r3, r3, #4
 80006b6:	b21b      	sxth	r3, r3
 80006b8:	4803      	ldr	r0, [pc, #12]	@ (80006c8 <main+0x9c>)
 80006ba:	f003 f9c1 	bl	8003a40 <iprintf>
  {
 80006be:	bf00      	nop
 80006c0:	e7dd      	b.n	800067e <main+0x52>
 80006c2:	bf00      	nop
 80006c4:	200000d8 	.word	0x200000d8
 80006c8:	08004730 	.word	0x08004730

080006cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b094      	sub	sp, #80	@ 0x50
 80006d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d2:	f107 031c 	add.w	r3, r7, #28
 80006d6:	2234      	movs	r2, #52	@ 0x34
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f003 fa9a 	bl	8003c14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e0:	f107 0308 	add.w	r3, r7, #8
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f0:	2300      	movs	r3, #0
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	4b29      	ldr	r3, [pc, #164]	@ (800079c <SystemClock_Config+0xd0>)
 80006f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f8:	4a28      	ldr	r2, [pc, #160]	@ (800079c <SystemClock_Config+0xd0>)
 80006fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000700:	4b26      	ldr	r3, [pc, #152]	@ (800079c <SystemClock_Config+0xd0>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000704:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800070c:	2300      	movs	r3, #0
 800070e:	603b      	str	r3, [r7, #0]
 8000710:	4b23      	ldr	r3, [pc, #140]	@ (80007a0 <SystemClock_Config+0xd4>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000718:	4a21      	ldr	r2, [pc, #132]	@ (80007a0 <SystemClock_Config+0xd4>)
 800071a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800071e:	6013      	str	r3, [r2, #0]
 8000720:	4b1f      	ldr	r3, [pc, #124]	@ (80007a0 <SystemClock_Config+0xd4>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000728:	603b      	str	r3, [r7, #0]
 800072a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800072c:	2302      	movs	r3, #2
 800072e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000730:	2301      	movs	r3, #1
 8000732:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000734:	2310      	movs	r3, #16
 8000736:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000738:	2302      	movs	r3, #2
 800073a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800073c:	2300      	movs	r3, #0
 800073e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000740:	2308      	movs	r3, #8
 8000742:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000744:	2340      	movs	r3, #64	@ 0x40
 8000746:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000748:	2302      	movs	r3, #2
 800074a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800074c:	2302      	movs	r3, #2
 800074e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000750:	2302      	movs	r3, #2
 8000752:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000754:	f107 031c 	add.w	r3, r7, #28
 8000758:	4618      	mov	r0, r3
 800075a:	f002 f8ed 	bl	8002938 <HAL_RCC_OscConfig>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000764:	f000 fa4b 	bl	8000bfe <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000768:	230f      	movs	r3, #15
 800076a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 800076c:	2303      	movs	r3, #3
 800076e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000770:	2300      	movs	r3, #0
 8000772:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000774:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000778:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800077a:	2300      	movs	r3, #0
 800077c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800077e:	f107 0308 	add.w	r3, r7, #8
 8000782:	2102      	movs	r1, #2
 8000784:	4618      	mov	r0, r3
 8000786:	f001 fe27 	bl	80023d8 <HAL_RCC_ClockConfig>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000790:	f000 fa35 	bl	8000bfe <Error_Handler>
  }
}
 8000794:	bf00      	nop
 8000796:	3750      	adds	r7, #80	@ 0x50
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40023800 	.word	0x40023800
 80007a0:	40007000 	.word	0x40007000

080007a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007a8:	4b12      	ldr	r3, [pc, #72]	@ (80007f4 <MX_I2C1_Init+0x50>)
 80007aa:	4a13      	ldr	r2, [pc, #76]	@ (80007f8 <MX_I2C1_Init+0x54>)
 80007ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007ae:	4b11      	ldr	r3, [pc, #68]	@ (80007f4 <MX_I2C1_Init+0x50>)
 80007b0:	4a12      	ldr	r2, [pc, #72]	@ (80007fc <MX_I2C1_Init+0x58>)
 80007b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007b4:	4b0f      	ldr	r3, [pc, #60]	@ (80007f4 <MX_I2C1_Init+0x50>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007ba:	4b0e      	ldr	r3, [pc, #56]	@ (80007f4 <MX_I2C1_Init+0x50>)
 80007bc:	2200      	movs	r2, #0
 80007be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007c0:	4b0c      	ldr	r3, [pc, #48]	@ (80007f4 <MX_I2C1_Init+0x50>)
 80007c2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007c8:	4b0a      	ldr	r3, [pc, #40]	@ (80007f4 <MX_I2C1_Init+0x50>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007ce:	4b09      	ldr	r3, [pc, #36]	@ (80007f4 <MX_I2C1_Init+0x50>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007d4:	4b07      	ldr	r3, [pc, #28]	@ (80007f4 <MX_I2C1_Init+0x50>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007da:	4b06      	ldr	r3, [pc, #24]	@ (80007f4 <MX_I2C1_Init+0x50>)
 80007dc:	2200      	movs	r2, #0
 80007de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007e0:	4804      	ldr	r0, [pc, #16]	@ (80007f4 <MX_I2C1_Init+0x50>)
 80007e2:	f000 ffad 	bl	8001740 <HAL_I2C_Init>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007ec:	f000 fa07 	bl	8000bfe <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007f0:	bf00      	nop
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	20000084 	.word	0x20000084
 80007f8:	40005400 	.word	0x40005400
 80007fc:	000186a0 	.word	0x000186a0

08000800 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b092      	sub	sp, #72	@ 0x48
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000806:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000810:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
 800081e:	611a      	str	r2, [r3, #16]
 8000820:	615a      	str	r2, [r3, #20]
 8000822:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000824:	1d3b      	adds	r3, r7, #4
 8000826:	2220      	movs	r2, #32
 8000828:	2100      	movs	r1, #0
 800082a:	4618      	mov	r0, r3
 800082c:	f003 f9f2 	bl	8003c14 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000830:	4b33      	ldr	r3, [pc, #204]	@ (8000900 <MX_TIM1_Init+0x100>)
 8000832:	4a34      	ldr	r2, [pc, #208]	@ (8000904 <MX_TIM1_Init+0x104>)
 8000834:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64 - 1;
 8000836:	4b32      	ldr	r3, [pc, #200]	@ (8000900 <MX_TIM1_Init+0x100>)
 8000838:	223f      	movs	r2, #63	@ 0x3f
 800083a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800083c:	4b30      	ldr	r3, [pc, #192]	@ (8000900 <MX_TIM1_Init+0x100>)
 800083e:	2200      	movs	r2, #0
 8000840:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000 - 1;
 8000842:	4b2f      	ldr	r3, [pc, #188]	@ (8000900 <MX_TIM1_Init+0x100>)
 8000844:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000848:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800084a:	4b2d      	ldr	r3, [pc, #180]	@ (8000900 <MX_TIM1_Init+0x100>)
 800084c:	2200      	movs	r2, #0
 800084e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000850:	4b2b      	ldr	r3, [pc, #172]	@ (8000900 <MX_TIM1_Init+0x100>)
 8000852:	2200      	movs	r2, #0
 8000854:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000856:	4b2a      	ldr	r3, [pc, #168]	@ (8000900 <MX_TIM1_Init+0x100>)
 8000858:	2200      	movs	r2, #0
 800085a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800085c:	4828      	ldr	r0, [pc, #160]	@ (8000900 <MX_TIM1_Init+0x100>)
 800085e:	f002 fb09 	bl	8002e74 <HAL_TIM_PWM_Init>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000868:	f000 f9c9 	bl	8000bfe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800086c:	2300      	movs	r3, #0
 800086e:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000870:	2300      	movs	r3, #0
 8000872:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000874:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000878:	4619      	mov	r1, r3
 800087a:	4821      	ldr	r0, [pc, #132]	@ (8000900 <MX_TIM1_Init+0x100>)
 800087c:	f002 ff50 	bl	8003720 <HAL_TIMEx_MasterConfigSynchronization>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000886:	f000 f9ba 	bl	8000bfe <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800088a:	2360      	movs	r3, #96	@ 0x60
 800088c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 1000;
 800088e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000892:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000894:	2300      	movs	r3, #0
 8000896:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000898:	2300      	movs	r3, #0
 800089a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800089c:	2300      	movs	r3, #0
 800089e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008a0:	2300      	movs	r3, #0
 80008a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008a4:	2300      	movs	r3, #0
 80008a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008ac:	2200      	movs	r2, #0
 80008ae:	4619      	mov	r1, r3
 80008b0:	4813      	ldr	r0, [pc, #76]	@ (8000900 <MX_TIM1_Init+0x100>)
 80008b2:	f002 fbf7 	bl	80030a4 <HAL_TIM_PWM_ConfigChannel>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 80008bc:	f000 f99f 	bl	8000bfe <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008c0:	2300      	movs	r3, #0
 80008c2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008c4:	2300      	movs	r3, #0
 80008c6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008c8:	2300      	movs	r3, #0
 80008ca:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008cc:	2300      	movs	r3, #0
 80008ce:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008d0:	2300      	movs	r3, #0
 80008d2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008d8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008da:	2300      	movs	r3, #0
 80008dc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008de:	1d3b      	adds	r3, r7, #4
 80008e0:	4619      	mov	r1, r3
 80008e2:	4807      	ldr	r0, [pc, #28]	@ (8000900 <MX_TIM1_Init+0x100>)
 80008e4:	f002 ff98 	bl	8003818 <HAL_TIMEx_ConfigBreakDeadTime>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 80008ee:	f000 f986 	bl	8000bfe <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008f2:	4803      	ldr	r0, [pc, #12]	@ (8000900 <MX_TIM1_Init+0x100>)
 80008f4:	f000 fa5c 	bl	8000db0 <HAL_TIM_MspPostInit>

}
 80008f8:	bf00      	nop
 80008fa:	3748      	adds	r7, #72	@ 0x48
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	200000d8 	.word	0x200000d8
 8000904:	40010000 	.word	0x40010000

08000908 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08a      	sub	sp, #40	@ 0x28
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800090e:	f107 0320 	add.w	r3, r7, #32
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000918:	1d3b      	adds	r3, r7, #4
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	605a      	str	r2, [r3, #4]
 8000920:	609a      	str	r2, [r3, #8]
 8000922:	60da      	str	r2, [r3, #12]
 8000924:	611a      	str	r2, [r3, #16]
 8000926:	615a      	str	r2, [r3, #20]
 8000928:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800092a:	4b23      	ldr	r3, [pc, #140]	@ (80009b8 <MX_TIM2_Init+0xb0>)
 800092c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000930:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64 - 1;
 8000932:	4b21      	ldr	r3, [pc, #132]	@ (80009b8 <MX_TIM2_Init+0xb0>)
 8000934:	223f      	movs	r2, #63	@ 0x3f
 8000936:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000938:	4b1f      	ldr	r3, [pc, #124]	@ (80009b8 <MX_TIM2_Init+0xb0>)
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000 - 1;
 800093e:	4b1e      	ldr	r3, [pc, #120]	@ (80009b8 <MX_TIM2_Init+0xb0>)
 8000940:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000944:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000946:	4b1c      	ldr	r3, [pc, #112]	@ (80009b8 <MX_TIM2_Init+0xb0>)
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800094c:	4b1a      	ldr	r3, [pc, #104]	@ (80009b8 <MX_TIM2_Init+0xb0>)
 800094e:	2200      	movs	r2, #0
 8000950:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000952:	4819      	ldr	r0, [pc, #100]	@ (80009b8 <MX_TIM2_Init+0xb0>)
 8000954:	f002 fa8e 	bl	8002e74 <HAL_TIM_PWM_Init>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800095e:	f000 f94e 	bl	8000bfe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000962:	2300      	movs	r3, #0
 8000964:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800096a:	f107 0320 	add.w	r3, r7, #32
 800096e:	4619      	mov	r1, r3
 8000970:	4811      	ldr	r0, [pc, #68]	@ (80009b8 <MX_TIM2_Init+0xb0>)
 8000972:	f002 fed5 	bl	8003720 <HAL_TIMEx_MasterConfigSynchronization>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800097c:	f000 f93f 	bl	8000bfe <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000980:	2360      	movs	r3, #96	@ 0x60
 8000982:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8000984:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000988:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800098a:	2300      	movs	r3, #0
 800098c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800098e:	2300      	movs	r3, #0
 8000990:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000992:	1d3b      	adds	r3, r7, #4
 8000994:	2200      	movs	r2, #0
 8000996:	4619      	mov	r1, r3
 8000998:	4807      	ldr	r0, [pc, #28]	@ (80009b8 <MX_TIM2_Init+0xb0>)
 800099a:	f002 fb83 	bl	80030a4 <HAL_TIM_PWM_ConfigChannel>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80009a4:	f000 f92b 	bl	8000bfe <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80009a8:	4803      	ldr	r0, [pc, #12]	@ (80009b8 <MX_TIM2_Init+0xb0>)
 80009aa:	f000 fa01 	bl	8000db0 <HAL_TIM_MspPostInit>

}
 80009ae:	bf00      	nop
 80009b0:	3728      	adds	r7, #40	@ 0x28
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20000120 	.word	0x20000120

080009bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08a      	sub	sp, #40	@ 0x28
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009c2:	f107 0320 	add.w	r3, r7, #32
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009cc:	1d3b      	adds	r3, r7, #4
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]
 80009d4:	609a      	str	r2, [r3, #8]
 80009d6:	60da      	str	r2, [r3, #12]
 80009d8:	611a      	str	r2, [r3, #16]
 80009da:	615a      	str	r2, [r3, #20]
 80009dc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009de:	4b22      	ldr	r3, [pc, #136]	@ (8000a68 <MX_TIM3_Init+0xac>)
 80009e0:	4a22      	ldr	r2, [pc, #136]	@ (8000a6c <MX_TIM3_Init+0xb0>)
 80009e2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64 - 1;
 80009e4:	4b20      	ldr	r3, [pc, #128]	@ (8000a68 <MX_TIM3_Init+0xac>)
 80009e6:	223f      	movs	r2, #63	@ 0x3f
 80009e8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ea:	4b1f      	ldr	r3, [pc, #124]	@ (8000a68 <MX_TIM3_Init+0xac>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000 - 1;
 80009f0:	4b1d      	ldr	r3, [pc, #116]	@ (8000a68 <MX_TIM3_Init+0xac>)
 80009f2:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80009f6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a68 <MX_TIM3_Init+0xac>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000a68 <MX_TIM3_Init+0xac>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a04:	4818      	ldr	r0, [pc, #96]	@ (8000a68 <MX_TIM3_Init+0xac>)
 8000a06:	f002 fa35 	bl	8002e74 <HAL_TIM_PWM_Init>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000a10:	f000 f8f5 	bl	8000bfe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a14:	2300      	movs	r3, #0
 8000a16:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a1c:	f107 0320 	add.w	r3, r7, #32
 8000a20:	4619      	mov	r1, r3
 8000a22:	4811      	ldr	r0, [pc, #68]	@ (8000a68 <MX_TIM3_Init+0xac>)
 8000a24:	f002 fe7c 	bl	8003720 <HAL_TIMEx_MasterConfigSynchronization>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000a2e:	f000 f8e6 	bl	8000bfe <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a32:	2360      	movs	r3, #96	@ 0x60
 8000a34:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8000a36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a3a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a40:	2300      	movs	r3, #0
 8000a42:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a44:	1d3b      	adds	r3, r7, #4
 8000a46:	2200      	movs	r2, #0
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4807      	ldr	r0, [pc, #28]	@ (8000a68 <MX_TIM3_Init+0xac>)
 8000a4c:	f002 fb2a 	bl	80030a4 <HAL_TIM_PWM_ConfigChannel>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000a56:	f000 f8d2 	bl	8000bfe <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a5a:	4803      	ldr	r0, [pc, #12]	@ (8000a68 <MX_TIM3_Init+0xac>)
 8000a5c:	f000 f9a8 	bl	8000db0 <HAL_TIM_MspPostInit>

}
 8000a60:	bf00      	nop
 8000a62:	3728      	adds	r7, #40	@ 0x28
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	20000168 	.word	0x20000168
 8000a6c:	40000400 	.word	0x40000400

08000a70 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08a      	sub	sp, #40	@ 0x28
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a76:	f107 0320 	add.w	r3, r7, #32
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a80:	1d3b      	adds	r3, r7, #4
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	609a      	str	r2, [r3, #8]
 8000a8a:	60da      	str	r2, [r3, #12]
 8000a8c:	611a      	str	r2, [r3, #16]
 8000a8e:	615a      	str	r2, [r3, #20]
 8000a90:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000a92:	4b22      	ldr	r3, [pc, #136]	@ (8000b1c <MX_TIM5_Init+0xac>)
 8000a94:	4a22      	ldr	r2, [pc, #136]	@ (8000b20 <MX_TIM5_Init+0xb0>)
 8000a96:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 64 - 1;
 8000a98:	4b20      	ldr	r3, [pc, #128]	@ (8000b1c <MX_TIM5_Init+0xac>)
 8000a9a:	223f      	movs	r2, #63	@ 0x3f
 8000a9c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a9e:	4b1f      	ldr	r3, [pc, #124]	@ (8000b1c <MX_TIM5_Init+0xac>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20000 - 1;
 8000aa4:	4b1d      	ldr	r3, [pc, #116]	@ (8000b1c <MX_TIM5_Init+0xac>)
 8000aa6:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000aaa:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aac:	4b1b      	ldr	r3, [pc, #108]	@ (8000b1c <MX_TIM5_Init+0xac>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ab2:	4b1a      	ldr	r3, [pc, #104]	@ (8000b1c <MX_TIM5_Init+0xac>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000ab8:	4818      	ldr	r0, [pc, #96]	@ (8000b1c <MX_TIM5_Init+0xac>)
 8000aba:	f002 f9db 	bl	8002e74 <HAL_TIM_PWM_Init>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8000ac4:	f000 f89b 	bl	8000bfe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000acc:	2300      	movs	r3, #0
 8000ace:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000ad0:	f107 0320 	add.w	r3, r7, #32
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4811      	ldr	r0, [pc, #68]	@ (8000b1c <MX_TIM5_Init+0xac>)
 8000ad8:	f002 fe22 	bl	8003720 <HAL_TIMEx_MasterConfigSynchronization>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8000ae2:	f000 f88c 	bl	8000bfe <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ae6:	2360      	movs	r3, #96	@ 0x60
 8000ae8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8000aea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000aee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000af0:	2300      	movs	r3, #0
 8000af2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000af4:	2300      	movs	r3, #0
 8000af6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000af8:	1d3b      	adds	r3, r7, #4
 8000afa:	2200      	movs	r2, #0
 8000afc:	4619      	mov	r1, r3
 8000afe:	4807      	ldr	r0, [pc, #28]	@ (8000b1c <MX_TIM5_Init+0xac>)
 8000b00:	f002 fad0 	bl	80030a4 <HAL_TIM_PWM_ConfigChannel>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8000b0a:	f000 f878 	bl	8000bfe <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000b0e:	4803      	ldr	r0, [pc, #12]	@ (8000b1c <MX_TIM5_Init+0xac>)
 8000b10:	f000 f94e 	bl	8000db0 <HAL_TIM_MspPostInit>

}
 8000b14:	bf00      	nop
 8000b16:	3728      	adds	r7, #40	@ 0x28
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	200001b0 	.word	0x200001b0
 8000b20:	40000c00 	.word	0x40000c00

08000b24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	607b      	str	r3, [r7, #4]
 8000b2e:	4b10      	ldr	r3, [pc, #64]	@ (8000b70 <MX_GPIO_Init+0x4c>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b32:	4a0f      	ldr	r2, [pc, #60]	@ (8000b70 <MX_GPIO_Init+0x4c>)
 8000b34:	f043 0301 	orr.w	r3, r3, #1
 8000b38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b70 <MX_GPIO_Init+0x4c>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	603b      	str	r3, [r7, #0]
 8000b4a:	4b09      	ldr	r3, [pc, #36]	@ (8000b70 <MX_GPIO_Init+0x4c>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4e:	4a08      	ldr	r2, [pc, #32]	@ (8000b70 <MX_GPIO_Init+0x4c>)
 8000b50:	f043 0302 	orr.w	r3, r3, #2
 8000b54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b56:	4b06      	ldr	r3, [pc, #24]	@ (8000b70 <MX_GPIO_Init+0x4c>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5a:	f003 0302 	and.w	r3, r3, #2
 8000b5e:	603b      	str	r3, [r7, #0]
 8000b60:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b62:	bf00      	nop
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	40023800 	.word	0x40023800

08000b74 <BNO055_Read_Raw_Euler_Angles>:
    HAL_I2C_Master_Transmit(&hi2c1, BNO055_I2C_ADDR, config_data, 2, HAL_MAX_DELAY);

    HAL_Delay(20); // 설정 적용 대기
}

void BNO055_Read_Raw_Euler_Angles(int16_t *yaw, int16_t *roll, int16_t *pitch) {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08a      	sub	sp, #40	@ 0x28
 8000b78:	af04      	add	r7, sp, #16
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
    uint8_t buffer[6]; // 6바이트 버퍼 (Yaw, Roll, Pitch 데이터)

    // BNO055의 Euler Angles 레지스터에서 데이터 읽기
    HAL_I2C_Mem_Read(&hi2c1, BNO055_I2C_ADDR, BNO055_EULER_H_LSB_ADDR, 1, buffer, 6, HAL_MAX_DELAY);
 8000b80:	f04f 33ff 	mov.w	r3, #4294967295
 8000b84:	9302      	str	r3, [sp, #8]
 8000b86:	2306      	movs	r3, #6
 8000b88:	9301      	str	r3, [sp, #4]
 8000b8a:	f107 0310 	add.w	r3, r7, #16
 8000b8e:	9300      	str	r3, [sp, #0]
 8000b90:	2301      	movs	r3, #1
 8000b92:	221a      	movs	r2, #26
 8000b94:	2150      	movs	r1, #80	@ 0x50
 8000b96:	4812      	ldr	r0, [pc, #72]	@ (8000be0 <BNO055_Read_Raw_Euler_Angles+0x6c>)
 8000b98:	f000 ff16 	bl	80019c8 <HAL_I2C_Mem_Read>

    // 버퍼 데이터를 16비트 형식으로 변환
    *yaw = (buffer[1] << 8) | buffer[0];  // Yaw 값
 8000b9c:	7c7b      	ldrb	r3, [r7, #17]
 8000b9e:	b21b      	sxth	r3, r3
 8000ba0:	021b      	lsls	r3, r3, #8
 8000ba2:	b21a      	sxth	r2, r3
 8000ba4:	7c3b      	ldrb	r3, [r7, #16]
 8000ba6:	b21b      	sxth	r3, r3
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	b21a      	sxth	r2, r3
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	801a      	strh	r2, [r3, #0]
    *roll = (buffer[3] << 8) | buffer[2]; // Roll 값
 8000bb0:	7cfb      	ldrb	r3, [r7, #19]
 8000bb2:	b21b      	sxth	r3, r3
 8000bb4:	021b      	lsls	r3, r3, #8
 8000bb6:	b21a      	sxth	r2, r3
 8000bb8:	7cbb      	ldrb	r3, [r7, #18]
 8000bba:	b21b      	sxth	r3, r3
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	b21a      	sxth	r2, r3
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	801a      	strh	r2, [r3, #0]
    *pitch = (buffer[5] << 8) | buffer[4]; // Pitch 값
 8000bc4:	7d7b      	ldrb	r3, [r7, #21]
 8000bc6:	b21b      	sxth	r3, r3
 8000bc8:	021b      	lsls	r3, r3, #8
 8000bca:	b21a      	sxth	r2, r3
 8000bcc:	7d3b      	ldrb	r3, [r7, #20]
 8000bce:	b21b      	sxth	r3, r3
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	b21a      	sxth	r2, r3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	801a      	strh	r2, [r3, #0]
}
 8000bd8:	bf00      	nop
 8000bda:	3718      	adds	r7, #24
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	20000084 	.word	0x20000084

08000be4 <__io_putchar>:

int __io_putchar(int ch) {
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  return ITM_SendChar(ch);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff fcf4 	bl	80005dc <ITM_SendChar>
 8000bf4:	4603      	mov	r3, r0
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c02:	b672      	cpsid	i
}
 8000c04:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c06:	bf00      	nop
 8000c08:	e7fd      	b.n	8000c06 <Error_Handler+0x8>
	...

08000c0c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	607b      	str	r3, [r7, #4]
 8000c16:	4b10      	ldr	r3, [pc, #64]	@ (8000c58 <HAL_MspInit+0x4c>)
 8000c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c1a:	4a0f      	ldr	r2, [pc, #60]	@ (8000c58 <HAL_MspInit+0x4c>)
 8000c1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c20:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c22:	4b0d      	ldr	r3, [pc, #52]	@ (8000c58 <HAL_MspInit+0x4c>)
 8000c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	603b      	str	r3, [r7, #0]
 8000c32:	4b09      	ldr	r3, [pc, #36]	@ (8000c58 <HAL_MspInit+0x4c>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c36:	4a08      	ldr	r2, [pc, #32]	@ (8000c58 <HAL_MspInit+0x4c>)
 8000c38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c3e:	4b06      	ldr	r3, [pc, #24]	@ (8000c58 <HAL_MspInit+0x4c>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c46:	603b      	str	r3, [r7, #0]
 8000c48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	40023800 	.word	0x40023800

08000c5c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08a      	sub	sp, #40	@ 0x28
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a19      	ldr	r2, [pc, #100]	@ (8000ce0 <HAL_I2C_MspInit+0x84>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d12b      	bne.n	8000cd6 <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	613b      	str	r3, [r7, #16]
 8000c82:	4b18      	ldr	r3, [pc, #96]	@ (8000ce4 <HAL_I2C_MspInit+0x88>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c86:	4a17      	ldr	r2, [pc, #92]	@ (8000ce4 <HAL_I2C_MspInit+0x88>)
 8000c88:	f043 0302 	orr.w	r3, r3, #2
 8000c8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ce4 <HAL_I2C_MspInit+0x88>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c92:	f003 0302 	and.w	r3, r3, #2
 8000c96:	613b      	str	r3, [r7, #16]
 8000c98:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c9a:	23c0      	movs	r3, #192	@ 0xc0
 8000c9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c9e:	2312      	movs	r3, #18
 8000ca0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000caa:	2304      	movs	r3, #4
 8000cac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cae:	f107 0314 	add.w	r3, r7, #20
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	480c      	ldr	r0, [pc, #48]	@ (8000ce8 <HAL_I2C_MspInit+0x8c>)
 8000cb6:	f000 fbaf 	bl	8001418 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	4b09      	ldr	r3, [pc, #36]	@ (8000ce4 <HAL_I2C_MspInit+0x88>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc2:	4a08      	ldr	r2, [pc, #32]	@ (8000ce4 <HAL_I2C_MspInit+0x88>)
 8000cc4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000cc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cca:	4b06      	ldr	r3, [pc, #24]	@ (8000ce4 <HAL_I2C_MspInit+0x88>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000cd6:	bf00      	nop
 8000cd8:	3728      	adds	r7, #40	@ 0x28
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40005400 	.word	0x40005400
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	40020400 	.word	0x40020400

08000cec <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b087      	sub	sp, #28
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a29      	ldr	r2, [pc, #164]	@ (8000da0 <HAL_TIM_PWM_MspInit+0xb4>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d10e      	bne.n	8000d1c <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	617b      	str	r3, [r7, #20]
 8000d02:	4b28      	ldr	r3, [pc, #160]	@ (8000da4 <HAL_TIM_PWM_MspInit+0xb8>)
 8000d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d06:	4a27      	ldr	r2, [pc, #156]	@ (8000da4 <HAL_TIM_PWM_MspInit+0xb8>)
 8000d08:	f043 0301 	orr.w	r3, r3, #1
 8000d0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d0e:	4b25      	ldr	r3, [pc, #148]	@ (8000da4 <HAL_TIM_PWM_MspInit+0xb8>)
 8000d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	617b      	str	r3, [r7, #20]
 8000d18:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM5_MspInit 1 */

    /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000d1a:	e03a      	b.n	8000d92 <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM2)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d24:	d10e      	bne.n	8000d44 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	613b      	str	r3, [r7, #16]
 8000d2a:	4b1e      	ldr	r3, [pc, #120]	@ (8000da4 <HAL_TIM_PWM_MspInit+0xb8>)
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d2e:	4a1d      	ldr	r2, [pc, #116]	@ (8000da4 <HAL_TIM_PWM_MspInit+0xb8>)
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d36:	4b1b      	ldr	r3, [pc, #108]	@ (8000da4 <HAL_TIM_PWM_MspInit+0xb8>)
 8000d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	613b      	str	r3, [r7, #16]
 8000d40:	693b      	ldr	r3, [r7, #16]
}
 8000d42:	e026      	b.n	8000d92 <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM3)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a17      	ldr	r2, [pc, #92]	@ (8000da8 <HAL_TIM_PWM_MspInit+0xbc>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d10e      	bne.n	8000d6c <HAL_TIM_PWM_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	4b14      	ldr	r3, [pc, #80]	@ (8000da4 <HAL_TIM_PWM_MspInit+0xb8>)
 8000d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d56:	4a13      	ldr	r2, [pc, #76]	@ (8000da4 <HAL_TIM_PWM_MspInit+0xb8>)
 8000d58:	f043 0302 	orr.w	r3, r3, #2
 8000d5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d5e:	4b11      	ldr	r3, [pc, #68]	@ (8000da4 <HAL_TIM_PWM_MspInit+0xb8>)
 8000d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d62:	f003 0302 	and.w	r3, r3, #2
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
}
 8000d6a:	e012      	b.n	8000d92 <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM5)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a0e      	ldr	r2, [pc, #56]	@ (8000dac <HAL_TIM_PWM_MspInit+0xc0>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d10d      	bne.n	8000d92 <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	60bb      	str	r3, [r7, #8]
 8000d7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000da4 <HAL_TIM_PWM_MspInit+0xb8>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d7e:	4a09      	ldr	r2, [pc, #36]	@ (8000da4 <HAL_TIM_PWM_MspInit+0xb8>)
 8000d80:	f043 0308 	orr.w	r3, r3, #8
 8000d84:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d86:	4b07      	ldr	r3, [pc, #28]	@ (8000da4 <HAL_TIM_PWM_MspInit+0xb8>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d8a:	f003 0308 	and.w	r3, r3, #8
 8000d8e:	60bb      	str	r3, [r7, #8]
 8000d90:	68bb      	ldr	r3, [r7, #8]
}
 8000d92:	bf00      	nop
 8000d94:	371c      	adds	r7, #28
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	40010000 	.word	0x40010000
 8000da4:	40023800 	.word	0x40023800
 8000da8:	40000400 	.word	0x40000400
 8000dac:	40000c00 	.word	0x40000c00

08000db0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b08c      	sub	sp, #48	@ 0x30
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db8:	f107 031c 	add.w	r3, r7, #28
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a48      	ldr	r2, [pc, #288]	@ (8000ef0 <HAL_TIM_MspPostInit+0x140>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d11f      	bne.n	8000e12 <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61bb      	str	r3, [r7, #24]
 8000dd6:	4b47      	ldr	r3, [pc, #284]	@ (8000ef4 <HAL_TIM_MspPostInit+0x144>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dda:	4a46      	ldr	r2, [pc, #280]	@ (8000ef4 <HAL_TIM_MspPostInit+0x144>)
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000de2:	4b44      	ldr	r3, [pc, #272]	@ (8000ef4 <HAL_TIM_MspPostInit+0x144>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	61bb      	str	r3, [r7, #24]
 8000dec:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000dee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000df2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df4:	2302      	movs	r3, #2
 8000df6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e00:	2301      	movs	r3, #1
 8000e02:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e04:	f107 031c 	add.w	r3, r7, #28
 8000e08:	4619      	mov	r1, r3
 8000e0a:	483b      	ldr	r0, [pc, #236]	@ (8000ef8 <HAL_TIM_MspPostInit+0x148>)
 8000e0c:	f000 fb04 	bl	8001418 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM5_MspPostInit 1 */

    /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8000e10:	e06a      	b.n	8000ee8 <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM2)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e1a:	d11e      	bne.n	8000e5a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]
 8000e20:	4b34      	ldr	r3, [pc, #208]	@ (8000ef4 <HAL_TIM_MspPostInit+0x144>)
 8000e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e24:	4a33      	ldr	r2, [pc, #204]	@ (8000ef4 <HAL_TIM_MspPostInit+0x144>)
 8000e26:	f043 0301 	orr.w	r3, r3, #1
 8000e2a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e2c:	4b31      	ldr	r3, [pc, #196]	@ (8000ef4 <HAL_TIM_MspPostInit+0x144>)
 8000e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e30:	f003 0301 	and.w	r3, r3, #1
 8000e34:	617b      	str	r3, [r7, #20]
 8000e36:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e38:	2320      	movs	r3, #32
 8000e3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e44:	2300      	movs	r3, #0
 8000e46:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4c:	f107 031c 	add.w	r3, r7, #28
 8000e50:	4619      	mov	r1, r3
 8000e52:	4829      	ldr	r0, [pc, #164]	@ (8000ef8 <HAL_TIM_MspPostInit+0x148>)
 8000e54:	f000 fae0 	bl	8001418 <HAL_GPIO_Init>
}
 8000e58:	e046      	b.n	8000ee8 <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM3)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a27      	ldr	r2, [pc, #156]	@ (8000efc <HAL_TIM_MspPostInit+0x14c>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d11e      	bne.n	8000ea2 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e64:	2300      	movs	r3, #0
 8000e66:	613b      	str	r3, [r7, #16]
 8000e68:	4b22      	ldr	r3, [pc, #136]	@ (8000ef4 <HAL_TIM_MspPostInit+0x144>)
 8000e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6c:	4a21      	ldr	r2, [pc, #132]	@ (8000ef4 <HAL_TIM_MspPostInit+0x144>)
 8000e6e:	f043 0301 	orr.w	r3, r3, #1
 8000e72:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e74:	4b1f      	ldr	r3, [pc, #124]	@ (8000ef4 <HAL_TIM_MspPostInit+0x144>)
 8000e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e78:	f003 0301 	and.w	r3, r3, #1
 8000e7c:	613b      	str	r3, [r7, #16]
 8000e7e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e80:	2340      	movs	r3, #64	@ 0x40
 8000e82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e84:	2302      	movs	r3, #2
 8000e86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e90:	2302      	movs	r3, #2
 8000e92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e94:	f107 031c 	add.w	r3, r7, #28
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4817      	ldr	r0, [pc, #92]	@ (8000ef8 <HAL_TIM_MspPostInit+0x148>)
 8000e9c:	f000 fabc 	bl	8001418 <HAL_GPIO_Init>
}
 8000ea0:	e022      	b.n	8000ee8 <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM5)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a16      	ldr	r2, [pc, #88]	@ (8000f00 <HAL_TIM_MspPostInit+0x150>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d11d      	bne.n	8000ee8 <HAL_TIM_MspPostInit+0x138>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eac:	2300      	movs	r3, #0
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	4b10      	ldr	r3, [pc, #64]	@ (8000ef4 <HAL_TIM_MspPostInit+0x144>)
 8000eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb4:	4a0f      	ldr	r2, [pc, #60]	@ (8000ef4 <HAL_TIM_MspPostInit+0x144>)
 8000eb6:	f043 0301 	orr.w	r3, r3, #1
 8000eba:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ebc:	4b0d      	ldr	r3, [pc, #52]	@ (8000ef4 <HAL_TIM_MspPostInit+0x144>)
 8000ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec0:	f003 0301 	and.w	r3, r3, #1
 8000ec4:	60fb      	str	r3, [r7, #12]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000edc:	f107 031c 	add.w	r3, r7, #28
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4805      	ldr	r0, [pc, #20]	@ (8000ef8 <HAL_TIM_MspPostInit+0x148>)
 8000ee4:	f000 fa98 	bl	8001418 <HAL_GPIO_Init>
}
 8000ee8:	bf00      	nop
 8000eea:	3730      	adds	r7, #48	@ 0x30
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40010000 	.word	0x40010000
 8000ef4:	40023800 	.word	0x40023800
 8000ef8:	40020000 	.word	0x40020000
 8000efc:	40000400 	.word	0x40000400
 8000f00:	40000c00 	.word	0x40000c00

08000f04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f08:	bf00      	nop
 8000f0a:	e7fd      	b.n	8000f08 <NMI_Handler+0x4>

08000f0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f10:	bf00      	nop
 8000f12:	e7fd      	b.n	8000f10 <HardFault_Handler+0x4>

08000f14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f18:	bf00      	nop
 8000f1a:	e7fd      	b.n	8000f18 <MemManage_Handler+0x4>

08000f1c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f20:	bf00      	nop
 8000f22:	e7fd      	b.n	8000f20 <BusFault_Handler+0x4>

08000f24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f28:	bf00      	nop
 8000f2a:	e7fd      	b.n	8000f28 <UsageFault_Handler+0x4>

08000f2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr

08000f3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr

08000f56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f5a:	f000 f933 	bl	80011c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b086      	sub	sp, #24
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	60f8      	str	r0, [r7, #12]
 8000f6a:	60b9      	str	r1, [r7, #8]
 8000f6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f6e:	2300      	movs	r3, #0
 8000f70:	617b      	str	r3, [r7, #20]
 8000f72:	e00a      	b.n	8000f8a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f74:	f3af 8000 	nop.w
 8000f78:	4601      	mov	r1, r0
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	1c5a      	adds	r2, r3, #1
 8000f7e:	60ba      	str	r2, [r7, #8]
 8000f80:	b2ca      	uxtb	r2, r1
 8000f82:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	3301      	adds	r3, #1
 8000f88:	617b      	str	r3, [r7, #20]
 8000f8a:	697a      	ldr	r2, [r7, #20]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	dbf0      	blt.n	8000f74 <_read+0x12>
  }

  return len;
 8000f92:	687b      	ldr	r3, [r7, #4]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3718      	adds	r7, #24
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]
 8000fac:	e009      	b.n	8000fc2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	1c5a      	adds	r2, r3, #1
 8000fb2:	60ba      	str	r2, [r7, #8]
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff fe14 	bl	8000be4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	617b      	str	r3, [r7, #20]
 8000fc2:	697a      	ldr	r2, [r7, #20]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	dbf1      	blt.n	8000fae <_write+0x12>
  }
  return len;
 8000fca:	687b      	ldr	r3, [r7, #4]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3718      	adds	r7, #24
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <_close>:

int _close(int file)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fdc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ffc:	605a      	str	r2, [r3, #4]
  return 0;
 8000ffe:	2300      	movs	r3, #0
}
 8001000:	4618      	mov	r0, r3
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <_isatty>:

int _isatty(int file)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001014:	2301      	movs	r3, #1
}
 8001016:	4618      	mov	r0, r3
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr

08001022 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001022:	b480      	push	{r7}
 8001024:	b085      	sub	sp, #20
 8001026:	af00      	add	r7, sp, #0
 8001028:	60f8      	str	r0, [r7, #12]
 800102a:	60b9      	str	r1, [r7, #8]
 800102c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800102e:	2300      	movs	r3, #0
}
 8001030:	4618      	mov	r0, r3
 8001032:	3714      	adds	r7, #20
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001044:	4a14      	ldr	r2, [pc, #80]	@ (8001098 <_sbrk+0x5c>)
 8001046:	4b15      	ldr	r3, [pc, #84]	@ (800109c <_sbrk+0x60>)
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001050:	4b13      	ldr	r3, [pc, #76]	@ (80010a0 <_sbrk+0x64>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d102      	bne.n	800105e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001058:	4b11      	ldr	r3, [pc, #68]	@ (80010a0 <_sbrk+0x64>)
 800105a:	4a12      	ldr	r2, [pc, #72]	@ (80010a4 <_sbrk+0x68>)
 800105c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800105e:	4b10      	ldr	r3, [pc, #64]	@ (80010a0 <_sbrk+0x64>)
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4413      	add	r3, r2
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	429a      	cmp	r2, r3
 800106a:	d207      	bcs.n	800107c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800106c:	f002 fe20 	bl	8003cb0 <__errno>
 8001070:	4603      	mov	r3, r0
 8001072:	220c      	movs	r2, #12
 8001074:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001076:	f04f 33ff 	mov.w	r3, #4294967295
 800107a:	e009      	b.n	8001090 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800107c:	4b08      	ldr	r3, [pc, #32]	@ (80010a0 <_sbrk+0x64>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001082:	4b07      	ldr	r3, [pc, #28]	@ (80010a0 <_sbrk+0x64>)
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4413      	add	r3, r2
 800108a:	4a05      	ldr	r2, [pc, #20]	@ (80010a0 <_sbrk+0x64>)
 800108c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800108e:	68fb      	ldr	r3, [r7, #12]
}
 8001090:	4618      	mov	r0, r3
 8001092:	3718      	adds	r7, #24
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20020000 	.word	0x20020000
 800109c:	00000400 	.word	0x00000400
 80010a0:	200001f8 	.word	0x200001f8
 80010a4:	20000350 	.word	0x20000350

080010a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010ac:	4b06      	ldr	r3, [pc, #24]	@ (80010c8 <SystemInit+0x20>)
 80010ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010b2:	4a05      	ldr	r2, [pc, #20]	@ (80010c8 <SystemInit+0x20>)
 80010b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001104 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80010d0:	f7ff ffea 	bl	80010a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010d4:	480c      	ldr	r0, [pc, #48]	@ (8001108 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010d6:	490d      	ldr	r1, [pc, #52]	@ (800110c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001110 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010dc:	e002      	b.n	80010e4 <LoopCopyDataInit>

080010de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010e2:	3304      	adds	r3, #4

080010e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010e8:	d3f9      	bcc.n	80010de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001114 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010ec:	4c0a      	ldr	r4, [pc, #40]	@ (8001118 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f0:	e001      	b.n	80010f6 <LoopFillZerobss>

080010f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010f4:	3204      	adds	r2, #4

080010f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010f8:	d3fb      	bcc.n	80010f2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80010fa:	f002 fddf 	bl	8003cbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010fe:	f7ff fa95 	bl	800062c <main>
  bx  lr    
 8001102:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001104:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001108:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800110c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001110:	080047c4 	.word	0x080047c4
  ldr r2, =_sbss
 8001114:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001118:	2000034c 	.word	0x2000034c

0800111c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800111c:	e7fe      	b.n	800111c <ADC_IRQHandler>
	...

08001120 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001124:	4b0e      	ldr	r3, [pc, #56]	@ (8001160 <HAL_Init+0x40>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a0d      	ldr	r2, [pc, #52]	@ (8001160 <HAL_Init+0x40>)
 800112a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800112e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001130:	4b0b      	ldr	r3, [pc, #44]	@ (8001160 <HAL_Init+0x40>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a0a      	ldr	r2, [pc, #40]	@ (8001160 <HAL_Init+0x40>)
 8001136:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800113a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800113c:	4b08      	ldr	r3, [pc, #32]	@ (8001160 <HAL_Init+0x40>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a07      	ldr	r2, [pc, #28]	@ (8001160 <HAL_Init+0x40>)
 8001142:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001146:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001148:	2003      	movs	r0, #3
 800114a:	f000 f931 	bl	80013b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800114e:	200f      	movs	r0, #15
 8001150:	f000 f808 	bl	8001164 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001154:	f7ff fd5a 	bl	8000c0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40023c00 	.word	0x40023c00

08001164 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800116c:	4b12      	ldr	r3, [pc, #72]	@ (80011b8 <HAL_InitTick+0x54>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	4b12      	ldr	r3, [pc, #72]	@ (80011bc <HAL_InitTick+0x58>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	4619      	mov	r1, r3
 8001176:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800117a:	fbb3 f3f1 	udiv	r3, r3, r1
 800117e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001182:	4618      	mov	r0, r3
 8001184:	f000 f93b 	bl	80013fe <HAL_SYSTICK_Config>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e00e      	b.n	80011b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2b0f      	cmp	r3, #15
 8001196:	d80a      	bhi.n	80011ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001198:	2200      	movs	r2, #0
 800119a:	6879      	ldr	r1, [r7, #4]
 800119c:	f04f 30ff 	mov.w	r0, #4294967295
 80011a0:	f000 f911 	bl	80013c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011a4:	4a06      	ldr	r2, [pc, #24]	@ (80011c0 <HAL_InitTick+0x5c>)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011aa:	2300      	movs	r3, #0
 80011ac:	e000      	b.n	80011b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20000000 	.word	0x20000000
 80011bc:	20000008 	.word	0x20000008
 80011c0:	20000004 	.word	0x20000004

080011c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011c8:	4b06      	ldr	r3, [pc, #24]	@ (80011e4 <HAL_IncTick+0x20>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	461a      	mov	r2, r3
 80011ce:	4b06      	ldr	r3, [pc, #24]	@ (80011e8 <HAL_IncTick+0x24>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4413      	add	r3, r2
 80011d4:	4a04      	ldr	r2, [pc, #16]	@ (80011e8 <HAL_IncTick+0x24>)
 80011d6:	6013      	str	r3, [r2, #0]
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	20000008 	.word	0x20000008
 80011e8:	200001fc 	.word	0x200001fc

080011ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  return uwTick;
 80011f0:	4b03      	ldr	r3, [pc, #12]	@ (8001200 <HAL_GetTick+0x14>)
 80011f2:	681b      	ldr	r3, [r3, #0]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	200001fc 	.word	0x200001fc

08001204 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800120c:	f7ff ffee 	bl	80011ec <HAL_GetTick>
 8001210:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800121c:	d005      	beq.n	800122a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800121e:	4b0a      	ldr	r3, [pc, #40]	@ (8001248 <HAL_Delay+0x44>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	461a      	mov	r2, r3
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	4413      	add	r3, r2
 8001228:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800122a:	bf00      	nop
 800122c:	f7ff ffde 	bl	80011ec <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	68fa      	ldr	r2, [r7, #12]
 8001238:	429a      	cmp	r2, r3
 800123a:	d8f7      	bhi.n	800122c <HAL_Delay+0x28>
  {
  }
}
 800123c:	bf00      	nop
 800123e:	bf00      	nop
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20000008 	.word	0x20000008

0800124c <__NVIC_SetPriorityGrouping>:
{
 800124c:	b480      	push	{r7}
 800124e:	b085      	sub	sp, #20
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f003 0307 	and.w	r3, r3, #7
 800125a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800125c:	4b0c      	ldr	r3, [pc, #48]	@ (8001290 <__NVIC_SetPriorityGrouping+0x44>)
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001262:	68ba      	ldr	r2, [r7, #8]
 8001264:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001268:	4013      	ands	r3, r2
 800126a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001274:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001278:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800127c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800127e:	4a04      	ldr	r2, [pc, #16]	@ (8001290 <__NVIC_SetPriorityGrouping+0x44>)
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	60d3      	str	r3, [r2, #12]
}
 8001284:	bf00      	nop
 8001286:	3714      	adds	r7, #20
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <__NVIC_GetPriorityGrouping>:
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001298:	4b04      	ldr	r3, [pc, #16]	@ (80012ac <__NVIC_GetPriorityGrouping+0x18>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	0a1b      	lsrs	r3, r3, #8
 800129e:	f003 0307 	and.w	r3, r3, #7
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <__NVIC_SetPriority>:
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	6039      	str	r1, [r7, #0]
 80012ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	db0a      	blt.n	80012da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	b2da      	uxtb	r2, r3
 80012c8:	490c      	ldr	r1, [pc, #48]	@ (80012fc <__NVIC_SetPriority+0x4c>)
 80012ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ce:	0112      	lsls	r2, r2, #4
 80012d0:	b2d2      	uxtb	r2, r2
 80012d2:	440b      	add	r3, r1
 80012d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80012d8:	e00a      	b.n	80012f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	4908      	ldr	r1, [pc, #32]	@ (8001300 <__NVIC_SetPriority+0x50>)
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	f003 030f 	and.w	r3, r3, #15
 80012e6:	3b04      	subs	r3, #4
 80012e8:	0112      	lsls	r2, r2, #4
 80012ea:	b2d2      	uxtb	r2, r2
 80012ec:	440b      	add	r3, r1
 80012ee:	761a      	strb	r2, [r3, #24]
}
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	e000e100 	.word	0xe000e100
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <NVIC_EncodePriority>:
{
 8001304:	b480      	push	{r7}
 8001306:	b089      	sub	sp, #36	@ 0x24
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	f003 0307 	and.w	r3, r3, #7
 8001316:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	f1c3 0307 	rsb	r3, r3, #7
 800131e:	2b04      	cmp	r3, #4
 8001320:	bf28      	it	cs
 8001322:	2304      	movcs	r3, #4
 8001324:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	3304      	adds	r3, #4
 800132a:	2b06      	cmp	r3, #6
 800132c:	d902      	bls.n	8001334 <NVIC_EncodePriority+0x30>
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	3b03      	subs	r3, #3
 8001332:	e000      	b.n	8001336 <NVIC_EncodePriority+0x32>
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001338:	f04f 32ff 	mov.w	r2, #4294967295
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	43da      	mvns	r2, r3
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	401a      	ands	r2, r3
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800134c:	f04f 31ff 	mov.w	r1, #4294967295
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	fa01 f303 	lsl.w	r3, r1, r3
 8001356:	43d9      	mvns	r1, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800135c:	4313      	orrs	r3, r2
}
 800135e:	4618      	mov	r0, r3
 8001360:	3724      	adds	r7, #36	@ 0x24
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
	...

0800136c <SysTick_Config>:
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3b01      	subs	r3, #1
 8001378:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800137c:	d301      	bcc.n	8001382 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800137e:	2301      	movs	r3, #1
 8001380:	e00f      	b.n	80013a2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001382:	4a0a      	ldr	r2, [pc, #40]	@ (80013ac <SysTick_Config+0x40>)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3b01      	subs	r3, #1
 8001388:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800138a:	210f      	movs	r1, #15
 800138c:	f04f 30ff 	mov.w	r0, #4294967295
 8001390:	f7ff ff8e 	bl	80012b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001394:	4b05      	ldr	r3, [pc, #20]	@ (80013ac <SysTick_Config+0x40>)
 8001396:	2200      	movs	r2, #0
 8001398:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800139a:	4b04      	ldr	r3, [pc, #16]	@ (80013ac <SysTick_Config+0x40>)
 800139c:	2207      	movs	r2, #7
 800139e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	e000e010 	.word	0xe000e010

080013b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f7ff ff47 	bl	800124c <__NVIC_SetPriorityGrouping>
}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b086      	sub	sp, #24
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	4603      	mov	r3, r0
 80013ce:	60b9      	str	r1, [r7, #8]
 80013d0:	607a      	str	r2, [r7, #4]
 80013d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013d8:	f7ff ff5c 	bl	8001294 <__NVIC_GetPriorityGrouping>
 80013dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	68b9      	ldr	r1, [r7, #8]
 80013e2:	6978      	ldr	r0, [r7, #20]
 80013e4:	f7ff ff8e 	bl	8001304 <NVIC_EncodePriority>
 80013e8:	4602      	mov	r2, r0
 80013ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ee:	4611      	mov	r1, r2
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff ff5d 	bl	80012b0 <__NVIC_SetPriority>
}
 80013f6:	bf00      	nop
 80013f8:	3718      	adds	r7, #24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b082      	sub	sp, #8
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7ff ffb0 	bl	800136c <SysTick_Config>
 800140c:	4603      	mov	r3, r0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
	...

08001418 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001418:	b480      	push	{r7}
 800141a:	b089      	sub	sp, #36	@ 0x24
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001422:	2300      	movs	r3, #0
 8001424:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001426:	2300      	movs	r3, #0
 8001428:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800142a:	2300      	movs	r3, #0
 800142c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
 8001432:	e165      	b.n	8001700 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001434:	2201      	movs	r2, #1
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	697a      	ldr	r2, [r7, #20]
 8001444:	4013      	ands	r3, r2
 8001446:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	429a      	cmp	r2, r3
 800144e:	f040 8154 	bne.w	80016fa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f003 0303 	and.w	r3, r3, #3
 800145a:	2b01      	cmp	r3, #1
 800145c:	d005      	beq.n	800146a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001466:	2b02      	cmp	r3, #2
 8001468:	d130      	bne.n	80014cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	2203      	movs	r2, #3
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	43db      	mvns	r3, r3
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	4013      	ands	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	68da      	ldr	r2, [r3, #12]
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	4313      	orrs	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014a0:	2201      	movs	r2, #1
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	43db      	mvns	r3, r3
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4013      	ands	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	091b      	lsrs	r3, r3, #4
 80014b6:	f003 0201 	and.w	r2, r3, #1
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f003 0303 	and.w	r3, r3, #3
 80014d4:	2b03      	cmp	r3, #3
 80014d6:	d017      	beq.n	8001508 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	2203      	movs	r2, #3
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	43db      	mvns	r3, r3
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	4013      	ands	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	689a      	ldr	r2, [r3, #8]
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4313      	orrs	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f003 0303 	and.w	r3, r3, #3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d123      	bne.n	800155c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	08da      	lsrs	r2, r3, #3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3208      	adds	r2, #8
 800151c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001520:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	f003 0307 	and.w	r3, r3, #7
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	220f      	movs	r2, #15
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	43db      	mvns	r3, r3
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	4013      	ands	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	691a      	ldr	r2, [r3, #16]
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	4313      	orrs	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	08da      	lsrs	r2, r3, #3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	3208      	adds	r2, #8
 8001556:	69b9      	ldr	r1, [r7, #24]
 8001558:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	2203      	movs	r2, #3
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	43db      	mvns	r3, r3
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4013      	ands	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f003 0203 	and.w	r2, r3, #3
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	4313      	orrs	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001598:	2b00      	cmp	r3, #0
 800159a:	f000 80ae 	beq.w	80016fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	4b5d      	ldr	r3, [pc, #372]	@ (8001718 <HAL_GPIO_Init+0x300>)
 80015a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015a6:	4a5c      	ldr	r2, [pc, #368]	@ (8001718 <HAL_GPIO_Init+0x300>)
 80015a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80015ae:	4b5a      	ldr	r3, [pc, #360]	@ (8001718 <HAL_GPIO_Init+0x300>)
 80015b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015ba:	4a58      	ldr	r2, [pc, #352]	@ (800171c <HAL_GPIO_Init+0x304>)
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	089b      	lsrs	r3, r3, #2
 80015c0:	3302      	adds	r3, #2
 80015c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	f003 0303 	and.w	r3, r3, #3
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	220f      	movs	r2, #15
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	43db      	mvns	r3, r3
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	4013      	ands	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a4f      	ldr	r2, [pc, #316]	@ (8001720 <HAL_GPIO_Init+0x308>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d025      	beq.n	8001632 <HAL_GPIO_Init+0x21a>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a4e      	ldr	r2, [pc, #312]	@ (8001724 <HAL_GPIO_Init+0x30c>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d01f      	beq.n	800162e <HAL_GPIO_Init+0x216>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a4d      	ldr	r2, [pc, #308]	@ (8001728 <HAL_GPIO_Init+0x310>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d019      	beq.n	800162a <HAL_GPIO_Init+0x212>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a4c      	ldr	r2, [pc, #304]	@ (800172c <HAL_GPIO_Init+0x314>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d013      	beq.n	8001626 <HAL_GPIO_Init+0x20e>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a4b      	ldr	r2, [pc, #300]	@ (8001730 <HAL_GPIO_Init+0x318>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d00d      	beq.n	8001622 <HAL_GPIO_Init+0x20a>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a4a      	ldr	r2, [pc, #296]	@ (8001734 <HAL_GPIO_Init+0x31c>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d007      	beq.n	800161e <HAL_GPIO_Init+0x206>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a49      	ldr	r2, [pc, #292]	@ (8001738 <HAL_GPIO_Init+0x320>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d101      	bne.n	800161a <HAL_GPIO_Init+0x202>
 8001616:	2306      	movs	r3, #6
 8001618:	e00c      	b.n	8001634 <HAL_GPIO_Init+0x21c>
 800161a:	2307      	movs	r3, #7
 800161c:	e00a      	b.n	8001634 <HAL_GPIO_Init+0x21c>
 800161e:	2305      	movs	r3, #5
 8001620:	e008      	b.n	8001634 <HAL_GPIO_Init+0x21c>
 8001622:	2304      	movs	r3, #4
 8001624:	e006      	b.n	8001634 <HAL_GPIO_Init+0x21c>
 8001626:	2303      	movs	r3, #3
 8001628:	e004      	b.n	8001634 <HAL_GPIO_Init+0x21c>
 800162a:	2302      	movs	r3, #2
 800162c:	e002      	b.n	8001634 <HAL_GPIO_Init+0x21c>
 800162e:	2301      	movs	r3, #1
 8001630:	e000      	b.n	8001634 <HAL_GPIO_Init+0x21c>
 8001632:	2300      	movs	r3, #0
 8001634:	69fa      	ldr	r2, [r7, #28]
 8001636:	f002 0203 	and.w	r2, r2, #3
 800163a:	0092      	lsls	r2, r2, #2
 800163c:	4093      	lsls	r3, r2
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	4313      	orrs	r3, r2
 8001642:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001644:	4935      	ldr	r1, [pc, #212]	@ (800171c <HAL_GPIO_Init+0x304>)
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	089b      	lsrs	r3, r3, #2
 800164a:	3302      	adds	r3, #2
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001652:	4b3a      	ldr	r3, [pc, #232]	@ (800173c <HAL_GPIO_Init+0x324>)
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	43db      	mvns	r3, r3
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	4013      	ands	r3, r2
 8001660:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d003      	beq.n	8001676 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	4313      	orrs	r3, r2
 8001674:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001676:	4a31      	ldr	r2, [pc, #196]	@ (800173c <HAL_GPIO_Init+0x324>)
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800167c:	4b2f      	ldr	r3, [pc, #188]	@ (800173c <HAL_GPIO_Init+0x324>)
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	43db      	mvns	r3, r3
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	4013      	ands	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d003      	beq.n	80016a0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	4313      	orrs	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016a0:	4a26      	ldr	r2, [pc, #152]	@ (800173c <HAL_GPIO_Init+0x324>)
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016a6:	4b25      	ldr	r3, [pc, #148]	@ (800173c <HAL_GPIO_Init+0x324>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	43db      	mvns	r3, r3
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	4013      	ands	r3, r2
 80016b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d003      	beq.n	80016ca <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016ca:	4a1c      	ldr	r2, [pc, #112]	@ (800173c <HAL_GPIO_Init+0x324>)
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016d0:	4b1a      	ldr	r3, [pc, #104]	@ (800173c <HAL_GPIO_Init+0x324>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	43db      	mvns	r3, r3
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	4013      	ands	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d003      	beq.n	80016f4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016f4:	4a11      	ldr	r2, [pc, #68]	@ (800173c <HAL_GPIO_Init+0x324>)
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	3301      	adds	r3, #1
 80016fe:	61fb      	str	r3, [r7, #28]
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	2b0f      	cmp	r3, #15
 8001704:	f67f ae96 	bls.w	8001434 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001708:	bf00      	nop
 800170a:	bf00      	nop
 800170c:	3724      	adds	r7, #36	@ 0x24
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	40023800 	.word	0x40023800
 800171c:	40013800 	.word	0x40013800
 8001720:	40020000 	.word	0x40020000
 8001724:	40020400 	.word	0x40020400
 8001728:	40020800 	.word	0x40020800
 800172c:	40020c00 	.word	0x40020c00
 8001730:	40021000 	.word	0x40021000
 8001734:	40021400 	.word	0x40021400
 8001738:	40021800 	.word	0x40021800
 800173c:	40013c00 	.word	0x40013c00

08001740 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d101      	bne.n	8001752 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e12b      	b.n	80019aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001758:	b2db      	uxtb	r3, r3
 800175a:	2b00      	cmp	r3, #0
 800175c:	d106      	bne.n	800176c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f7ff fa78 	bl	8000c5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2224      	movs	r2, #36	@ 0x24
 8001770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f022 0201 	bic.w	r2, r2, #1
 8001782:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001792:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80017a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80017a4:	f000 ff0a 	bl	80025bc <HAL_RCC_GetPCLK1Freq>
 80017a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	4a81      	ldr	r2, [pc, #516]	@ (80019b4 <HAL_I2C_Init+0x274>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d807      	bhi.n	80017c4 <HAL_I2C_Init+0x84>
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	4a80      	ldr	r2, [pc, #512]	@ (80019b8 <HAL_I2C_Init+0x278>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	bf94      	ite	ls
 80017bc:	2301      	movls	r3, #1
 80017be:	2300      	movhi	r3, #0
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	e006      	b.n	80017d2 <HAL_I2C_Init+0x92>
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	4a7d      	ldr	r2, [pc, #500]	@ (80019bc <HAL_I2C_Init+0x27c>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	bf94      	ite	ls
 80017cc:	2301      	movls	r3, #1
 80017ce:	2300      	movhi	r3, #0
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e0e7      	b.n	80019aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	4a78      	ldr	r2, [pc, #480]	@ (80019c0 <HAL_I2C_Init+0x280>)
 80017de:	fba2 2303 	umull	r2, r3, r2, r3
 80017e2:	0c9b      	lsrs	r3, r3, #18
 80017e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	68ba      	ldr	r2, [r7, #8]
 80017f6:	430a      	orrs	r2, r1
 80017f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	6a1b      	ldr	r3, [r3, #32]
 8001800:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	4a6a      	ldr	r2, [pc, #424]	@ (80019b4 <HAL_I2C_Init+0x274>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d802      	bhi.n	8001814 <HAL_I2C_Init+0xd4>
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	3301      	adds	r3, #1
 8001812:	e009      	b.n	8001828 <HAL_I2C_Init+0xe8>
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800181a:	fb02 f303 	mul.w	r3, r2, r3
 800181e:	4a69      	ldr	r2, [pc, #420]	@ (80019c4 <HAL_I2C_Init+0x284>)
 8001820:	fba2 2303 	umull	r2, r3, r2, r3
 8001824:	099b      	lsrs	r3, r3, #6
 8001826:	3301      	adds	r3, #1
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	6812      	ldr	r2, [r2, #0]
 800182c:	430b      	orrs	r3, r1
 800182e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800183a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	495c      	ldr	r1, [pc, #368]	@ (80019b4 <HAL_I2C_Init+0x274>)
 8001844:	428b      	cmp	r3, r1
 8001846:	d819      	bhi.n	800187c <HAL_I2C_Init+0x13c>
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	1e59      	subs	r1, r3, #1
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	fbb1 f3f3 	udiv	r3, r1, r3
 8001856:	1c59      	adds	r1, r3, #1
 8001858:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800185c:	400b      	ands	r3, r1
 800185e:	2b00      	cmp	r3, #0
 8001860:	d00a      	beq.n	8001878 <HAL_I2C_Init+0x138>
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	1e59      	subs	r1, r3, #1
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001870:	3301      	adds	r3, #1
 8001872:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001876:	e051      	b.n	800191c <HAL_I2C_Init+0x1dc>
 8001878:	2304      	movs	r3, #4
 800187a:	e04f      	b.n	800191c <HAL_I2C_Init+0x1dc>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d111      	bne.n	80018a8 <HAL_I2C_Init+0x168>
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	1e58      	subs	r0, r3, #1
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6859      	ldr	r1, [r3, #4]
 800188c:	460b      	mov	r3, r1
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	440b      	add	r3, r1
 8001892:	fbb0 f3f3 	udiv	r3, r0, r3
 8001896:	3301      	adds	r3, #1
 8001898:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800189c:	2b00      	cmp	r3, #0
 800189e:	bf0c      	ite	eq
 80018a0:	2301      	moveq	r3, #1
 80018a2:	2300      	movne	r3, #0
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	e012      	b.n	80018ce <HAL_I2C_Init+0x18e>
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	1e58      	subs	r0, r3, #1
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6859      	ldr	r1, [r3, #4]
 80018b0:	460b      	mov	r3, r1
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	440b      	add	r3, r1
 80018b6:	0099      	lsls	r1, r3, #2
 80018b8:	440b      	add	r3, r1
 80018ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80018be:	3301      	adds	r3, #1
 80018c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	bf0c      	ite	eq
 80018c8:	2301      	moveq	r3, #1
 80018ca:	2300      	movne	r3, #0
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <HAL_I2C_Init+0x196>
 80018d2:	2301      	movs	r3, #1
 80018d4:	e022      	b.n	800191c <HAL_I2C_Init+0x1dc>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d10e      	bne.n	80018fc <HAL_I2C_Init+0x1bc>
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	1e58      	subs	r0, r3, #1
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6859      	ldr	r1, [r3, #4]
 80018e6:	460b      	mov	r3, r1
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	440b      	add	r3, r1
 80018ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80018f0:	3301      	adds	r3, #1
 80018f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80018fa:	e00f      	b.n	800191c <HAL_I2C_Init+0x1dc>
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	1e58      	subs	r0, r3, #1
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6859      	ldr	r1, [r3, #4]
 8001904:	460b      	mov	r3, r1
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	440b      	add	r3, r1
 800190a:	0099      	lsls	r1, r3, #2
 800190c:	440b      	add	r3, r1
 800190e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001912:	3301      	adds	r3, #1
 8001914:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001918:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800191c:	6879      	ldr	r1, [r7, #4]
 800191e:	6809      	ldr	r1, [r1, #0]
 8001920:	4313      	orrs	r3, r2
 8001922:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	69da      	ldr	r2, [r3, #28]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a1b      	ldr	r3, [r3, #32]
 8001936:	431a      	orrs	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	430a      	orrs	r2, r1
 800193e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800194a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	6911      	ldr	r1, [r2, #16]
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	68d2      	ldr	r2, [r2, #12]
 8001956:	4311      	orrs	r1, r2
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	6812      	ldr	r2, [r2, #0]
 800195c:	430b      	orrs	r3, r1
 800195e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	695a      	ldr	r2, [r3, #20]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	699b      	ldr	r3, [r3, #24]
 8001972:	431a      	orrs	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	430a      	orrs	r2, r1
 800197a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f042 0201 	orr.w	r2, r2, #1
 800198a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2220      	movs	r2, #32
 8001996:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	000186a0 	.word	0x000186a0
 80019b8:	001e847f 	.word	0x001e847f
 80019bc:	003d08ff 	.word	0x003d08ff
 80019c0:	431bde83 	.word	0x431bde83
 80019c4:	10624dd3 	.word	0x10624dd3

080019c8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b08c      	sub	sp, #48	@ 0x30
 80019cc:	af02      	add	r7, sp, #8
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	4608      	mov	r0, r1
 80019d2:	4611      	mov	r1, r2
 80019d4:	461a      	mov	r2, r3
 80019d6:	4603      	mov	r3, r0
 80019d8:	817b      	strh	r3, [r7, #10]
 80019da:	460b      	mov	r3, r1
 80019dc:	813b      	strh	r3, [r7, #8]
 80019de:	4613      	mov	r3, r2
 80019e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80019e2:	f7ff fc03 	bl	80011ec <HAL_GetTick>
 80019e6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	2b20      	cmp	r3, #32
 80019f2:	f040 8214 	bne.w	8001e1e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f8:	9300      	str	r3, [sp, #0]
 80019fa:	2319      	movs	r3, #25
 80019fc:	2201      	movs	r2, #1
 80019fe:	497b      	ldr	r1, [pc, #492]	@ (8001bec <HAL_I2C_Mem_Read+0x224>)
 8001a00:	68f8      	ldr	r0, [r7, #12]
 8001a02:	f000 fafb 	bl	8001ffc <I2C_WaitOnFlagUntilTimeout>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	e207      	b.n	8001e20 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d101      	bne.n	8001a1e <HAL_I2C_Mem_Read+0x56>
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	e200      	b.n	8001e20 <HAL_I2C_Mem_Read+0x458>
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2201      	movs	r2, #1
 8001a22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0301 	and.w	r3, r3, #1
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d007      	beq.n	8001a44 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f042 0201 	orr.w	r2, r2, #1
 8001a42:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a52:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2222      	movs	r2, #34	@ 0x22
 8001a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2240      	movs	r2, #64	@ 0x40
 8001a60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2200      	movs	r2, #0
 8001a68:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001a6e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001a74:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	4a5b      	ldr	r2, [pc, #364]	@ (8001bf0 <HAL_I2C_Mem_Read+0x228>)
 8001a84:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001a86:	88f8      	ldrh	r0, [r7, #6]
 8001a88:	893a      	ldrh	r2, [r7, #8]
 8001a8a:	8979      	ldrh	r1, [r7, #10]
 8001a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a8e:	9301      	str	r3, [sp, #4]
 8001a90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a92:	9300      	str	r3, [sp, #0]
 8001a94:	4603      	mov	r3, r0
 8001a96:	68f8      	ldr	r0, [r7, #12]
 8001a98:	f000 f9c8 	bl	8001e2c <I2C_RequestMemoryRead>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e1bc      	b.n	8001e20 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d113      	bne.n	8001ad6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001aae:	2300      	movs	r3, #0
 8001ab0:	623b      	str	r3, [r7, #32]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	695b      	ldr	r3, [r3, #20]
 8001ab8:	623b      	str	r3, [r7, #32]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	623b      	str	r3, [r7, #32]
 8001ac2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	e190      	b.n	8001df8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d11b      	bne.n	8001b16 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001aec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001aee:	2300      	movs	r3, #0
 8001af0:	61fb      	str	r3, [r7, #28]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	695b      	ldr	r3, [r3, #20]
 8001af8:	61fb      	str	r3, [r7, #28]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	61fb      	str	r3, [r7, #28]
 8001b02:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	e170      	b.n	8001df8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d11b      	bne.n	8001b56 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b2c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001b3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61bb      	str	r3, [r7, #24]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	695b      	ldr	r3, [r3, #20]
 8001b48:	61bb      	str	r3, [r7, #24]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	61bb      	str	r3, [r7, #24]
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	e150      	b.n	8001df8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b56:	2300      	movs	r3, #0
 8001b58:	617b      	str	r3, [r7, #20]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	695b      	ldr	r3, [r3, #20]
 8001b60:	617b      	str	r3, [r7, #20]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	617b      	str	r3, [r7, #20]
 8001b6a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001b6c:	e144      	b.n	8001df8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b72:	2b03      	cmp	r3, #3
 8001b74:	f200 80f1 	bhi.w	8001d5a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d123      	bne.n	8001bc8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b82:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001b84:	68f8      	ldr	r0, [r7, #12]
 8001b86:	f000 fb9b 	bl	80022c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e145      	b.n	8001e20 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	691a      	ldr	r2, [r3, #16]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b9e:	b2d2      	uxtb	r2, r2
 8001ba0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ba6:	1c5a      	adds	r2, r3, #1
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bb0:	3b01      	subs	r3, #1
 8001bb2:	b29a      	uxth	r2, r3
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	b29a      	uxth	r2, r3
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001bc6:	e117      	b.n	8001df8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d14e      	bne.n	8001c6e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd2:	9300      	str	r3, [sp, #0]
 8001bd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	4906      	ldr	r1, [pc, #24]	@ (8001bf4 <HAL_I2C_Mem_Read+0x22c>)
 8001bda:	68f8      	ldr	r0, [r7, #12]
 8001bdc:	f000 fa0e 	bl	8001ffc <I2C_WaitOnFlagUntilTimeout>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d008      	beq.n	8001bf8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e11a      	b.n	8001e20 <HAL_I2C_Mem_Read+0x458>
 8001bea:	bf00      	nop
 8001bec:	00100002 	.word	0x00100002
 8001bf0:	ffff0000 	.word	0xffff0000
 8001bf4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	691a      	ldr	r2, [r3, #16]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c12:	b2d2      	uxtb	r2, r2
 8001c14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c1a:	1c5a      	adds	r2, r3, #1
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c24:	3b01      	subs	r3, #1
 8001c26:	b29a      	uxth	r2, r3
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	3b01      	subs	r3, #1
 8001c34:	b29a      	uxth	r2, r3
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	691a      	ldr	r2, [r3, #16]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c44:	b2d2      	uxtb	r2, r2
 8001c46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c4c:	1c5a      	adds	r2, r3, #1
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c56:	3b01      	subs	r3, #1
 8001c58:	b29a      	uxth	r2, r3
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	3b01      	subs	r3, #1
 8001c66:	b29a      	uxth	r2, r3
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001c6c:	e0c4      	b.n	8001df8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c70:	9300      	str	r3, [sp, #0]
 8001c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c74:	2200      	movs	r2, #0
 8001c76:	496c      	ldr	r1, [pc, #432]	@ (8001e28 <HAL_I2C_Mem_Read+0x460>)
 8001c78:	68f8      	ldr	r0, [r7, #12]
 8001c7a:	f000 f9bf 	bl	8001ffc <I2C_WaitOnFlagUntilTimeout>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e0cb      	b.n	8001e20 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	691a      	ldr	r2, [r3, #16]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca2:	b2d2      	uxtb	r2, r2
 8001ca4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001caa:	1c5a      	adds	r2, r3, #1
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	b29a      	uxth	r2, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	b29a      	uxth	r2, r3
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ccc:	9300      	str	r3, [sp, #0]
 8001cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	4955      	ldr	r1, [pc, #340]	@ (8001e28 <HAL_I2C_Mem_Read+0x460>)
 8001cd4:	68f8      	ldr	r0, [r7, #12]
 8001cd6:	f000 f991 	bl	8001ffc <I2C_WaitOnFlagUntilTimeout>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e09d      	b.n	8001e20 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001cf2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	691a      	ldr	r2, [r3, #16]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cfe:	b2d2      	uxtb	r2, r2
 8001d00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d06:	1c5a      	adds	r2, r3, #1
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d10:	3b01      	subs	r3, #1
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	691a      	ldr	r2, [r3, #16]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d30:	b2d2      	uxtb	r2, r2
 8001d32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d38:	1c5a      	adds	r2, r3, #1
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d42:	3b01      	subs	r3, #1
 8001d44:	b29a      	uxth	r2, r3
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	3b01      	subs	r3, #1
 8001d52:	b29a      	uxth	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001d58:	e04e      	b.n	8001df8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d5c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001d5e:	68f8      	ldr	r0, [r7, #12]
 8001d60:	f000 faae 	bl	80022c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e058      	b.n	8001e20 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	691a      	ldr	r2, [r3, #16]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d78:	b2d2      	uxtb	r2, r2
 8001d7a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d80:	1c5a      	adds	r2, r3, #1
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	b29a      	uxth	r2, r3
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	695b      	ldr	r3, [r3, #20]
 8001da6:	f003 0304 	and.w	r3, r3, #4
 8001daa:	2b04      	cmp	r3, #4
 8001dac:	d124      	bne.n	8001df8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001db2:	2b03      	cmp	r3, #3
 8001db4:	d107      	bne.n	8001dc6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001dc4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	691a      	ldr	r2, [r3, #16]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd0:	b2d2      	uxtb	r2, r2
 8001dd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd8:	1c5a      	adds	r2, r3, #1
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001de2:	3b01      	subs	r3, #1
 8001de4:	b29a      	uxth	r2, r3
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	3b01      	subs	r3, #1
 8001df2:	b29a      	uxth	r2, r3
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	f47f aeb6 	bne.w	8001b6e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2220      	movs	r2, #32
 8001e06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	e000      	b.n	8001e20 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001e1e:	2302      	movs	r3, #2
  }
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3728      	adds	r7, #40	@ 0x28
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	00010004 	.word	0x00010004

08001e2c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b088      	sub	sp, #32
 8001e30:	af02      	add	r7, sp, #8
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	4608      	mov	r0, r1
 8001e36:	4611      	mov	r1, r2
 8001e38:	461a      	mov	r2, r3
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	817b      	strh	r3, [r7, #10]
 8001e3e:	460b      	mov	r3, r1
 8001e40:	813b      	strh	r3, [r7, #8]
 8001e42:	4613      	mov	r3, r2
 8001e44:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001e54:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e64:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e68:	9300      	str	r3, [sp, #0]
 8001e6a:	6a3b      	ldr	r3, [r7, #32]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001e72:	68f8      	ldr	r0, [r7, #12]
 8001e74:	f000 f8c2 	bl	8001ffc <I2C_WaitOnFlagUntilTimeout>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d00d      	beq.n	8001e9a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e8c:	d103      	bne.n	8001e96 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e94:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e0aa      	b.n	8001ff0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e9a:	897b      	ldrh	r3, [r7, #10]
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001ea8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eac:	6a3a      	ldr	r2, [r7, #32]
 8001eae:	4952      	ldr	r1, [pc, #328]	@ (8001ff8 <I2C_RequestMemoryRead+0x1cc>)
 8001eb0:	68f8      	ldr	r0, [r7, #12]
 8001eb2:	f000 f91d 	bl	80020f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e097      	b.n	8001ff0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	617b      	str	r3, [r7, #20]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	695b      	ldr	r3, [r3, #20]
 8001eca:	617b      	str	r3, [r7, #20]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	699b      	ldr	r3, [r3, #24]
 8001ed2:	617b      	str	r3, [r7, #20]
 8001ed4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ed6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ed8:	6a39      	ldr	r1, [r7, #32]
 8001eda:	68f8      	ldr	r0, [r7, #12]
 8001edc:	f000 f9a8 	bl	8002230 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d00d      	beq.n	8001f02 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eea:	2b04      	cmp	r3, #4
 8001eec:	d107      	bne.n	8001efe <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001efc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e076      	b.n	8001ff0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001f02:	88fb      	ldrh	r3, [r7, #6]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d105      	bne.n	8001f14 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001f08:	893b      	ldrh	r3, [r7, #8]
 8001f0a:	b2da      	uxtb	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	611a      	str	r2, [r3, #16]
 8001f12:	e021      	b.n	8001f58 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001f14:	893b      	ldrh	r3, [r7, #8]
 8001f16:	0a1b      	lsrs	r3, r3, #8
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	b2da      	uxtb	r2, r3
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f24:	6a39      	ldr	r1, [r7, #32]
 8001f26:	68f8      	ldr	r0, [r7, #12]
 8001f28:	f000 f982 	bl	8002230 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d00d      	beq.n	8001f4e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f36:	2b04      	cmp	r3, #4
 8001f38:	d107      	bne.n	8001f4a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f48:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e050      	b.n	8001ff0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001f4e:	893b      	ldrh	r3, [r7, #8]
 8001f50:	b2da      	uxtb	r2, r3
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f5a:	6a39      	ldr	r1, [r7, #32]
 8001f5c:	68f8      	ldr	r0, [r7, #12]
 8001f5e:	f000 f967 	bl	8002230 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d00d      	beq.n	8001f84 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f6c:	2b04      	cmp	r3, #4
 8001f6e:	d107      	bne.n	8001f80 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f7e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e035      	b.n	8001ff0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f92:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f96:	9300      	str	r3, [sp, #0]
 8001f98:	6a3b      	ldr	r3, [r7, #32]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001fa0:	68f8      	ldr	r0, [r7, #12]
 8001fa2:	f000 f82b 	bl	8001ffc <I2C_WaitOnFlagUntilTimeout>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d00d      	beq.n	8001fc8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001fba:	d103      	bne.n	8001fc4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fc2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e013      	b.n	8001ff0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001fc8:	897b      	ldrh	r3, [r7, #10]
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	f043 0301 	orr.w	r3, r3, #1
 8001fd0:	b2da      	uxtb	r2, r3
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fda:	6a3a      	ldr	r2, [r7, #32]
 8001fdc:	4906      	ldr	r1, [pc, #24]	@ (8001ff8 <I2C_RequestMemoryRead+0x1cc>)
 8001fde:	68f8      	ldr	r0, [r7, #12]
 8001fe0:	f000 f886 	bl	80020f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e000      	b.n	8001ff0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3718      	adds	r7, #24
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	00010002 	.word	0x00010002

08001ffc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	603b      	str	r3, [r7, #0]
 8002008:	4613      	mov	r3, r2
 800200a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800200c:	e048      	b.n	80020a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002014:	d044      	beq.n	80020a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002016:	f7ff f8e9 	bl	80011ec <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	429a      	cmp	r2, r3
 8002024:	d302      	bcc.n	800202c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d139      	bne.n	80020a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	0c1b      	lsrs	r3, r3, #16
 8002030:	b2db      	uxtb	r3, r3
 8002032:	2b01      	cmp	r3, #1
 8002034:	d10d      	bne.n	8002052 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	695b      	ldr	r3, [r3, #20]
 800203c:	43da      	mvns	r2, r3
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	4013      	ands	r3, r2
 8002042:	b29b      	uxth	r3, r3
 8002044:	2b00      	cmp	r3, #0
 8002046:	bf0c      	ite	eq
 8002048:	2301      	moveq	r3, #1
 800204a:	2300      	movne	r3, #0
 800204c:	b2db      	uxtb	r3, r3
 800204e:	461a      	mov	r2, r3
 8002050:	e00c      	b.n	800206c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	43da      	mvns	r2, r3
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	4013      	ands	r3, r2
 800205e:	b29b      	uxth	r3, r3
 8002060:	2b00      	cmp	r3, #0
 8002062:	bf0c      	ite	eq
 8002064:	2301      	moveq	r3, #1
 8002066:	2300      	movne	r3, #0
 8002068:	b2db      	uxtb	r3, r3
 800206a:	461a      	mov	r2, r3
 800206c:	79fb      	ldrb	r3, [r7, #7]
 800206e:	429a      	cmp	r2, r3
 8002070:	d116      	bne.n	80020a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2200      	movs	r2, #0
 8002076:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2220      	movs	r2, #32
 800207c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208c:	f043 0220 	orr.w	r2, r3, #32
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2200      	movs	r2, #0
 8002098:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e023      	b.n	80020e8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	0c1b      	lsrs	r3, r3, #16
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d10d      	bne.n	80020c6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	695b      	ldr	r3, [r3, #20]
 80020b0:	43da      	mvns	r2, r3
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	4013      	ands	r3, r2
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	bf0c      	ite	eq
 80020bc:	2301      	moveq	r3, #1
 80020be:	2300      	movne	r3, #0
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	461a      	mov	r2, r3
 80020c4:	e00c      	b.n	80020e0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	43da      	mvns	r2, r3
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	4013      	ands	r3, r2
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	bf0c      	ite	eq
 80020d8:	2301      	moveq	r3, #1
 80020da:	2300      	movne	r3, #0
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	461a      	mov	r2, r3
 80020e0:	79fb      	ldrb	r3, [r7, #7]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d093      	beq.n	800200e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80020e6:	2300      	movs	r3, #0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3710      	adds	r7, #16
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	607a      	str	r2, [r7, #4]
 80020fc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80020fe:	e071      	b.n	80021e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	695b      	ldr	r3, [r3, #20]
 8002106:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800210a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800210e:	d123      	bne.n	8002158 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800211e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002128:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2200      	movs	r2, #0
 800212e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2220      	movs	r2, #32
 8002134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2200      	movs	r2, #0
 800213c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002144:	f043 0204 	orr.w	r2, r3, #4
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e067      	b.n	8002228 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800215e:	d041      	beq.n	80021e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002160:	f7ff f844 	bl	80011ec <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	429a      	cmp	r2, r3
 800216e:	d302      	bcc.n	8002176 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d136      	bne.n	80021e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	0c1b      	lsrs	r3, r3, #16
 800217a:	b2db      	uxtb	r3, r3
 800217c:	2b01      	cmp	r3, #1
 800217e:	d10c      	bne.n	800219a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	695b      	ldr	r3, [r3, #20]
 8002186:	43da      	mvns	r2, r3
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	4013      	ands	r3, r2
 800218c:	b29b      	uxth	r3, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	bf14      	ite	ne
 8002192:	2301      	movne	r3, #1
 8002194:	2300      	moveq	r3, #0
 8002196:	b2db      	uxtb	r3, r3
 8002198:	e00b      	b.n	80021b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	43da      	mvns	r2, r3
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	4013      	ands	r3, r2
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	bf14      	ite	ne
 80021ac:	2301      	movne	r3, #1
 80021ae:	2300      	moveq	r3, #0
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d016      	beq.n	80021e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2200      	movs	r2, #0
 80021ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2220      	movs	r2, #32
 80021c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d0:	f043 0220 	orr.w	r2, r3, #32
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e021      	b.n	8002228 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	0c1b      	lsrs	r3, r3, #16
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d10c      	bne.n	8002208 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	695b      	ldr	r3, [r3, #20]
 80021f4:	43da      	mvns	r2, r3
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	4013      	ands	r3, r2
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	bf14      	ite	ne
 8002200:	2301      	movne	r3, #1
 8002202:	2300      	moveq	r3, #0
 8002204:	b2db      	uxtb	r3, r3
 8002206:	e00b      	b.n	8002220 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	43da      	mvns	r2, r3
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	4013      	ands	r3, r2
 8002214:	b29b      	uxth	r3, r3
 8002216:	2b00      	cmp	r3, #0
 8002218:	bf14      	ite	ne
 800221a:	2301      	movne	r3, #1
 800221c:	2300      	moveq	r3, #0
 800221e:	b2db      	uxtb	r3, r3
 8002220:	2b00      	cmp	r3, #0
 8002222:	f47f af6d 	bne.w	8002100 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002226:	2300      	movs	r3, #0
}
 8002228:	4618      	mov	r0, r3
 800222a:	3710      	adds	r7, #16
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800223c:	e034      	b.n	80022a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800223e:	68f8      	ldr	r0, [r7, #12]
 8002240:	f000 f89b 	bl	800237a <I2C_IsAcknowledgeFailed>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e034      	b.n	80022b8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002254:	d028      	beq.n	80022a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002256:	f7fe ffc9 	bl	80011ec <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	68ba      	ldr	r2, [r7, #8]
 8002262:	429a      	cmp	r2, r3
 8002264:	d302      	bcc.n	800226c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d11d      	bne.n	80022a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002276:	2b80      	cmp	r3, #128	@ 0x80
 8002278:	d016      	beq.n	80022a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2200      	movs	r2, #0
 800227e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2220      	movs	r2, #32
 8002284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002294:	f043 0220 	orr.w	r2, r3, #32
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e007      	b.n	80022b8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	695b      	ldr	r3, [r3, #20]
 80022ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022b2:	2b80      	cmp	r3, #128	@ 0x80
 80022b4:	d1c3      	bne.n	800223e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3710      	adds	r7, #16
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80022cc:	e049      	b.n	8002362 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	695b      	ldr	r3, [r3, #20]
 80022d4:	f003 0310 	and.w	r3, r3, #16
 80022d8:	2b10      	cmp	r3, #16
 80022da:	d119      	bne.n	8002310 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f06f 0210 	mvn.w	r2, #16
 80022e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2200      	movs	r2, #0
 80022ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2220      	movs	r2, #32
 80022f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e030      	b.n	8002372 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002310:	f7fe ff6c 	bl	80011ec <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	68ba      	ldr	r2, [r7, #8]
 800231c:	429a      	cmp	r2, r3
 800231e:	d302      	bcc.n	8002326 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d11d      	bne.n	8002362 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	695b      	ldr	r3, [r3, #20]
 800232c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002330:	2b40      	cmp	r3, #64	@ 0x40
 8002332:	d016      	beq.n	8002362 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2200      	movs	r2, #0
 8002338:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2220      	movs	r2, #32
 800233e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234e:	f043 0220 	orr.w	r2, r3, #32
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2200      	movs	r2, #0
 800235a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e007      	b.n	8002372 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	695b      	ldr	r3, [r3, #20]
 8002368:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800236c:	2b40      	cmp	r3, #64	@ 0x40
 800236e:	d1ae      	bne.n	80022ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3710      	adds	r7, #16
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800237a:	b480      	push	{r7}
 800237c:	b083      	sub	sp, #12
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	695b      	ldr	r3, [r3, #20]
 8002388:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800238c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002390:	d11b      	bne.n	80023ca <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800239a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2220      	movs	r2, #32
 80023a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b6:	f043 0204 	orr.w	r2, r3, #4
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e000      	b.n	80023cc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80023ca:	2300      	movs	r3, #0
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d101      	bne.n	80023ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e0cc      	b.n	8002586 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023ec:	4b68      	ldr	r3, [pc, #416]	@ (8002590 <HAL_RCC_ClockConfig+0x1b8>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 030f 	and.w	r3, r3, #15
 80023f4:	683a      	ldr	r2, [r7, #0]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d90c      	bls.n	8002414 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023fa:	4b65      	ldr	r3, [pc, #404]	@ (8002590 <HAL_RCC_ClockConfig+0x1b8>)
 80023fc:	683a      	ldr	r2, [r7, #0]
 80023fe:	b2d2      	uxtb	r2, r2
 8002400:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002402:	4b63      	ldr	r3, [pc, #396]	@ (8002590 <HAL_RCC_ClockConfig+0x1b8>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 030f 	and.w	r3, r3, #15
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	429a      	cmp	r2, r3
 800240e:	d001      	beq.n	8002414 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e0b8      	b.n	8002586 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0302 	and.w	r3, r3, #2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d020      	beq.n	8002462 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0304 	and.w	r3, r3, #4
 8002428:	2b00      	cmp	r3, #0
 800242a:	d005      	beq.n	8002438 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800242c:	4b59      	ldr	r3, [pc, #356]	@ (8002594 <HAL_RCC_ClockConfig+0x1bc>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	4a58      	ldr	r2, [pc, #352]	@ (8002594 <HAL_RCC_ClockConfig+0x1bc>)
 8002432:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002436:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0308 	and.w	r3, r3, #8
 8002440:	2b00      	cmp	r3, #0
 8002442:	d005      	beq.n	8002450 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002444:	4b53      	ldr	r3, [pc, #332]	@ (8002594 <HAL_RCC_ClockConfig+0x1bc>)
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	4a52      	ldr	r2, [pc, #328]	@ (8002594 <HAL_RCC_ClockConfig+0x1bc>)
 800244a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800244e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002450:	4b50      	ldr	r3, [pc, #320]	@ (8002594 <HAL_RCC_ClockConfig+0x1bc>)
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	494d      	ldr	r1, [pc, #308]	@ (8002594 <HAL_RCC_ClockConfig+0x1bc>)
 800245e:	4313      	orrs	r3, r2
 8002460:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	2b00      	cmp	r3, #0
 800246c:	d044      	beq.n	80024f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d107      	bne.n	8002486 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002476:	4b47      	ldr	r3, [pc, #284]	@ (8002594 <HAL_RCC_ClockConfig+0x1bc>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d119      	bne.n	80024b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e07f      	b.n	8002586 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2b02      	cmp	r3, #2
 800248c:	d003      	beq.n	8002496 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002492:	2b03      	cmp	r3, #3
 8002494:	d107      	bne.n	80024a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002496:	4b3f      	ldr	r3, [pc, #252]	@ (8002594 <HAL_RCC_ClockConfig+0x1bc>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d109      	bne.n	80024b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e06f      	b.n	8002586 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024a6:	4b3b      	ldr	r3, [pc, #236]	@ (8002594 <HAL_RCC_ClockConfig+0x1bc>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e067      	b.n	8002586 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024b6:	4b37      	ldr	r3, [pc, #220]	@ (8002594 <HAL_RCC_ClockConfig+0x1bc>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f023 0203 	bic.w	r2, r3, #3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	4934      	ldr	r1, [pc, #208]	@ (8002594 <HAL_RCC_ClockConfig+0x1bc>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024c8:	f7fe fe90 	bl	80011ec <HAL_GetTick>
 80024cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ce:	e00a      	b.n	80024e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024d0:	f7fe fe8c 	bl	80011ec <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024de:	4293      	cmp	r3, r2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e04f      	b.n	8002586 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024e6:	4b2b      	ldr	r3, [pc, #172]	@ (8002594 <HAL_RCC_ClockConfig+0x1bc>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f003 020c 	and.w	r2, r3, #12
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d1eb      	bne.n	80024d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024f8:	4b25      	ldr	r3, [pc, #148]	@ (8002590 <HAL_RCC_ClockConfig+0x1b8>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 030f 	and.w	r3, r3, #15
 8002500:	683a      	ldr	r2, [r7, #0]
 8002502:	429a      	cmp	r2, r3
 8002504:	d20c      	bcs.n	8002520 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002506:	4b22      	ldr	r3, [pc, #136]	@ (8002590 <HAL_RCC_ClockConfig+0x1b8>)
 8002508:	683a      	ldr	r2, [r7, #0]
 800250a:	b2d2      	uxtb	r2, r2
 800250c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800250e:	4b20      	ldr	r3, [pc, #128]	@ (8002590 <HAL_RCC_ClockConfig+0x1b8>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 030f 	and.w	r3, r3, #15
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	429a      	cmp	r2, r3
 800251a:	d001      	beq.n	8002520 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e032      	b.n	8002586 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0304 	and.w	r3, r3, #4
 8002528:	2b00      	cmp	r3, #0
 800252a:	d008      	beq.n	800253e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800252c:	4b19      	ldr	r3, [pc, #100]	@ (8002594 <HAL_RCC_ClockConfig+0x1bc>)
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	4916      	ldr	r1, [pc, #88]	@ (8002594 <HAL_RCC_ClockConfig+0x1bc>)
 800253a:	4313      	orrs	r3, r2
 800253c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0308 	and.w	r3, r3, #8
 8002546:	2b00      	cmp	r3, #0
 8002548:	d009      	beq.n	800255e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800254a:	4b12      	ldr	r3, [pc, #72]	@ (8002594 <HAL_RCC_ClockConfig+0x1bc>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	490e      	ldr	r1, [pc, #56]	@ (8002594 <HAL_RCC_ClockConfig+0x1bc>)
 800255a:	4313      	orrs	r3, r2
 800255c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800255e:	f000 f841 	bl	80025e4 <HAL_RCC_GetSysClockFreq>
 8002562:	4602      	mov	r2, r0
 8002564:	4b0b      	ldr	r3, [pc, #44]	@ (8002594 <HAL_RCC_ClockConfig+0x1bc>)
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	091b      	lsrs	r3, r3, #4
 800256a:	f003 030f 	and.w	r3, r3, #15
 800256e:	490a      	ldr	r1, [pc, #40]	@ (8002598 <HAL_RCC_ClockConfig+0x1c0>)
 8002570:	5ccb      	ldrb	r3, [r1, r3]
 8002572:	fa22 f303 	lsr.w	r3, r2, r3
 8002576:	4a09      	ldr	r2, [pc, #36]	@ (800259c <HAL_RCC_ClockConfig+0x1c4>)
 8002578:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800257a:	4b09      	ldr	r3, [pc, #36]	@ (80025a0 <HAL_RCC_ClockConfig+0x1c8>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4618      	mov	r0, r3
 8002580:	f7fe fdf0 	bl	8001164 <HAL_InitTick>

  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	40023c00 	.word	0x40023c00
 8002594:	40023800 	.word	0x40023800
 8002598:	08004768 	.word	0x08004768
 800259c:	20000000 	.word	0x20000000
 80025a0:	20000004 	.word	0x20000004

080025a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025a8:	4b03      	ldr	r3, [pc, #12]	@ (80025b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80025aa:	681b      	ldr	r3, [r3, #0]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	20000000 	.word	0x20000000

080025bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025c0:	f7ff fff0 	bl	80025a4 <HAL_RCC_GetHCLKFreq>
 80025c4:	4602      	mov	r2, r0
 80025c6:	4b05      	ldr	r3, [pc, #20]	@ (80025dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	0a9b      	lsrs	r3, r3, #10
 80025cc:	f003 0307 	and.w	r3, r3, #7
 80025d0:	4903      	ldr	r1, [pc, #12]	@ (80025e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025d2:	5ccb      	ldrb	r3, [r1, r3]
 80025d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025d8:	4618      	mov	r0, r3
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	40023800 	.word	0x40023800
 80025e0:	08004778 	.word	0x08004778

080025e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025e8:	b0a6      	sub	sp, #152	@ 0x98
 80025ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80025ec:	2300      	movs	r3, #0
 80025ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 80025f2:	2300      	movs	r3, #0
 80025f4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80025f8:	2300      	movs	r3, #0
 80025fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80025fe:	2300      	movs	r3, #0
 8002600:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8002604:	2300      	movs	r3, #0
 8002606:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800260a:	4bc8      	ldr	r3, [pc, #800]	@ (800292c <HAL_RCC_GetSysClockFreq+0x348>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f003 030c 	and.w	r3, r3, #12
 8002612:	2b0c      	cmp	r3, #12
 8002614:	f200 817e 	bhi.w	8002914 <HAL_RCC_GetSysClockFreq+0x330>
 8002618:	a201      	add	r2, pc, #4	@ (adr r2, 8002620 <HAL_RCC_GetSysClockFreq+0x3c>)
 800261a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800261e:	bf00      	nop
 8002620:	08002655 	.word	0x08002655
 8002624:	08002915 	.word	0x08002915
 8002628:	08002915 	.word	0x08002915
 800262c:	08002915 	.word	0x08002915
 8002630:	0800265d 	.word	0x0800265d
 8002634:	08002915 	.word	0x08002915
 8002638:	08002915 	.word	0x08002915
 800263c:	08002915 	.word	0x08002915
 8002640:	08002665 	.word	0x08002665
 8002644:	08002915 	.word	0x08002915
 8002648:	08002915 	.word	0x08002915
 800264c:	08002915 	.word	0x08002915
 8002650:	080027cf 	.word	0x080027cf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002654:	4bb6      	ldr	r3, [pc, #728]	@ (8002930 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002656:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800265a:	e15f      	b.n	800291c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800265c:	4bb5      	ldr	r3, [pc, #724]	@ (8002934 <HAL_RCC_GetSysClockFreq+0x350>)
 800265e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002662:	e15b      	b.n	800291c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002664:	4bb1      	ldr	r3, [pc, #708]	@ (800292c <HAL_RCC_GetSysClockFreq+0x348>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800266c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002670:	4bae      	ldr	r3, [pc, #696]	@ (800292c <HAL_RCC_GetSysClockFreq+0x348>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d031      	beq.n	80026e0 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800267c:	4bab      	ldr	r3, [pc, #684]	@ (800292c <HAL_RCC_GetSysClockFreq+0x348>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	099b      	lsrs	r3, r3, #6
 8002682:	2200      	movs	r2, #0
 8002684:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002686:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002688:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800268a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800268e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002690:	2300      	movs	r3, #0
 8002692:	667b      	str	r3, [r7, #100]	@ 0x64
 8002694:	4ba7      	ldr	r3, [pc, #668]	@ (8002934 <HAL_RCC_GetSysClockFreq+0x350>)
 8002696:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800269a:	462a      	mov	r2, r5
 800269c:	fb03 f202 	mul.w	r2, r3, r2
 80026a0:	2300      	movs	r3, #0
 80026a2:	4621      	mov	r1, r4
 80026a4:	fb01 f303 	mul.w	r3, r1, r3
 80026a8:	4413      	add	r3, r2
 80026aa:	4aa2      	ldr	r2, [pc, #648]	@ (8002934 <HAL_RCC_GetSysClockFreq+0x350>)
 80026ac:	4621      	mov	r1, r4
 80026ae:	fba1 1202 	umull	r1, r2, r1, r2
 80026b2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80026b4:	460a      	mov	r2, r1
 80026b6:	67ba      	str	r2, [r7, #120]	@ 0x78
 80026b8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80026ba:	4413      	add	r3, r2
 80026bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80026be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026c2:	2200      	movs	r2, #0
 80026c4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80026c6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80026c8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80026cc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80026d0:	f7fd fdee 	bl	80002b0 <__aeabi_uldivmod>
 80026d4:	4602      	mov	r2, r0
 80026d6:	460b      	mov	r3, r1
 80026d8:	4613      	mov	r3, r2
 80026da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80026de:	e064      	b.n	80027aa <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026e0:	4b92      	ldr	r3, [pc, #584]	@ (800292c <HAL_RCC_GetSysClockFreq+0x348>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	099b      	lsrs	r3, r3, #6
 80026e6:	2200      	movs	r2, #0
 80026e8:	653b      	str	r3, [r7, #80]	@ 0x50
 80026ea:	657a      	str	r2, [r7, #84]	@ 0x54
 80026ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80026ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80026f4:	2300      	movs	r3, #0
 80026f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80026f8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80026fc:	4622      	mov	r2, r4
 80026fe:	462b      	mov	r3, r5
 8002700:	f04f 0000 	mov.w	r0, #0
 8002704:	f04f 0100 	mov.w	r1, #0
 8002708:	0159      	lsls	r1, r3, #5
 800270a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800270e:	0150      	lsls	r0, r2, #5
 8002710:	4602      	mov	r2, r0
 8002712:	460b      	mov	r3, r1
 8002714:	4621      	mov	r1, r4
 8002716:	1a51      	subs	r1, r2, r1
 8002718:	6139      	str	r1, [r7, #16]
 800271a:	4629      	mov	r1, r5
 800271c:	eb63 0301 	sbc.w	r3, r3, r1
 8002720:	617b      	str	r3, [r7, #20]
 8002722:	f04f 0200 	mov.w	r2, #0
 8002726:	f04f 0300 	mov.w	r3, #0
 800272a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800272e:	4659      	mov	r1, fp
 8002730:	018b      	lsls	r3, r1, #6
 8002732:	4651      	mov	r1, sl
 8002734:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002738:	4651      	mov	r1, sl
 800273a:	018a      	lsls	r2, r1, #6
 800273c:	4651      	mov	r1, sl
 800273e:	ebb2 0801 	subs.w	r8, r2, r1
 8002742:	4659      	mov	r1, fp
 8002744:	eb63 0901 	sbc.w	r9, r3, r1
 8002748:	f04f 0200 	mov.w	r2, #0
 800274c:	f04f 0300 	mov.w	r3, #0
 8002750:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002754:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002758:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800275c:	4690      	mov	r8, r2
 800275e:	4699      	mov	r9, r3
 8002760:	4623      	mov	r3, r4
 8002762:	eb18 0303 	adds.w	r3, r8, r3
 8002766:	60bb      	str	r3, [r7, #8]
 8002768:	462b      	mov	r3, r5
 800276a:	eb49 0303 	adc.w	r3, r9, r3
 800276e:	60fb      	str	r3, [r7, #12]
 8002770:	f04f 0200 	mov.w	r2, #0
 8002774:	f04f 0300 	mov.w	r3, #0
 8002778:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800277c:	4629      	mov	r1, r5
 800277e:	028b      	lsls	r3, r1, #10
 8002780:	4621      	mov	r1, r4
 8002782:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002786:	4621      	mov	r1, r4
 8002788:	028a      	lsls	r2, r1, #10
 800278a:	4610      	mov	r0, r2
 800278c:	4619      	mov	r1, r3
 800278e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002792:	2200      	movs	r2, #0
 8002794:	643b      	str	r3, [r7, #64]	@ 0x40
 8002796:	647a      	str	r2, [r7, #68]	@ 0x44
 8002798:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800279c:	f7fd fd88 	bl	80002b0 <__aeabi_uldivmod>
 80027a0:	4602      	mov	r2, r0
 80027a2:	460b      	mov	r3, r1
 80027a4:	4613      	mov	r3, r2
 80027a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80027aa:	4b60      	ldr	r3, [pc, #384]	@ (800292c <HAL_RCC_GetSysClockFreq+0x348>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	0c1b      	lsrs	r3, r3, #16
 80027b0:	f003 0303 	and.w	r3, r3, #3
 80027b4:	3301      	adds	r3, #1
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 80027bc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80027c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80027c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80027cc:	e0a6      	b.n	800291c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027ce:	4b57      	ldr	r3, [pc, #348]	@ (800292c <HAL_RCC_GetSysClockFreq+0x348>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80027d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027da:	4b54      	ldr	r3, [pc, #336]	@ (800292c <HAL_RCC_GetSysClockFreq+0x348>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d02a      	beq.n	800283c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027e6:	4b51      	ldr	r3, [pc, #324]	@ (800292c <HAL_RCC_GetSysClockFreq+0x348>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	099b      	lsrs	r3, r3, #6
 80027ec:	2200      	movs	r2, #0
 80027ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80027f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80027f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027f4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80027f8:	2100      	movs	r1, #0
 80027fa:	4b4e      	ldr	r3, [pc, #312]	@ (8002934 <HAL_RCC_GetSysClockFreq+0x350>)
 80027fc:	fb03 f201 	mul.w	r2, r3, r1
 8002800:	2300      	movs	r3, #0
 8002802:	fb00 f303 	mul.w	r3, r0, r3
 8002806:	4413      	add	r3, r2
 8002808:	4a4a      	ldr	r2, [pc, #296]	@ (8002934 <HAL_RCC_GetSysClockFreq+0x350>)
 800280a:	fba0 1202 	umull	r1, r2, r0, r2
 800280e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002810:	460a      	mov	r2, r1
 8002812:	673a      	str	r2, [r7, #112]	@ 0x70
 8002814:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002816:	4413      	add	r3, r2
 8002818:	677b      	str	r3, [r7, #116]	@ 0x74
 800281a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800281e:	2200      	movs	r2, #0
 8002820:	633b      	str	r3, [r7, #48]	@ 0x30
 8002822:	637a      	str	r2, [r7, #52]	@ 0x34
 8002824:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002828:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800282c:	f7fd fd40 	bl	80002b0 <__aeabi_uldivmod>
 8002830:	4602      	mov	r2, r0
 8002832:	460b      	mov	r3, r1
 8002834:	4613      	mov	r3, r2
 8002836:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800283a:	e05b      	b.n	80028f4 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800283c:	4b3b      	ldr	r3, [pc, #236]	@ (800292c <HAL_RCC_GetSysClockFreq+0x348>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	099b      	lsrs	r3, r3, #6
 8002842:	2200      	movs	r2, #0
 8002844:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002846:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800284a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800284e:	623b      	str	r3, [r7, #32]
 8002850:	2300      	movs	r3, #0
 8002852:	627b      	str	r3, [r7, #36]	@ 0x24
 8002854:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002858:	4642      	mov	r2, r8
 800285a:	464b      	mov	r3, r9
 800285c:	f04f 0000 	mov.w	r0, #0
 8002860:	f04f 0100 	mov.w	r1, #0
 8002864:	0159      	lsls	r1, r3, #5
 8002866:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800286a:	0150      	lsls	r0, r2, #5
 800286c:	4602      	mov	r2, r0
 800286e:	460b      	mov	r3, r1
 8002870:	4641      	mov	r1, r8
 8002872:	ebb2 0a01 	subs.w	sl, r2, r1
 8002876:	4649      	mov	r1, r9
 8002878:	eb63 0b01 	sbc.w	fp, r3, r1
 800287c:	f04f 0200 	mov.w	r2, #0
 8002880:	f04f 0300 	mov.w	r3, #0
 8002884:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002888:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800288c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002890:	ebb2 040a 	subs.w	r4, r2, sl
 8002894:	eb63 050b 	sbc.w	r5, r3, fp
 8002898:	f04f 0200 	mov.w	r2, #0
 800289c:	f04f 0300 	mov.w	r3, #0
 80028a0:	00eb      	lsls	r3, r5, #3
 80028a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028a6:	00e2      	lsls	r2, r4, #3
 80028a8:	4614      	mov	r4, r2
 80028aa:	461d      	mov	r5, r3
 80028ac:	4643      	mov	r3, r8
 80028ae:	18e3      	adds	r3, r4, r3
 80028b0:	603b      	str	r3, [r7, #0]
 80028b2:	464b      	mov	r3, r9
 80028b4:	eb45 0303 	adc.w	r3, r5, r3
 80028b8:	607b      	str	r3, [r7, #4]
 80028ba:	f04f 0200 	mov.w	r2, #0
 80028be:	f04f 0300 	mov.w	r3, #0
 80028c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028c6:	4629      	mov	r1, r5
 80028c8:	028b      	lsls	r3, r1, #10
 80028ca:	4621      	mov	r1, r4
 80028cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028d0:	4621      	mov	r1, r4
 80028d2:	028a      	lsls	r2, r1, #10
 80028d4:	4610      	mov	r0, r2
 80028d6:	4619      	mov	r1, r3
 80028d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028dc:	2200      	movs	r2, #0
 80028de:	61bb      	str	r3, [r7, #24]
 80028e0:	61fa      	str	r2, [r7, #28]
 80028e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028e6:	f7fd fce3 	bl	80002b0 <__aeabi_uldivmod>
 80028ea:	4602      	mov	r2, r0
 80028ec:	460b      	mov	r3, r1
 80028ee:	4613      	mov	r3, r2
 80028f0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80028f4:	4b0d      	ldr	r3, [pc, #52]	@ (800292c <HAL_RCC_GetSysClockFreq+0x348>)
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	0f1b      	lsrs	r3, r3, #28
 80028fa:	f003 0307 	and.w	r3, r3, #7
 80028fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8002902:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002906:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800290a:	fbb2 f3f3 	udiv	r3, r2, r3
 800290e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002912:	e003      	b.n	800291c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002914:	4b06      	ldr	r3, [pc, #24]	@ (8002930 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002916:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800291a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800291c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8002920:	4618      	mov	r0, r3
 8002922:	3798      	adds	r7, #152	@ 0x98
 8002924:	46bd      	mov	sp, r7
 8002926:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800292a:	bf00      	nop
 800292c:	40023800 	.word	0x40023800
 8002930:	00f42400 	.word	0x00f42400
 8002934:	017d7840 	.word	0x017d7840

08002938 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b086      	sub	sp, #24
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e28d      	b.n	8002e66 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	2b00      	cmp	r3, #0
 8002954:	f000 8083 	beq.w	8002a5e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002958:	4b94      	ldr	r3, [pc, #592]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f003 030c 	and.w	r3, r3, #12
 8002960:	2b04      	cmp	r3, #4
 8002962:	d019      	beq.n	8002998 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002964:	4b91      	ldr	r3, [pc, #580]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f003 030c 	and.w	r3, r3, #12
        || \
 800296c:	2b08      	cmp	r3, #8
 800296e:	d106      	bne.n	800297e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002970:	4b8e      	ldr	r3, [pc, #568]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002978:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800297c:	d00c      	beq.n	8002998 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800297e:	4b8b      	ldr	r3, [pc, #556]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002986:	2b0c      	cmp	r3, #12
 8002988:	d112      	bne.n	80029b0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800298a:	4b88      	ldr	r3, [pc, #544]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002992:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002996:	d10b      	bne.n	80029b0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002998:	4b84      	ldr	r3, [pc, #528]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d05b      	beq.n	8002a5c <HAL_RCC_OscConfig+0x124>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d157      	bne.n	8002a5c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e25a      	b.n	8002e66 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029b8:	d106      	bne.n	80029c8 <HAL_RCC_OscConfig+0x90>
 80029ba:	4b7c      	ldr	r3, [pc, #496]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a7b      	ldr	r2, [pc, #492]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 80029c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029c4:	6013      	str	r3, [r2, #0]
 80029c6:	e01d      	b.n	8002a04 <HAL_RCC_OscConfig+0xcc>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029d0:	d10c      	bne.n	80029ec <HAL_RCC_OscConfig+0xb4>
 80029d2:	4b76      	ldr	r3, [pc, #472]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a75      	ldr	r2, [pc, #468]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 80029d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029dc:	6013      	str	r3, [r2, #0]
 80029de:	4b73      	ldr	r3, [pc, #460]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a72      	ldr	r2, [pc, #456]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 80029e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029e8:	6013      	str	r3, [r2, #0]
 80029ea:	e00b      	b.n	8002a04 <HAL_RCC_OscConfig+0xcc>
 80029ec:	4b6f      	ldr	r3, [pc, #444]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a6e      	ldr	r2, [pc, #440]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 80029f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029f6:	6013      	str	r3, [r2, #0]
 80029f8:	4b6c      	ldr	r3, [pc, #432]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a6b      	ldr	r2, [pc, #428]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 80029fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d013      	beq.n	8002a34 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0c:	f7fe fbee 	bl	80011ec <HAL_GetTick>
 8002a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a12:	e008      	b.n	8002a26 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a14:	f7fe fbea 	bl	80011ec <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b64      	cmp	r3, #100	@ 0x64
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e21f      	b.n	8002e66 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a26:	4b61      	ldr	r3, [pc, #388]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d0f0      	beq.n	8002a14 <HAL_RCC_OscConfig+0xdc>
 8002a32:	e014      	b.n	8002a5e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a34:	f7fe fbda 	bl	80011ec <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a3c:	f7fe fbd6 	bl	80011ec <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b64      	cmp	r3, #100	@ 0x64
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e20b      	b.n	8002e66 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a4e:	4b57      	ldr	r3, [pc, #348]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1f0      	bne.n	8002a3c <HAL_RCC_OscConfig+0x104>
 8002a5a:	e000      	b.n	8002a5e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d06f      	beq.n	8002b4a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002a6a:	4b50      	ldr	r3, [pc, #320]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f003 030c 	and.w	r3, r3, #12
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d017      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002a76:	4b4d      	ldr	r3, [pc, #308]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f003 030c 	and.w	r3, r3, #12
        || \
 8002a7e:	2b08      	cmp	r3, #8
 8002a80:	d105      	bne.n	8002a8e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002a82:	4b4a      	ldr	r3, [pc, #296]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00b      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a8e:	4b47      	ldr	r3, [pc, #284]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002a96:	2b0c      	cmp	r3, #12
 8002a98:	d11c      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a9a:	4b44      	ldr	r3, [pc, #272]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d116      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aa6:	4b41      	ldr	r3, [pc, #260]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d005      	beq.n	8002abe <HAL_RCC_OscConfig+0x186>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d001      	beq.n	8002abe <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e1d3      	b.n	8002e66 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002abe:	4b3b      	ldr	r3, [pc, #236]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	4937      	ldr	r1, [pc, #220]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ad2:	e03a      	b.n	8002b4a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d020      	beq.n	8002b1e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002adc:	4b34      	ldr	r3, [pc, #208]	@ (8002bb0 <HAL_RCC_OscConfig+0x278>)
 8002ade:	2201      	movs	r2, #1
 8002ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae2:	f7fe fb83 	bl	80011ec <HAL_GetTick>
 8002ae6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ae8:	e008      	b.n	8002afc <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aea:	f7fe fb7f 	bl	80011ec <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e1b4      	b.n	8002e66 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002afc:	4b2b      	ldr	r3, [pc, #172]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d0f0      	beq.n	8002aea <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b08:	4b28      	ldr	r3, [pc, #160]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	691b      	ldr	r3, [r3, #16]
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	4925      	ldr	r1, [pc, #148]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	600b      	str	r3, [r1, #0]
 8002b1c:	e015      	b.n	8002b4a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b1e:	4b24      	ldr	r3, [pc, #144]	@ (8002bb0 <HAL_RCC_OscConfig+0x278>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b24:	f7fe fb62 	bl	80011ec <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b2c:	f7fe fb5e 	bl	80011ec <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e193      	b.n	8002e66 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b3e:	4b1b      	ldr	r3, [pc, #108]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1f0      	bne.n	8002b2c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0308 	and.w	r3, r3, #8
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d036      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d016      	beq.n	8002b8c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b5e:	4b15      	ldr	r3, [pc, #84]	@ (8002bb4 <HAL_RCC_OscConfig+0x27c>)
 8002b60:	2201      	movs	r2, #1
 8002b62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b64:	f7fe fb42 	bl	80011ec <HAL_GetTick>
 8002b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b6a:	e008      	b.n	8002b7e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b6c:	f7fe fb3e 	bl	80011ec <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e173      	b.n	8002e66 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8002bac <HAL_RCC_OscConfig+0x274>)
 8002b80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d0f0      	beq.n	8002b6c <HAL_RCC_OscConfig+0x234>
 8002b8a:	e01b      	b.n	8002bc4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b8c:	4b09      	ldr	r3, [pc, #36]	@ (8002bb4 <HAL_RCC_OscConfig+0x27c>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b92:	f7fe fb2b 	bl	80011ec <HAL_GetTick>
 8002b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b98:	e00e      	b.n	8002bb8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b9a:	f7fe fb27 	bl	80011ec <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d907      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e15c      	b.n	8002e66 <HAL_RCC_OscConfig+0x52e>
 8002bac:	40023800 	.word	0x40023800
 8002bb0:	42470000 	.word	0x42470000
 8002bb4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bb8:	4b8a      	ldr	r3, [pc, #552]	@ (8002de4 <HAL_RCC_OscConfig+0x4ac>)
 8002bba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d1ea      	bne.n	8002b9a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0304 	and.w	r3, r3, #4
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	f000 8097 	beq.w	8002d00 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bd6:	4b83      	ldr	r3, [pc, #524]	@ (8002de4 <HAL_RCC_OscConfig+0x4ac>)
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d10f      	bne.n	8002c02 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002be2:	2300      	movs	r3, #0
 8002be4:	60bb      	str	r3, [r7, #8]
 8002be6:	4b7f      	ldr	r3, [pc, #508]	@ (8002de4 <HAL_RCC_OscConfig+0x4ac>)
 8002be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bea:	4a7e      	ldr	r2, [pc, #504]	@ (8002de4 <HAL_RCC_OscConfig+0x4ac>)
 8002bec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bf0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bf2:	4b7c      	ldr	r3, [pc, #496]	@ (8002de4 <HAL_RCC_OscConfig+0x4ac>)
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bfa:	60bb      	str	r3, [r7, #8]
 8002bfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c02:	4b79      	ldr	r3, [pc, #484]	@ (8002de8 <HAL_RCC_OscConfig+0x4b0>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d118      	bne.n	8002c40 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c0e:	4b76      	ldr	r3, [pc, #472]	@ (8002de8 <HAL_RCC_OscConfig+0x4b0>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a75      	ldr	r2, [pc, #468]	@ (8002de8 <HAL_RCC_OscConfig+0x4b0>)
 8002c14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c1a:	f7fe fae7 	bl	80011ec <HAL_GetTick>
 8002c1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c20:	e008      	b.n	8002c34 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c22:	f7fe fae3 	bl	80011ec <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d901      	bls.n	8002c34 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e118      	b.n	8002e66 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c34:	4b6c      	ldr	r3, [pc, #432]	@ (8002de8 <HAL_RCC_OscConfig+0x4b0>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d0f0      	beq.n	8002c22 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d106      	bne.n	8002c56 <HAL_RCC_OscConfig+0x31e>
 8002c48:	4b66      	ldr	r3, [pc, #408]	@ (8002de4 <HAL_RCC_OscConfig+0x4ac>)
 8002c4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c4c:	4a65      	ldr	r2, [pc, #404]	@ (8002de4 <HAL_RCC_OscConfig+0x4ac>)
 8002c4e:	f043 0301 	orr.w	r3, r3, #1
 8002c52:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c54:	e01c      	b.n	8002c90 <HAL_RCC_OscConfig+0x358>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	2b05      	cmp	r3, #5
 8002c5c:	d10c      	bne.n	8002c78 <HAL_RCC_OscConfig+0x340>
 8002c5e:	4b61      	ldr	r3, [pc, #388]	@ (8002de4 <HAL_RCC_OscConfig+0x4ac>)
 8002c60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c62:	4a60      	ldr	r2, [pc, #384]	@ (8002de4 <HAL_RCC_OscConfig+0x4ac>)
 8002c64:	f043 0304 	orr.w	r3, r3, #4
 8002c68:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c6a:	4b5e      	ldr	r3, [pc, #376]	@ (8002de4 <HAL_RCC_OscConfig+0x4ac>)
 8002c6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c6e:	4a5d      	ldr	r2, [pc, #372]	@ (8002de4 <HAL_RCC_OscConfig+0x4ac>)
 8002c70:	f043 0301 	orr.w	r3, r3, #1
 8002c74:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c76:	e00b      	b.n	8002c90 <HAL_RCC_OscConfig+0x358>
 8002c78:	4b5a      	ldr	r3, [pc, #360]	@ (8002de4 <HAL_RCC_OscConfig+0x4ac>)
 8002c7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c7c:	4a59      	ldr	r2, [pc, #356]	@ (8002de4 <HAL_RCC_OscConfig+0x4ac>)
 8002c7e:	f023 0301 	bic.w	r3, r3, #1
 8002c82:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c84:	4b57      	ldr	r3, [pc, #348]	@ (8002de4 <HAL_RCC_OscConfig+0x4ac>)
 8002c86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c88:	4a56      	ldr	r2, [pc, #344]	@ (8002de4 <HAL_RCC_OscConfig+0x4ac>)
 8002c8a:	f023 0304 	bic.w	r3, r3, #4
 8002c8e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d015      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c98:	f7fe faa8 	bl	80011ec <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c9e:	e00a      	b.n	8002cb6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ca0:	f7fe faa4 	bl	80011ec <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e0d7      	b.n	8002e66 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cb6:	4b4b      	ldr	r3, [pc, #300]	@ (8002de4 <HAL_RCC_OscConfig+0x4ac>)
 8002cb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d0ee      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x368>
 8002cc2:	e014      	b.n	8002cee <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cc4:	f7fe fa92 	bl	80011ec <HAL_GetTick>
 8002cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cca:	e00a      	b.n	8002ce2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ccc:	f7fe fa8e 	bl	80011ec <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e0c1      	b.n	8002e66 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ce2:	4b40      	ldr	r3, [pc, #256]	@ (8002de4 <HAL_RCC_OscConfig+0x4ac>)
 8002ce4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1ee      	bne.n	8002ccc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002cee:	7dfb      	ldrb	r3, [r7, #23]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d105      	bne.n	8002d00 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cf4:	4b3b      	ldr	r3, [pc, #236]	@ (8002de4 <HAL_RCC_OscConfig+0x4ac>)
 8002cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf8:	4a3a      	ldr	r2, [pc, #232]	@ (8002de4 <HAL_RCC_OscConfig+0x4ac>)
 8002cfa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cfe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	f000 80ad 	beq.w	8002e64 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d0a:	4b36      	ldr	r3, [pc, #216]	@ (8002de4 <HAL_RCC_OscConfig+0x4ac>)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f003 030c 	and.w	r3, r3, #12
 8002d12:	2b08      	cmp	r3, #8
 8002d14:	d060      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d145      	bne.n	8002daa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d1e:	4b33      	ldr	r3, [pc, #204]	@ (8002dec <HAL_RCC_OscConfig+0x4b4>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d24:	f7fe fa62 	bl	80011ec <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d2c:	f7fe fa5e 	bl	80011ec <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e093      	b.n	8002e66 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d3e:	4b29      	ldr	r3, [pc, #164]	@ (8002de4 <HAL_RCC_OscConfig+0x4ac>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1f0      	bne.n	8002d2c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	69da      	ldr	r2, [r3, #28]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	431a      	orrs	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d58:	019b      	lsls	r3, r3, #6
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d60:	085b      	lsrs	r3, r3, #1
 8002d62:	3b01      	subs	r3, #1
 8002d64:	041b      	lsls	r3, r3, #16
 8002d66:	431a      	orrs	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d6c:	061b      	lsls	r3, r3, #24
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d74:	071b      	lsls	r3, r3, #28
 8002d76:	491b      	ldr	r1, [pc, #108]	@ (8002de4 <HAL_RCC_OscConfig+0x4ac>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d7c:	4b1b      	ldr	r3, [pc, #108]	@ (8002dec <HAL_RCC_OscConfig+0x4b4>)
 8002d7e:	2201      	movs	r2, #1
 8002d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d82:	f7fe fa33 	bl	80011ec <HAL_GetTick>
 8002d86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d88:	e008      	b.n	8002d9c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d8a:	f7fe fa2f 	bl	80011ec <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d901      	bls.n	8002d9c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e064      	b.n	8002e66 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d9c:	4b11      	ldr	r3, [pc, #68]	@ (8002de4 <HAL_RCC_OscConfig+0x4ac>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d0f0      	beq.n	8002d8a <HAL_RCC_OscConfig+0x452>
 8002da8:	e05c      	b.n	8002e64 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002daa:	4b10      	ldr	r3, [pc, #64]	@ (8002dec <HAL_RCC_OscConfig+0x4b4>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db0:	f7fe fa1c 	bl	80011ec <HAL_GetTick>
 8002db4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002db6:	e008      	b.n	8002dca <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002db8:	f7fe fa18 	bl	80011ec <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e04d      	b.n	8002e66 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dca:	4b06      	ldr	r3, [pc, #24]	@ (8002de4 <HAL_RCC_OscConfig+0x4ac>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1f0      	bne.n	8002db8 <HAL_RCC_OscConfig+0x480>
 8002dd6:	e045      	b.n	8002e64 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d107      	bne.n	8002df0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e040      	b.n	8002e66 <HAL_RCC_OscConfig+0x52e>
 8002de4:	40023800 	.word	0x40023800
 8002de8:	40007000 	.word	0x40007000
 8002dec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002df0:	4b1f      	ldr	r3, [pc, #124]	@ (8002e70 <HAL_RCC_OscConfig+0x538>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d030      	beq.n	8002e60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d129      	bne.n	8002e60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d122      	bne.n	8002e60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002e20:	4013      	ands	r3, r2
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002e26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d119      	bne.n	8002e60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e36:	085b      	lsrs	r3, r3, #1
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d10f      	bne.n	8002e60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d107      	bne.n	8002e60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e5a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d001      	beq.n	8002e64 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e000      	b.n	8002e66 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3718      	adds	r7, #24
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	40023800 	.word	0x40023800

08002e74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e041      	b.n	8002f0a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d106      	bne.n	8002ea0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f7fd ff26 	bl	8000cec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	3304      	adds	r3, #4
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	4610      	mov	r0, r2
 8002eb4:	f000 f9b8 	bl	8003228 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3708      	adds	r7, #8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
	...

08002f14 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d109      	bne.n	8002f38 <HAL_TIM_PWM_Start+0x24>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	bf14      	ite	ne
 8002f30:	2301      	movne	r3, #1
 8002f32:	2300      	moveq	r3, #0
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	e022      	b.n	8002f7e <HAL_TIM_PWM_Start+0x6a>
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	2b04      	cmp	r3, #4
 8002f3c:	d109      	bne.n	8002f52 <HAL_TIM_PWM_Start+0x3e>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	bf14      	ite	ne
 8002f4a:	2301      	movne	r3, #1
 8002f4c:	2300      	moveq	r3, #0
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	e015      	b.n	8002f7e <HAL_TIM_PWM_Start+0x6a>
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	2b08      	cmp	r3, #8
 8002f56:	d109      	bne.n	8002f6c <HAL_TIM_PWM_Start+0x58>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	bf14      	ite	ne
 8002f64:	2301      	movne	r3, #1
 8002f66:	2300      	moveq	r3, #0
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	e008      	b.n	8002f7e <HAL_TIM_PWM_Start+0x6a>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	bf14      	ite	ne
 8002f78:	2301      	movne	r3, #1
 8002f7a:	2300      	moveq	r3, #0
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e07c      	b.n	8003080 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d104      	bne.n	8002f96 <HAL_TIM_PWM_Start+0x82>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2202      	movs	r2, #2
 8002f90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f94:	e013      	b.n	8002fbe <HAL_TIM_PWM_Start+0xaa>
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	2b04      	cmp	r3, #4
 8002f9a:	d104      	bne.n	8002fa6 <HAL_TIM_PWM_Start+0x92>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002fa4:	e00b      	b.n	8002fbe <HAL_TIM_PWM_Start+0xaa>
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	2b08      	cmp	r3, #8
 8002faa:	d104      	bne.n	8002fb6 <HAL_TIM_PWM_Start+0xa2>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2202      	movs	r2, #2
 8002fb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002fb4:	e003      	b.n	8002fbe <HAL_TIM_PWM_Start+0xaa>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2202      	movs	r2, #2
 8002fba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	6839      	ldr	r1, [r7, #0]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f000 fb84 	bl	80036d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a2d      	ldr	r2, [pc, #180]	@ (8003088 <HAL_TIM_PWM_Start+0x174>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d004      	beq.n	8002fe0 <HAL_TIM_PWM_Start+0xcc>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a2c      	ldr	r2, [pc, #176]	@ (800308c <HAL_TIM_PWM_Start+0x178>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d101      	bne.n	8002fe4 <HAL_TIM_PWM_Start+0xd0>
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e000      	b.n	8002fe6 <HAL_TIM_PWM_Start+0xd2>
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d007      	beq.n	8002ffa <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002ff8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a22      	ldr	r2, [pc, #136]	@ (8003088 <HAL_TIM_PWM_Start+0x174>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d022      	beq.n	800304a <HAL_TIM_PWM_Start+0x136>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800300c:	d01d      	beq.n	800304a <HAL_TIM_PWM_Start+0x136>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a1f      	ldr	r2, [pc, #124]	@ (8003090 <HAL_TIM_PWM_Start+0x17c>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d018      	beq.n	800304a <HAL_TIM_PWM_Start+0x136>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a1d      	ldr	r2, [pc, #116]	@ (8003094 <HAL_TIM_PWM_Start+0x180>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d013      	beq.n	800304a <HAL_TIM_PWM_Start+0x136>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a1c      	ldr	r2, [pc, #112]	@ (8003098 <HAL_TIM_PWM_Start+0x184>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d00e      	beq.n	800304a <HAL_TIM_PWM_Start+0x136>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a16      	ldr	r2, [pc, #88]	@ (800308c <HAL_TIM_PWM_Start+0x178>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d009      	beq.n	800304a <HAL_TIM_PWM_Start+0x136>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a18      	ldr	r2, [pc, #96]	@ (800309c <HAL_TIM_PWM_Start+0x188>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d004      	beq.n	800304a <HAL_TIM_PWM_Start+0x136>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a16      	ldr	r2, [pc, #88]	@ (80030a0 <HAL_TIM_PWM_Start+0x18c>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d111      	bne.n	800306e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f003 0307 	and.w	r3, r3, #7
 8003054:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2b06      	cmp	r3, #6
 800305a:	d010      	beq.n	800307e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f042 0201 	orr.w	r2, r2, #1
 800306a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800306c:	e007      	b.n	800307e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f042 0201 	orr.w	r2, r2, #1
 800307c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	3710      	adds	r7, #16
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	40010000 	.word	0x40010000
 800308c:	40010400 	.word	0x40010400
 8003090:	40000400 	.word	0x40000400
 8003094:	40000800 	.word	0x40000800
 8003098:	40000c00 	.word	0x40000c00
 800309c:	40014000 	.word	0x40014000
 80030a0:	40001800 	.word	0x40001800

080030a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b086      	sub	sp, #24
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030b0:	2300      	movs	r3, #0
 80030b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d101      	bne.n	80030c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80030be:	2302      	movs	r3, #2
 80030c0:	e0ae      	b.n	8003220 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2201      	movs	r2, #1
 80030c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2b0c      	cmp	r3, #12
 80030ce:	f200 809f 	bhi.w	8003210 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80030d2:	a201      	add	r2, pc, #4	@ (adr r2, 80030d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80030d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d8:	0800310d 	.word	0x0800310d
 80030dc:	08003211 	.word	0x08003211
 80030e0:	08003211 	.word	0x08003211
 80030e4:	08003211 	.word	0x08003211
 80030e8:	0800314d 	.word	0x0800314d
 80030ec:	08003211 	.word	0x08003211
 80030f0:	08003211 	.word	0x08003211
 80030f4:	08003211 	.word	0x08003211
 80030f8:	0800318f 	.word	0x0800318f
 80030fc:	08003211 	.word	0x08003211
 8003100:	08003211 	.word	0x08003211
 8003104:	08003211 	.word	0x08003211
 8003108:	080031cf 	.word	0x080031cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68b9      	ldr	r1, [r7, #8]
 8003112:	4618      	mov	r0, r3
 8003114:	f000 f92e 	bl	8003374 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	699a      	ldr	r2, [r3, #24]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f042 0208 	orr.w	r2, r2, #8
 8003126:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	699a      	ldr	r2, [r3, #24]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f022 0204 	bic.w	r2, r2, #4
 8003136:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	6999      	ldr	r1, [r3, #24]
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	691a      	ldr	r2, [r3, #16]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	430a      	orrs	r2, r1
 8003148:	619a      	str	r2, [r3, #24]
      break;
 800314a:	e064      	b.n	8003216 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68b9      	ldr	r1, [r7, #8]
 8003152:	4618      	mov	r0, r3
 8003154:	f000 f97e 	bl	8003454 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	699a      	ldr	r2, [r3, #24]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003166:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	699a      	ldr	r2, [r3, #24]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003176:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	6999      	ldr	r1, [r3, #24]
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	021a      	lsls	r2, r3, #8
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	430a      	orrs	r2, r1
 800318a:	619a      	str	r2, [r3, #24]
      break;
 800318c:	e043      	b.n	8003216 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68b9      	ldr	r1, [r7, #8]
 8003194:	4618      	mov	r0, r3
 8003196:	f000 f9d3 	bl	8003540 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	69da      	ldr	r2, [r3, #28]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f042 0208 	orr.w	r2, r2, #8
 80031a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	69da      	ldr	r2, [r3, #28]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f022 0204 	bic.w	r2, r2, #4
 80031b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	69d9      	ldr	r1, [r3, #28]
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	691a      	ldr	r2, [r3, #16]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	430a      	orrs	r2, r1
 80031ca:	61da      	str	r2, [r3, #28]
      break;
 80031cc:	e023      	b.n	8003216 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68b9      	ldr	r1, [r7, #8]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f000 fa27 	bl	8003628 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	69da      	ldr	r2, [r3, #28]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80031e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	69da      	ldr	r2, [r3, #28]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	69d9      	ldr	r1, [r3, #28]
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	691b      	ldr	r3, [r3, #16]
 8003204:	021a      	lsls	r2, r3, #8
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	430a      	orrs	r2, r1
 800320c:	61da      	str	r2, [r3, #28]
      break;
 800320e:	e002      	b.n	8003216 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	75fb      	strb	r3, [r7, #23]
      break;
 8003214:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800321e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003220:	4618      	mov	r0, r3
 8003222:	3718      	adds	r7, #24
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003228:	b480      	push	{r7}
 800322a:	b085      	sub	sp, #20
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4a43      	ldr	r2, [pc, #268]	@ (8003348 <TIM_Base_SetConfig+0x120>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d013      	beq.n	8003268 <TIM_Base_SetConfig+0x40>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003246:	d00f      	beq.n	8003268 <TIM_Base_SetConfig+0x40>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a40      	ldr	r2, [pc, #256]	@ (800334c <TIM_Base_SetConfig+0x124>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d00b      	beq.n	8003268 <TIM_Base_SetConfig+0x40>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4a3f      	ldr	r2, [pc, #252]	@ (8003350 <TIM_Base_SetConfig+0x128>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d007      	beq.n	8003268 <TIM_Base_SetConfig+0x40>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a3e      	ldr	r2, [pc, #248]	@ (8003354 <TIM_Base_SetConfig+0x12c>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d003      	beq.n	8003268 <TIM_Base_SetConfig+0x40>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a3d      	ldr	r2, [pc, #244]	@ (8003358 <TIM_Base_SetConfig+0x130>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d108      	bne.n	800327a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800326e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	4313      	orrs	r3, r2
 8003278:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a32      	ldr	r2, [pc, #200]	@ (8003348 <TIM_Base_SetConfig+0x120>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d02b      	beq.n	80032da <TIM_Base_SetConfig+0xb2>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003288:	d027      	beq.n	80032da <TIM_Base_SetConfig+0xb2>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a2f      	ldr	r2, [pc, #188]	@ (800334c <TIM_Base_SetConfig+0x124>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d023      	beq.n	80032da <TIM_Base_SetConfig+0xb2>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a2e      	ldr	r2, [pc, #184]	@ (8003350 <TIM_Base_SetConfig+0x128>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d01f      	beq.n	80032da <TIM_Base_SetConfig+0xb2>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a2d      	ldr	r2, [pc, #180]	@ (8003354 <TIM_Base_SetConfig+0x12c>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d01b      	beq.n	80032da <TIM_Base_SetConfig+0xb2>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a2c      	ldr	r2, [pc, #176]	@ (8003358 <TIM_Base_SetConfig+0x130>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d017      	beq.n	80032da <TIM_Base_SetConfig+0xb2>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a2b      	ldr	r2, [pc, #172]	@ (800335c <TIM_Base_SetConfig+0x134>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d013      	beq.n	80032da <TIM_Base_SetConfig+0xb2>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a2a      	ldr	r2, [pc, #168]	@ (8003360 <TIM_Base_SetConfig+0x138>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d00f      	beq.n	80032da <TIM_Base_SetConfig+0xb2>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a29      	ldr	r2, [pc, #164]	@ (8003364 <TIM_Base_SetConfig+0x13c>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d00b      	beq.n	80032da <TIM_Base_SetConfig+0xb2>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a28      	ldr	r2, [pc, #160]	@ (8003368 <TIM_Base_SetConfig+0x140>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d007      	beq.n	80032da <TIM_Base_SetConfig+0xb2>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a27      	ldr	r2, [pc, #156]	@ (800336c <TIM_Base_SetConfig+0x144>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d003      	beq.n	80032da <TIM_Base_SetConfig+0xb2>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a26      	ldr	r2, [pc, #152]	@ (8003370 <TIM_Base_SetConfig+0x148>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d108      	bne.n	80032ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	68fa      	ldr	r2, [r7, #12]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	689a      	ldr	r2, [r3, #8]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a0e      	ldr	r2, [pc, #56]	@ (8003348 <TIM_Base_SetConfig+0x120>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d003      	beq.n	800331a <TIM_Base_SetConfig+0xf2>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a10      	ldr	r2, [pc, #64]	@ (8003358 <TIM_Base_SetConfig+0x130>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d103      	bne.n	8003322 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	691a      	ldr	r2, [r3, #16]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f043 0204 	orr.w	r2, r3, #4
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2201      	movs	r2, #1
 8003332:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	601a      	str	r2, [r3, #0]
}
 800333a:	bf00      	nop
 800333c:	3714      	adds	r7, #20
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	40010000 	.word	0x40010000
 800334c:	40000400 	.word	0x40000400
 8003350:	40000800 	.word	0x40000800
 8003354:	40000c00 	.word	0x40000c00
 8003358:	40010400 	.word	0x40010400
 800335c:	40014000 	.word	0x40014000
 8003360:	40014400 	.word	0x40014400
 8003364:	40014800 	.word	0x40014800
 8003368:	40001800 	.word	0x40001800
 800336c:	40001c00 	.word	0x40001c00
 8003370:	40002000 	.word	0x40002000

08003374 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003374:	b480      	push	{r7}
 8003376:	b087      	sub	sp, #28
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a1b      	ldr	r3, [r3, #32]
 8003382:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a1b      	ldr	r3, [r3, #32]
 8003388:	f023 0201 	bic.w	r2, r3, #1
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f023 0303 	bic.w	r3, r3, #3
 80033aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	f023 0302 	bic.w	r3, r3, #2
 80033bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a20      	ldr	r2, [pc, #128]	@ (800344c <TIM_OC1_SetConfig+0xd8>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d003      	beq.n	80033d8 <TIM_OC1_SetConfig+0x64>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a1f      	ldr	r2, [pc, #124]	@ (8003450 <TIM_OC1_SetConfig+0xdc>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d10c      	bne.n	80033f2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	f023 0308 	bic.w	r3, r3, #8
 80033de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	697a      	ldr	r2, [r7, #20]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	f023 0304 	bic.w	r3, r3, #4
 80033f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a15      	ldr	r2, [pc, #84]	@ (800344c <TIM_OC1_SetConfig+0xd8>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d003      	beq.n	8003402 <TIM_OC1_SetConfig+0x8e>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a14      	ldr	r2, [pc, #80]	@ (8003450 <TIM_OC1_SetConfig+0xdc>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d111      	bne.n	8003426 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003408:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003410:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	4313      	orrs	r3, r2
 800341a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	4313      	orrs	r3, r2
 8003424:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	685a      	ldr	r2, [r3, #4]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	697a      	ldr	r2, [r7, #20]
 800343e:	621a      	str	r2, [r3, #32]
}
 8003440:	bf00      	nop
 8003442:	371c      	adds	r7, #28
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr
 800344c:	40010000 	.word	0x40010000
 8003450:	40010400 	.word	0x40010400

08003454 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003454:	b480      	push	{r7}
 8003456:	b087      	sub	sp, #28
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a1b      	ldr	r3, [r3, #32]
 8003462:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a1b      	ldr	r3, [r3, #32]
 8003468:	f023 0210 	bic.w	r2, r3, #16
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003482:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800348a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	021b      	lsls	r3, r3, #8
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	4313      	orrs	r3, r2
 8003496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	f023 0320 	bic.w	r3, r3, #32
 800349e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	011b      	lsls	r3, r3, #4
 80034a6:	697a      	ldr	r2, [r7, #20]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a22      	ldr	r2, [pc, #136]	@ (8003538 <TIM_OC2_SetConfig+0xe4>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d003      	beq.n	80034bc <TIM_OC2_SetConfig+0x68>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4a21      	ldr	r2, [pc, #132]	@ (800353c <TIM_OC2_SetConfig+0xe8>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d10d      	bne.n	80034d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	011b      	lsls	r3, r3, #4
 80034ca:	697a      	ldr	r2, [r7, #20]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80034d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a17      	ldr	r2, [pc, #92]	@ (8003538 <TIM_OC2_SetConfig+0xe4>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d003      	beq.n	80034e8 <TIM_OC2_SetConfig+0x94>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a16      	ldr	r2, [pc, #88]	@ (800353c <TIM_OC2_SetConfig+0xe8>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d113      	bne.n	8003510 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80034ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80034f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	695b      	ldr	r3, [r3, #20]
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	693a      	ldr	r2, [r7, #16]
 8003500:	4313      	orrs	r3, r2
 8003502:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	699b      	ldr	r3, [r3, #24]
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	4313      	orrs	r3, r2
 800350e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	68fa      	ldr	r2, [r7, #12]
 800351a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685a      	ldr	r2, [r3, #4]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	621a      	str	r2, [r3, #32]
}
 800352a:	bf00      	nop
 800352c:	371c      	adds	r7, #28
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	40010000 	.word	0x40010000
 800353c:	40010400 	.word	0x40010400

08003540 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003540:	b480      	push	{r7}
 8003542:	b087      	sub	sp, #28
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a1b      	ldr	r3, [r3, #32]
 800354e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	69db      	ldr	r3, [r3, #28]
 8003566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800356e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f023 0303 	bic.w	r3, r3, #3
 8003576:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	4313      	orrs	r3, r2
 8003580:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003588:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	021b      	lsls	r3, r3, #8
 8003590:	697a      	ldr	r2, [r7, #20]
 8003592:	4313      	orrs	r3, r2
 8003594:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a21      	ldr	r2, [pc, #132]	@ (8003620 <TIM_OC3_SetConfig+0xe0>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d003      	beq.n	80035a6 <TIM_OC3_SetConfig+0x66>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a20      	ldr	r2, [pc, #128]	@ (8003624 <TIM_OC3_SetConfig+0xe4>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d10d      	bne.n	80035c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80035ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	021b      	lsls	r3, r3, #8
 80035b4:	697a      	ldr	r2, [r7, #20]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80035c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a16      	ldr	r2, [pc, #88]	@ (8003620 <TIM_OC3_SetConfig+0xe0>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d003      	beq.n	80035d2 <TIM_OC3_SetConfig+0x92>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a15      	ldr	r2, [pc, #84]	@ (8003624 <TIM_OC3_SetConfig+0xe4>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d113      	bne.n	80035fa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80035d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80035e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	011b      	lsls	r3, r3, #4
 80035e8:	693a      	ldr	r2, [r7, #16]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	011b      	lsls	r3, r3, #4
 80035f4:	693a      	ldr	r2, [r7, #16]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	685a      	ldr	r2, [r3, #4]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	621a      	str	r2, [r3, #32]
}
 8003614:	bf00      	nop
 8003616:	371c      	adds	r7, #28
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr
 8003620:	40010000 	.word	0x40010000
 8003624:	40010400 	.word	0x40010400

08003628 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003628:	b480      	push	{r7}
 800362a:	b087      	sub	sp, #28
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	69db      	ldr	r3, [r3, #28]
 800364e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003656:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800365e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	021b      	lsls	r3, r3, #8
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	4313      	orrs	r3, r2
 800366a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003672:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	031b      	lsls	r3, r3, #12
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	4313      	orrs	r3, r2
 800367e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a12      	ldr	r2, [pc, #72]	@ (80036cc <TIM_OC4_SetConfig+0xa4>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d003      	beq.n	8003690 <TIM_OC4_SetConfig+0x68>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a11      	ldr	r2, [pc, #68]	@ (80036d0 <TIM_OC4_SetConfig+0xa8>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d109      	bne.n	80036a4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003696:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	695b      	ldr	r3, [r3, #20]
 800369c:	019b      	lsls	r3, r3, #6
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	697a      	ldr	r2, [r7, #20]
 80036a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685a      	ldr	r2, [r3, #4]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	621a      	str	r2, [r3, #32]
}
 80036be:	bf00      	nop
 80036c0:	371c      	adds	r7, #28
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	40010000 	.word	0x40010000
 80036d0:	40010400 	.word	0x40010400

080036d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b087      	sub	sp, #28
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	f003 031f 	and.w	r3, r3, #31
 80036e6:	2201      	movs	r2, #1
 80036e8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6a1a      	ldr	r2, [r3, #32]
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	43db      	mvns	r3, r3
 80036f6:	401a      	ands	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6a1a      	ldr	r2, [r3, #32]
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	f003 031f 	and.w	r3, r3, #31
 8003706:	6879      	ldr	r1, [r7, #4]
 8003708:	fa01 f303 	lsl.w	r3, r1, r3
 800370c:	431a      	orrs	r2, r3
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	621a      	str	r2, [r3, #32]
}
 8003712:	bf00      	nop
 8003714:	371c      	adds	r7, #28
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
	...

08003720 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003720:	b480      	push	{r7}
 8003722:	b085      	sub	sp, #20
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003730:	2b01      	cmp	r3, #1
 8003732:	d101      	bne.n	8003738 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003734:	2302      	movs	r3, #2
 8003736:	e05a      	b.n	80037ee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2202      	movs	r2, #2
 8003744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800375e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68fa      	ldr	r2, [r7, #12]
 8003766:	4313      	orrs	r3, r2
 8003768:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a21      	ldr	r2, [pc, #132]	@ (80037fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d022      	beq.n	80037c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003784:	d01d      	beq.n	80037c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a1d      	ldr	r2, [pc, #116]	@ (8003800 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d018      	beq.n	80037c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a1b      	ldr	r2, [pc, #108]	@ (8003804 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d013      	beq.n	80037c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a1a      	ldr	r2, [pc, #104]	@ (8003808 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d00e      	beq.n	80037c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a18      	ldr	r2, [pc, #96]	@ (800380c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d009      	beq.n	80037c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a17      	ldr	r2, [pc, #92]	@ (8003810 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d004      	beq.n	80037c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a15      	ldr	r2, [pc, #84]	@ (8003814 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d10c      	bne.n	80037dc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80037c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	68ba      	ldr	r2, [r7, #8]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68ba      	ldr	r2, [r7, #8]
 80037da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3714      	adds	r7, #20
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	40010000 	.word	0x40010000
 8003800:	40000400 	.word	0x40000400
 8003804:	40000800 	.word	0x40000800
 8003808:	40000c00 	.word	0x40000c00
 800380c:	40010400 	.word	0x40010400
 8003810:	40014000 	.word	0x40014000
 8003814:	40001800 	.word	0x40001800

08003818 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003822:	2300      	movs	r3, #0
 8003824:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800382c:	2b01      	cmp	r3, #1
 800382e:	d101      	bne.n	8003834 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003830:	2302      	movs	r3, #2
 8003832:	e03d      	b.n	80038b0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	4313      	orrs	r3, r2
 8003848:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	4313      	orrs	r3, r2
 8003856:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	4313      	orrs	r3, r2
 8003864:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4313      	orrs	r3, r2
 8003872:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	4313      	orrs	r3, r2
 8003880:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	695b      	ldr	r3, [r3, #20]
 800388c:	4313      	orrs	r3, r2
 800388e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	69db      	ldr	r3, [r3, #28]
 800389a:	4313      	orrs	r3, r2
 800389c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68fa      	ldr	r2, [r7, #12]
 80038a4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80038ae:	2300      	movs	r3, #0
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3714      	adds	r7, #20
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <std>:
 80038bc:	2300      	movs	r3, #0
 80038be:	b510      	push	{r4, lr}
 80038c0:	4604      	mov	r4, r0
 80038c2:	e9c0 3300 	strd	r3, r3, [r0]
 80038c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80038ca:	6083      	str	r3, [r0, #8]
 80038cc:	8181      	strh	r1, [r0, #12]
 80038ce:	6643      	str	r3, [r0, #100]	@ 0x64
 80038d0:	81c2      	strh	r2, [r0, #14]
 80038d2:	6183      	str	r3, [r0, #24]
 80038d4:	4619      	mov	r1, r3
 80038d6:	2208      	movs	r2, #8
 80038d8:	305c      	adds	r0, #92	@ 0x5c
 80038da:	f000 f99b 	bl	8003c14 <memset>
 80038de:	4b0d      	ldr	r3, [pc, #52]	@ (8003914 <std+0x58>)
 80038e0:	6263      	str	r3, [r4, #36]	@ 0x24
 80038e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003918 <std+0x5c>)
 80038e4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80038e6:	4b0d      	ldr	r3, [pc, #52]	@ (800391c <std+0x60>)
 80038e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80038ea:	4b0d      	ldr	r3, [pc, #52]	@ (8003920 <std+0x64>)
 80038ec:	6323      	str	r3, [r4, #48]	@ 0x30
 80038ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003924 <std+0x68>)
 80038f0:	6224      	str	r4, [r4, #32]
 80038f2:	429c      	cmp	r4, r3
 80038f4:	d006      	beq.n	8003904 <std+0x48>
 80038f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80038fa:	4294      	cmp	r4, r2
 80038fc:	d002      	beq.n	8003904 <std+0x48>
 80038fe:	33d0      	adds	r3, #208	@ 0xd0
 8003900:	429c      	cmp	r4, r3
 8003902:	d105      	bne.n	8003910 <std+0x54>
 8003904:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800390c:	f000 b9fa 	b.w	8003d04 <__retarget_lock_init_recursive>
 8003910:	bd10      	pop	{r4, pc}
 8003912:	bf00      	nop
 8003914:	08003a65 	.word	0x08003a65
 8003918:	08003a87 	.word	0x08003a87
 800391c:	08003abf 	.word	0x08003abf
 8003920:	08003ae3 	.word	0x08003ae3
 8003924:	20000200 	.word	0x20000200

08003928 <stdio_exit_handler>:
 8003928:	4a02      	ldr	r2, [pc, #8]	@ (8003934 <stdio_exit_handler+0xc>)
 800392a:	4903      	ldr	r1, [pc, #12]	@ (8003938 <stdio_exit_handler+0x10>)
 800392c:	4803      	ldr	r0, [pc, #12]	@ (800393c <stdio_exit_handler+0x14>)
 800392e:	f000 b869 	b.w	8003a04 <_fwalk_sglue>
 8003932:	bf00      	nop
 8003934:	2000000c 	.word	0x2000000c
 8003938:	080045a1 	.word	0x080045a1
 800393c:	2000001c 	.word	0x2000001c

08003940 <cleanup_stdio>:
 8003940:	6841      	ldr	r1, [r0, #4]
 8003942:	4b0c      	ldr	r3, [pc, #48]	@ (8003974 <cleanup_stdio+0x34>)
 8003944:	4299      	cmp	r1, r3
 8003946:	b510      	push	{r4, lr}
 8003948:	4604      	mov	r4, r0
 800394a:	d001      	beq.n	8003950 <cleanup_stdio+0x10>
 800394c:	f000 fe28 	bl	80045a0 <_fflush_r>
 8003950:	68a1      	ldr	r1, [r4, #8]
 8003952:	4b09      	ldr	r3, [pc, #36]	@ (8003978 <cleanup_stdio+0x38>)
 8003954:	4299      	cmp	r1, r3
 8003956:	d002      	beq.n	800395e <cleanup_stdio+0x1e>
 8003958:	4620      	mov	r0, r4
 800395a:	f000 fe21 	bl	80045a0 <_fflush_r>
 800395e:	68e1      	ldr	r1, [r4, #12]
 8003960:	4b06      	ldr	r3, [pc, #24]	@ (800397c <cleanup_stdio+0x3c>)
 8003962:	4299      	cmp	r1, r3
 8003964:	d004      	beq.n	8003970 <cleanup_stdio+0x30>
 8003966:	4620      	mov	r0, r4
 8003968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800396c:	f000 be18 	b.w	80045a0 <_fflush_r>
 8003970:	bd10      	pop	{r4, pc}
 8003972:	bf00      	nop
 8003974:	20000200 	.word	0x20000200
 8003978:	20000268 	.word	0x20000268
 800397c:	200002d0 	.word	0x200002d0

08003980 <global_stdio_init.part.0>:
 8003980:	b510      	push	{r4, lr}
 8003982:	4b0b      	ldr	r3, [pc, #44]	@ (80039b0 <global_stdio_init.part.0+0x30>)
 8003984:	4c0b      	ldr	r4, [pc, #44]	@ (80039b4 <global_stdio_init.part.0+0x34>)
 8003986:	4a0c      	ldr	r2, [pc, #48]	@ (80039b8 <global_stdio_init.part.0+0x38>)
 8003988:	601a      	str	r2, [r3, #0]
 800398a:	4620      	mov	r0, r4
 800398c:	2200      	movs	r2, #0
 800398e:	2104      	movs	r1, #4
 8003990:	f7ff ff94 	bl	80038bc <std>
 8003994:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003998:	2201      	movs	r2, #1
 800399a:	2109      	movs	r1, #9
 800399c:	f7ff ff8e 	bl	80038bc <std>
 80039a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80039a4:	2202      	movs	r2, #2
 80039a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039aa:	2112      	movs	r1, #18
 80039ac:	f7ff bf86 	b.w	80038bc <std>
 80039b0:	20000338 	.word	0x20000338
 80039b4:	20000200 	.word	0x20000200
 80039b8:	08003929 	.word	0x08003929

080039bc <__sfp_lock_acquire>:
 80039bc:	4801      	ldr	r0, [pc, #4]	@ (80039c4 <__sfp_lock_acquire+0x8>)
 80039be:	f000 b9a2 	b.w	8003d06 <__retarget_lock_acquire_recursive>
 80039c2:	bf00      	nop
 80039c4:	20000341 	.word	0x20000341

080039c8 <__sfp_lock_release>:
 80039c8:	4801      	ldr	r0, [pc, #4]	@ (80039d0 <__sfp_lock_release+0x8>)
 80039ca:	f000 b99d 	b.w	8003d08 <__retarget_lock_release_recursive>
 80039ce:	bf00      	nop
 80039d0:	20000341 	.word	0x20000341

080039d4 <__sinit>:
 80039d4:	b510      	push	{r4, lr}
 80039d6:	4604      	mov	r4, r0
 80039d8:	f7ff fff0 	bl	80039bc <__sfp_lock_acquire>
 80039dc:	6a23      	ldr	r3, [r4, #32]
 80039de:	b11b      	cbz	r3, 80039e8 <__sinit+0x14>
 80039e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039e4:	f7ff bff0 	b.w	80039c8 <__sfp_lock_release>
 80039e8:	4b04      	ldr	r3, [pc, #16]	@ (80039fc <__sinit+0x28>)
 80039ea:	6223      	str	r3, [r4, #32]
 80039ec:	4b04      	ldr	r3, [pc, #16]	@ (8003a00 <__sinit+0x2c>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d1f5      	bne.n	80039e0 <__sinit+0xc>
 80039f4:	f7ff ffc4 	bl	8003980 <global_stdio_init.part.0>
 80039f8:	e7f2      	b.n	80039e0 <__sinit+0xc>
 80039fa:	bf00      	nop
 80039fc:	08003941 	.word	0x08003941
 8003a00:	20000338 	.word	0x20000338

08003a04 <_fwalk_sglue>:
 8003a04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a08:	4607      	mov	r7, r0
 8003a0a:	4688      	mov	r8, r1
 8003a0c:	4614      	mov	r4, r2
 8003a0e:	2600      	movs	r6, #0
 8003a10:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003a14:	f1b9 0901 	subs.w	r9, r9, #1
 8003a18:	d505      	bpl.n	8003a26 <_fwalk_sglue+0x22>
 8003a1a:	6824      	ldr	r4, [r4, #0]
 8003a1c:	2c00      	cmp	r4, #0
 8003a1e:	d1f7      	bne.n	8003a10 <_fwalk_sglue+0xc>
 8003a20:	4630      	mov	r0, r6
 8003a22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a26:	89ab      	ldrh	r3, [r5, #12]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d907      	bls.n	8003a3c <_fwalk_sglue+0x38>
 8003a2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003a30:	3301      	adds	r3, #1
 8003a32:	d003      	beq.n	8003a3c <_fwalk_sglue+0x38>
 8003a34:	4629      	mov	r1, r5
 8003a36:	4638      	mov	r0, r7
 8003a38:	47c0      	blx	r8
 8003a3a:	4306      	orrs	r6, r0
 8003a3c:	3568      	adds	r5, #104	@ 0x68
 8003a3e:	e7e9      	b.n	8003a14 <_fwalk_sglue+0x10>

08003a40 <iprintf>:
 8003a40:	b40f      	push	{r0, r1, r2, r3}
 8003a42:	b507      	push	{r0, r1, r2, lr}
 8003a44:	4906      	ldr	r1, [pc, #24]	@ (8003a60 <iprintf+0x20>)
 8003a46:	ab04      	add	r3, sp, #16
 8003a48:	6808      	ldr	r0, [r1, #0]
 8003a4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a4e:	6881      	ldr	r1, [r0, #8]
 8003a50:	9301      	str	r3, [sp, #4]
 8003a52:	f000 fa7d 	bl	8003f50 <_vfiprintf_r>
 8003a56:	b003      	add	sp, #12
 8003a58:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a5c:	b004      	add	sp, #16
 8003a5e:	4770      	bx	lr
 8003a60:	20000018 	.word	0x20000018

08003a64 <__sread>:
 8003a64:	b510      	push	{r4, lr}
 8003a66:	460c      	mov	r4, r1
 8003a68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a6c:	f000 f8fc 	bl	8003c68 <_read_r>
 8003a70:	2800      	cmp	r0, #0
 8003a72:	bfab      	itete	ge
 8003a74:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003a76:	89a3      	ldrhlt	r3, [r4, #12]
 8003a78:	181b      	addge	r3, r3, r0
 8003a7a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003a7e:	bfac      	ite	ge
 8003a80:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003a82:	81a3      	strhlt	r3, [r4, #12]
 8003a84:	bd10      	pop	{r4, pc}

08003a86 <__swrite>:
 8003a86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a8a:	461f      	mov	r7, r3
 8003a8c:	898b      	ldrh	r3, [r1, #12]
 8003a8e:	05db      	lsls	r3, r3, #23
 8003a90:	4605      	mov	r5, r0
 8003a92:	460c      	mov	r4, r1
 8003a94:	4616      	mov	r6, r2
 8003a96:	d505      	bpl.n	8003aa4 <__swrite+0x1e>
 8003a98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f000 f8d0 	bl	8003c44 <_lseek_r>
 8003aa4:	89a3      	ldrh	r3, [r4, #12]
 8003aa6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003aaa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003aae:	81a3      	strh	r3, [r4, #12]
 8003ab0:	4632      	mov	r2, r6
 8003ab2:	463b      	mov	r3, r7
 8003ab4:	4628      	mov	r0, r5
 8003ab6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003aba:	f000 b8e7 	b.w	8003c8c <_write_r>

08003abe <__sseek>:
 8003abe:	b510      	push	{r4, lr}
 8003ac0:	460c      	mov	r4, r1
 8003ac2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ac6:	f000 f8bd 	bl	8003c44 <_lseek_r>
 8003aca:	1c43      	adds	r3, r0, #1
 8003acc:	89a3      	ldrh	r3, [r4, #12]
 8003ace:	bf15      	itete	ne
 8003ad0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003ad2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003ad6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003ada:	81a3      	strheq	r3, [r4, #12]
 8003adc:	bf18      	it	ne
 8003ade:	81a3      	strhne	r3, [r4, #12]
 8003ae0:	bd10      	pop	{r4, pc}

08003ae2 <__sclose>:
 8003ae2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ae6:	f000 b89d 	b.w	8003c24 <_close_r>

08003aea <__swbuf_r>:
 8003aea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aec:	460e      	mov	r6, r1
 8003aee:	4614      	mov	r4, r2
 8003af0:	4605      	mov	r5, r0
 8003af2:	b118      	cbz	r0, 8003afc <__swbuf_r+0x12>
 8003af4:	6a03      	ldr	r3, [r0, #32]
 8003af6:	b90b      	cbnz	r3, 8003afc <__swbuf_r+0x12>
 8003af8:	f7ff ff6c 	bl	80039d4 <__sinit>
 8003afc:	69a3      	ldr	r3, [r4, #24]
 8003afe:	60a3      	str	r3, [r4, #8]
 8003b00:	89a3      	ldrh	r3, [r4, #12]
 8003b02:	071a      	lsls	r2, r3, #28
 8003b04:	d501      	bpl.n	8003b0a <__swbuf_r+0x20>
 8003b06:	6923      	ldr	r3, [r4, #16]
 8003b08:	b943      	cbnz	r3, 8003b1c <__swbuf_r+0x32>
 8003b0a:	4621      	mov	r1, r4
 8003b0c:	4628      	mov	r0, r5
 8003b0e:	f000 f82b 	bl	8003b68 <__swsetup_r>
 8003b12:	b118      	cbz	r0, 8003b1c <__swbuf_r+0x32>
 8003b14:	f04f 37ff 	mov.w	r7, #4294967295
 8003b18:	4638      	mov	r0, r7
 8003b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b1c:	6823      	ldr	r3, [r4, #0]
 8003b1e:	6922      	ldr	r2, [r4, #16]
 8003b20:	1a98      	subs	r0, r3, r2
 8003b22:	6963      	ldr	r3, [r4, #20]
 8003b24:	b2f6      	uxtb	r6, r6
 8003b26:	4283      	cmp	r3, r0
 8003b28:	4637      	mov	r7, r6
 8003b2a:	dc05      	bgt.n	8003b38 <__swbuf_r+0x4e>
 8003b2c:	4621      	mov	r1, r4
 8003b2e:	4628      	mov	r0, r5
 8003b30:	f000 fd36 	bl	80045a0 <_fflush_r>
 8003b34:	2800      	cmp	r0, #0
 8003b36:	d1ed      	bne.n	8003b14 <__swbuf_r+0x2a>
 8003b38:	68a3      	ldr	r3, [r4, #8]
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	60a3      	str	r3, [r4, #8]
 8003b3e:	6823      	ldr	r3, [r4, #0]
 8003b40:	1c5a      	adds	r2, r3, #1
 8003b42:	6022      	str	r2, [r4, #0]
 8003b44:	701e      	strb	r6, [r3, #0]
 8003b46:	6962      	ldr	r2, [r4, #20]
 8003b48:	1c43      	adds	r3, r0, #1
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d004      	beq.n	8003b58 <__swbuf_r+0x6e>
 8003b4e:	89a3      	ldrh	r3, [r4, #12]
 8003b50:	07db      	lsls	r3, r3, #31
 8003b52:	d5e1      	bpl.n	8003b18 <__swbuf_r+0x2e>
 8003b54:	2e0a      	cmp	r6, #10
 8003b56:	d1df      	bne.n	8003b18 <__swbuf_r+0x2e>
 8003b58:	4621      	mov	r1, r4
 8003b5a:	4628      	mov	r0, r5
 8003b5c:	f000 fd20 	bl	80045a0 <_fflush_r>
 8003b60:	2800      	cmp	r0, #0
 8003b62:	d0d9      	beq.n	8003b18 <__swbuf_r+0x2e>
 8003b64:	e7d6      	b.n	8003b14 <__swbuf_r+0x2a>
	...

08003b68 <__swsetup_r>:
 8003b68:	b538      	push	{r3, r4, r5, lr}
 8003b6a:	4b29      	ldr	r3, [pc, #164]	@ (8003c10 <__swsetup_r+0xa8>)
 8003b6c:	4605      	mov	r5, r0
 8003b6e:	6818      	ldr	r0, [r3, #0]
 8003b70:	460c      	mov	r4, r1
 8003b72:	b118      	cbz	r0, 8003b7c <__swsetup_r+0x14>
 8003b74:	6a03      	ldr	r3, [r0, #32]
 8003b76:	b90b      	cbnz	r3, 8003b7c <__swsetup_r+0x14>
 8003b78:	f7ff ff2c 	bl	80039d4 <__sinit>
 8003b7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b80:	0719      	lsls	r1, r3, #28
 8003b82:	d422      	bmi.n	8003bca <__swsetup_r+0x62>
 8003b84:	06da      	lsls	r2, r3, #27
 8003b86:	d407      	bmi.n	8003b98 <__swsetup_r+0x30>
 8003b88:	2209      	movs	r2, #9
 8003b8a:	602a      	str	r2, [r5, #0]
 8003b8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b90:	81a3      	strh	r3, [r4, #12]
 8003b92:	f04f 30ff 	mov.w	r0, #4294967295
 8003b96:	e033      	b.n	8003c00 <__swsetup_r+0x98>
 8003b98:	0758      	lsls	r0, r3, #29
 8003b9a:	d512      	bpl.n	8003bc2 <__swsetup_r+0x5a>
 8003b9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003b9e:	b141      	cbz	r1, 8003bb2 <__swsetup_r+0x4a>
 8003ba0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003ba4:	4299      	cmp	r1, r3
 8003ba6:	d002      	beq.n	8003bae <__swsetup_r+0x46>
 8003ba8:	4628      	mov	r0, r5
 8003baa:	f000 f8af 	bl	8003d0c <_free_r>
 8003bae:	2300      	movs	r3, #0
 8003bb0:	6363      	str	r3, [r4, #52]	@ 0x34
 8003bb2:	89a3      	ldrh	r3, [r4, #12]
 8003bb4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003bb8:	81a3      	strh	r3, [r4, #12]
 8003bba:	2300      	movs	r3, #0
 8003bbc:	6063      	str	r3, [r4, #4]
 8003bbe:	6923      	ldr	r3, [r4, #16]
 8003bc0:	6023      	str	r3, [r4, #0]
 8003bc2:	89a3      	ldrh	r3, [r4, #12]
 8003bc4:	f043 0308 	orr.w	r3, r3, #8
 8003bc8:	81a3      	strh	r3, [r4, #12]
 8003bca:	6923      	ldr	r3, [r4, #16]
 8003bcc:	b94b      	cbnz	r3, 8003be2 <__swsetup_r+0x7a>
 8003bce:	89a3      	ldrh	r3, [r4, #12]
 8003bd0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003bd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bd8:	d003      	beq.n	8003be2 <__swsetup_r+0x7a>
 8003bda:	4621      	mov	r1, r4
 8003bdc:	4628      	mov	r0, r5
 8003bde:	f000 fd2d 	bl	800463c <__smakebuf_r>
 8003be2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003be6:	f013 0201 	ands.w	r2, r3, #1
 8003bea:	d00a      	beq.n	8003c02 <__swsetup_r+0x9a>
 8003bec:	2200      	movs	r2, #0
 8003bee:	60a2      	str	r2, [r4, #8]
 8003bf0:	6962      	ldr	r2, [r4, #20]
 8003bf2:	4252      	negs	r2, r2
 8003bf4:	61a2      	str	r2, [r4, #24]
 8003bf6:	6922      	ldr	r2, [r4, #16]
 8003bf8:	b942      	cbnz	r2, 8003c0c <__swsetup_r+0xa4>
 8003bfa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003bfe:	d1c5      	bne.n	8003b8c <__swsetup_r+0x24>
 8003c00:	bd38      	pop	{r3, r4, r5, pc}
 8003c02:	0799      	lsls	r1, r3, #30
 8003c04:	bf58      	it	pl
 8003c06:	6962      	ldrpl	r2, [r4, #20]
 8003c08:	60a2      	str	r2, [r4, #8]
 8003c0a:	e7f4      	b.n	8003bf6 <__swsetup_r+0x8e>
 8003c0c:	2000      	movs	r0, #0
 8003c0e:	e7f7      	b.n	8003c00 <__swsetup_r+0x98>
 8003c10:	20000018 	.word	0x20000018

08003c14 <memset>:
 8003c14:	4402      	add	r2, r0
 8003c16:	4603      	mov	r3, r0
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d100      	bne.n	8003c1e <memset+0xa>
 8003c1c:	4770      	bx	lr
 8003c1e:	f803 1b01 	strb.w	r1, [r3], #1
 8003c22:	e7f9      	b.n	8003c18 <memset+0x4>

08003c24 <_close_r>:
 8003c24:	b538      	push	{r3, r4, r5, lr}
 8003c26:	4d06      	ldr	r5, [pc, #24]	@ (8003c40 <_close_r+0x1c>)
 8003c28:	2300      	movs	r3, #0
 8003c2a:	4604      	mov	r4, r0
 8003c2c:	4608      	mov	r0, r1
 8003c2e:	602b      	str	r3, [r5, #0]
 8003c30:	f7fd f9d0 	bl	8000fd4 <_close>
 8003c34:	1c43      	adds	r3, r0, #1
 8003c36:	d102      	bne.n	8003c3e <_close_r+0x1a>
 8003c38:	682b      	ldr	r3, [r5, #0]
 8003c3a:	b103      	cbz	r3, 8003c3e <_close_r+0x1a>
 8003c3c:	6023      	str	r3, [r4, #0]
 8003c3e:	bd38      	pop	{r3, r4, r5, pc}
 8003c40:	2000033c 	.word	0x2000033c

08003c44 <_lseek_r>:
 8003c44:	b538      	push	{r3, r4, r5, lr}
 8003c46:	4d07      	ldr	r5, [pc, #28]	@ (8003c64 <_lseek_r+0x20>)
 8003c48:	4604      	mov	r4, r0
 8003c4a:	4608      	mov	r0, r1
 8003c4c:	4611      	mov	r1, r2
 8003c4e:	2200      	movs	r2, #0
 8003c50:	602a      	str	r2, [r5, #0]
 8003c52:	461a      	mov	r2, r3
 8003c54:	f7fd f9e5 	bl	8001022 <_lseek>
 8003c58:	1c43      	adds	r3, r0, #1
 8003c5a:	d102      	bne.n	8003c62 <_lseek_r+0x1e>
 8003c5c:	682b      	ldr	r3, [r5, #0]
 8003c5e:	b103      	cbz	r3, 8003c62 <_lseek_r+0x1e>
 8003c60:	6023      	str	r3, [r4, #0]
 8003c62:	bd38      	pop	{r3, r4, r5, pc}
 8003c64:	2000033c 	.word	0x2000033c

08003c68 <_read_r>:
 8003c68:	b538      	push	{r3, r4, r5, lr}
 8003c6a:	4d07      	ldr	r5, [pc, #28]	@ (8003c88 <_read_r+0x20>)
 8003c6c:	4604      	mov	r4, r0
 8003c6e:	4608      	mov	r0, r1
 8003c70:	4611      	mov	r1, r2
 8003c72:	2200      	movs	r2, #0
 8003c74:	602a      	str	r2, [r5, #0]
 8003c76:	461a      	mov	r2, r3
 8003c78:	f7fd f973 	bl	8000f62 <_read>
 8003c7c:	1c43      	adds	r3, r0, #1
 8003c7e:	d102      	bne.n	8003c86 <_read_r+0x1e>
 8003c80:	682b      	ldr	r3, [r5, #0]
 8003c82:	b103      	cbz	r3, 8003c86 <_read_r+0x1e>
 8003c84:	6023      	str	r3, [r4, #0]
 8003c86:	bd38      	pop	{r3, r4, r5, pc}
 8003c88:	2000033c 	.word	0x2000033c

08003c8c <_write_r>:
 8003c8c:	b538      	push	{r3, r4, r5, lr}
 8003c8e:	4d07      	ldr	r5, [pc, #28]	@ (8003cac <_write_r+0x20>)
 8003c90:	4604      	mov	r4, r0
 8003c92:	4608      	mov	r0, r1
 8003c94:	4611      	mov	r1, r2
 8003c96:	2200      	movs	r2, #0
 8003c98:	602a      	str	r2, [r5, #0]
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	f7fd f97e 	bl	8000f9c <_write>
 8003ca0:	1c43      	adds	r3, r0, #1
 8003ca2:	d102      	bne.n	8003caa <_write_r+0x1e>
 8003ca4:	682b      	ldr	r3, [r5, #0]
 8003ca6:	b103      	cbz	r3, 8003caa <_write_r+0x1e>
 8003ca8:	6023      	str	r3, [r4, #0]
 8003caa:	bd38      	pop	{r3, r4, r5, pc}
 8003cac:	2000033c 	.word	0x2000033c

08003cb0 <__errno>:
 8003cb0:	4b01      	ldr	r3, [pc, #4]	@ (8003cb8 <__errno+0x8>)
 8003cb2:	6818      	ldr	r0, [r3, #0]
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	20000018 	.word	0x20000018

08003cbc <__libc_init_array>:
 8003cbc:	b570      	push	{r4, r5, r6, lr}
 8003cbe:	4d0d      	ldr	r5, [pc, #52]	@ (8003cf4 <__libc_init_array+0x38>)
 8003cc0:	4c0d      	ldr	r4, [pc, #52]	@ (8003cf8 <__libc_init_array+0x3c>)
 8003cc2:	1b64      	subs	r4, r4, r5
 8003cc4:	10a4      	asrs	r4, r4, #2
 8003cc6:	2600      	movs	r6, #0
 8003cc8:	42a6      	cmp	r6, r4
 8003cca:	d109      	bne.n	8003ce0 <__libc_init_array+0x24>
 8003ccc:	4d0b      	ldr	r5, [pc, #44]	@ (8003cfc <__libc_init_array+0x40>)
 8003cce:	4c0c      	ldr	r4, [pc, #48]	@ (8003d00 <__libc_init_array+0x44>)
 8003cd0:	f000 fd22 	bl	8004718 <_init>
 8003cd4:	1b64      	subs	r4, r4, r5
 8003cd6:	10a4      	asrs	r4, r4, #2
 8003cd8:	2600      	movs	r6, #0
 8003cda:	42a6      	cmp	r6, r4
 8003cdc:	d105      	bne.n	8003cea <__libc_init_array+0x2e>
 8003cde:	bd70      	pop	{r4, r5, r6, pc}
 8003ce0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ce4:	4798      	blx	r3
 8003ce6:	3601      	adds	r6, #1
 8003ce8:	e7ee      	b.n	8003cc8 <__libc_init_array+0xc>
 8003cea:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cee:	4798      	blx	r3
 8003cf0:	3601      	adds	r6, #1
 8003cf2:	e7f2      	b.n	8003cda <__libc_init_array+0x1e>
 8003cf4:	080047bc 	.word	0x080047bc
 8003cf8:	080047bc 	.word	0x080047bc
 8003cfc:	080047bc 	.word	0x080047bc
 8003d00:	080047c0 	.word	0x080047c0

08003d04 <__retarget_lock_init_recursive>:
 8003d04:	4770      	bx	lr

08003d06 <__retarget_lock_acquire_recursive>:
 8003d06:	4770      	bx	lr

08003d08 <__retarget_lock_release_recursive>:
 8003d08:	4770      	bx	lr
	...

08003d0c <_free_r>:
 8003d0c:	b538      	push	{r3, r4, r5, lr}
 8003d0e:	4605      	mov	r5, r0
 8003d10:	2900      	cmp	r1, #0
 8003d12:	d041      	beq.n	8003d98 <_free_r+0x8c>
 8003d14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d18:	1f0c      	subs	r4, r1, #4
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	bfb8      	it	lt
 8003d1e:	18e4      	addlt	r4, r4, r3
 8003d20:	f000 f8e0 	bl	8003ee4 <__malloc_lock>
 8003d24:	4a1d      	ldr	r2, [pc, #116]	@ (8003d9c <_free_r+0x90>)
 8003d26:	6813      	ldr	r3, [r2, #0]
 8003d28:	b933      	cbnz	r3, 8003d38 <_free_r+0x2c>
 8003d2a:	6063      	str	r3, [r4, #4]
 8003d2c:	6014      	str	r4, [r2, #0]
 8003d2e:	4628      	mov	r0, r5
 8003d30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d34:	f000 b8dc 	b.w	8003ef0 <__malloc_unlock>
 8003d38:	42a3      	cmp	r3, r4
 8003d3a:	d908      	bls.n	8003d4e <_free_r+0x42>
 8003d3c:	6820      	ldr	r0, [r4, #0]
 8003d3e:	1821      	adds	r1, r4, r0
 8003d40:	428b      	cmp	r3, r1
 8003d42:	bf01      	itttt	eq
 8003d44:	6819      	ldreq	r1, [r3, #0]
 8003d46:	685b      	ldreq	r3, [r3, #4]
 8003d48:	1809      	addeq	r1, r1, r0
 8003d4a:	6021      	streq	r1, [r4, #0]
 8003d4c:	e7ed      	b.n	8003d2a <_free_r+0x1e>
 8003d4e:	461a      	mov	r2, r3
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	b10b      	cbz	r3, 8003d58 <_free_r+0x4c>
 8003d54:	42a3      	cmp	r3, r4
 8003d56:	d9fa      	bls.n	8003d4e <_free_r+0x42>
 8003d58:	6811      	ldr	r1, [r2, #0]
 8003d5a:	1850      	adds	r0, r2, r1
 8003d5c:	42a0      	cmp	r0, r4
 8003d5e:	d10b      	bne.n	8003d78 <_free_r+0x6c>
 8003d60:	6820      	ldr	r0, [r4, #0]
 8003d62:	4401      	add	r1, r0
 8003d64:	1850      	adds	r0, r2, r1
 8003d66:	4283      	cmp	r3, r0
 8003d68:	6011      	str	r1, [r2, #0]
 8003d6a:	d1e0      	bne.n	8003d2e <_free_r+0x22>
 8003d6c:	6818      	ldr	r0, [r3, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	6053      	str	r3, [r2, #4]
 8003d72:	4408      	add	r0, r1
 8003d74:	6010      	str	r0, [r2, #0]
 8003d76:	e7da      	b.n	8003d2e <_free_r+0x22>
 8003d78:	d902      	bls.n	8003d80 <_free_r+0x74>
 8003d7a:	230c      	movs	r3, #12
 8003d7c:	602b      	str	r3, [r5, #0]
 8003d7e:	e7d6      	b.n	8003d2e <_free_r+0x22>
 8003d80:	6820      	ldr	r0, [r4, #0]
 8003d82:	1821      	adds	r1, r4, r0
 8003d84:	428b      	cmp	r3, r1
 8003d86:	bf04      	itt	eq
 8003d88:	6819      	ldreq	r1, [r3, #0]
 8003d8a:	685b      	ldreq	r3, [r3, #4]
 8003d8c:	6063      	str	r3, [r4, #4]
 8003d8e:	bf04      	itt	eq
 8003d90:	1809      	addeq	r1, r1, r0
 8003d92:	6021      	streq	r1, [r4, #0]
 8003d94:	6054      	str	r4, [r2, #4]
 8003d96:	e7ca      	b.n	8003d2e <_free_r+0x22>
 8003d98:	bd38      	pop	{r3, r4, r5, pc}
 8003d9a:	bf00      	nop
 8003d9c:	20000348 	.word	0x20000348

08003da0 <sbrk_aligned>:
 8003da0:	b570      	push	{r4, r5, r6, lr}
 8003da2:	4e0f      	ldr	r6, [pc, #60]	@ (8003de0 <sbrk_aligned+0x40>)
 8003da4:	460c      	mov	r4, r1
 8003da6:	6831      	ldr	r1, [r6, #0]
 8003da8:	4605      	mov	r5, r0
 8003daa:	b911      	cbnz	r1, 8003db2 <sbrk_aligned+0x12>
 8003dac:	f000 fca4 	bl	80046f8 <_sbrk_r>
 8003db0:	6030      	str	r0, [r6, #0]
 8003db2:	4621      	mov	r1, r4
 8003db4:	4628      	mov	r0, r5
 8003db6:	f000 fc9f 	bl	80046f8 <_sbrk_r>
 8003dba:	1c43      	adds	r3, r0, #1
 8003dbc:	d103      	bne.n	8003dc6 <sbrk_aligned+0x26>
 8003dbe:	f04f 34ff 	mov.w	r4, #4294967295
 8003dc2:	4620      	mov	r0, r4
 8003dc4:	bd70      	pop	{r4, r5, r6, pc}
 8003dc6:	1cc4      	adds	r4, r0, #3
 8003dc8:	f024 0403 	bic.w	r4, r4, #3
 8003dcc:	42a0      	cmp	r0, r4
 8003dce:	d0f8      	beq.n	8003dc2 <sbrk_aligned+0x22>
 8003dd0:	1a21      	subs	r1, r4, r0
 8003dd2:	4628      	mov	r0, r5
 8003dd4:	f000 fc90 	bl	80046f8 <_sbrk_r>
 8003dd8:	3001      	adds	r0, #1
 8003dda:	d1f2      	bne.n	8003dc2 <sbrk_aligned+0x22>
 8003ddc:	e7ef      	b.n	8003dbe <sbrk_aligned+0x1e>
 8003dde:	bf00      	nop
 8003de0:	20000344 	.word	0x20000344

08003de4 <_malloc_r>:
 8003de4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003de8:	1ccd      	adds	r5, r1, #3
 8003dea:	f025 0503 	bic.w	r5, r5, #3
 8003dee:	3508      	adds	r5, #8
 8003df0:	2d0c      	cmp	r5, #12
 8003df2:	bf38      	it	cc
 8003df4:	250c      	movcc	r5, #12
 8003df6:	2d00      	cmp	r5, #0
 8003df8:	4606      	mov	r6, r0
 8003dfa:	db01      	blt.n	8003e00 <_malloc_r+0x1c>
 8003dfc:	42a9      	cmp	r1, r5
 8003dfe:	d904      	bls.n	8003e0a <_malloc_r+0x26>
 8003e00:	230c      	movs	r3, #12
 8003e02:	6033      	str	r3, [r6, #0]
 8003e04:	2000      	movs	r0, #0
 8003e06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e0a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003ee0 <_malloc_r+0xfc>
 8003e0e:	f000 f869 	bl	8003ee4 <__malloc_lock>
 8003e12:	f8d8 3000 	ldr.w	r3, [r8]
 8003e16:	461c      	mov	r4, r3
 8003e18:	bb44      	cbnz	r4, 8003e6c <_malloc_r+0x88>
 8003e1a:	4629      	mov	r1, r5
 8003e1c:	4630      	mov	r0, r6
 8003e1e:	f7ff ffbf 	bl	8003da0 <sbrk_aligned>
 8003e22:	1c43      	adds	r3, r0, #1
 8003e24:	4604      	mov	r4, r0
 8003e26:	d158      	bne.n	8003eda <_malloc_r+0xf6>
 8003e28:	f8d8 4000 	ldr.w	r4, [r8]
 8003e2c:	4627      	mov	r7, r4
 8003e2e:	2f00      	cmp	r7, #0
 8003e30:	d143      	bne.n	8003eba <_malloc_r+0xd6>
 8003e32:	2c00      	cmp	r4, #0
 8003e34:	d04b      	beq.n	8003ece <_malloc_r+0xea>
 8003e36:	6823      	ldr	r3, [r4, #0]
 8003e38:	4639      	mov	r1, r7
 8003e3a:	4630      	mov	r0, r6
 8003e3c:	eb04 0903 	add.w	r9, r4, r3
 8003e40:	f000 fc5a 	bl	80046f8 <_sbrk_r>
 8003e44:	4581      	cmp	r9, r0
 8003e46:	d142      	bne.n	8003ece <_malloc_r+0xea>
 8003e48:	6821      	ldr	r1, [r4, #0]
 8003e4a:	1a6d      	subs	r5, r5, r1
 8003e4c:	4629      	mov	r1, r5
 8003e4e:	4630      	mov	r0, r6
 8003e50:	f7ff ffa6 	bl	8003da0 <sbrk_aligned>
 8003e54:	3001      	adds	r0, #1
 8003e56:	d03a      	beq.n	8003ece <_malloc_r+0xea>
 8003e58:	6823      	ldr	r3, [r4, #0]
 8003e5a:	442b      	add	r3, r5
 8003e5c:	6023      	str	r3, [r4, #0]
 8003e5e:	f8d8 3000 	ldr.w	r3, [r8]
 8003e62:	685a      	ldr	r2, [r3, #4]
 8003e64:	bb62      	cbnz	r2, 8003ec0 <_malloc_r+0xdc>
 8003e66:	f8c8 7000 	str.w	r7, [r8]
 8003e6a:	e00f      	b.n	8003e8c <_malloc_r+0xa8>
 8003e6c:	6822      	ldr	r2, [r4, #0]
 8003e6e:	1b52      	subs	r2, r2, r5
 8003e70:	d420      	bmi.n	8003eb4 <_malloc_r+0xd0>
 8003e72:	2a0b      	cmp	r2, #11
 8003e74:	d917      	bls.n	8003ea6 <_malloc_r+0xc2>
 8003e76:	1961      	adds	r1, r4, r5
 8003e78:	42a3      	cmp	r3, r4
 8003e7a:	6025      	str	r5, [r4, #0]
 8003e7c:	bf18      	it	ne
 8003e7e:	6059      	strne	r1, [r3, #4]
 8003e80:	6863      	ldr	r3, [r4, #4]
 8003e82:	bf08      	it	eq
 8003e84:	f8c8 1000 	streq.w	r1, [r8]
 8003e88:	5162      	str	r2, [r4, r5]
 8003e8a:	604b      	str	r3, [r1, #4]
 8003e8c:	4630      	mov	r0, r6
 8003e8e:	f000 f82f 	bl	8003ef0 <__malloc_unlock>
 8003e92:	f104 000b 	add.w	r0, r4, #11
 8003e96:	1d23      	adds	r3, r4, #4
 8003e98:	f020 0007 	bic.w	r0, r0, #7
 8003e9c:	1ac2      	subs	r2, r0, r3
 8003e9e:	bf1c      	itt	ne
 8003ea0:	1a1b      	subne	r3, r3, r0
 8003ea2:	50a3      	strne	r3, [r4, r2]
 8003ea4:	e7af      	b.n	8003e06 <_malloc_r+0x22>
 8003ea6:	6862      	ldr	r2, [r4, #4]
 8003ea8:	42a3      	cmp	r3, r4
 8003eaa:	bf0c      	ite	eq
 8003eac:	f8c8 2000 	streq.w	r2, [r8]
 8003eb0:	605a      	strne	r2, [r3, #4]
 8003eb2:	e7eb      	b.n	8003e8c <_malloc_r+0xa8>
 8003eb4:	4623      	mov	r3, r4
 8003eb6:	6864      	ldr	r4, [r4, #4]
 8003eb8:	e7ae      	b.n	8003e18 <_malloc_r+0x34>
 8003eba:	463c      	mov	r4, r7
 8003ebc:	687f      	ldr	r7, [r7, #4]
 8003ebe:	e7b6      	b.n	8003e2e <_malloc_r+0x4a>
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	42a3      	cmp	r3, r4
 8003ec6:	d1fb      	bne.n	8003ec0 <_malloc_r+0xdc>
 8003ec8:	2300      	movs	r3, #0
 8003eca:	6053      	str	r3, [r2, #4]
 8003ecc:	e7de      	b.n	8003e8c <_malloc_r+0xa8>
 8003ece:	230c      	movs	r3, #12
 8003ed0:	6033      	str	r3, [r6, #0]
 8003ed2:	4630      	mov	r0, r6
 8003ed4:	f000 f80c 	bl	8003ef0 <__malloc_unlock>
 8003ed8:	e794      	b.n	8003e04 <_malloc_r+0x20>
 8003eda:	6005      	str	r5, [r0, #0]
 8003edc:	e7d6      	b.n	8003e8c <_malloc_r+0xa8>
 8003ede:	bf00      	nop
 8003ee0:	20000348 	.word	0x20000348

08003ee4 <__malloc_lock>:
 8003ee4:	4801      	ldr	r0, [pc, #4]	@ (8003eec <__malloc_lock+0x8>)
 8003ee6:	f7ff bf0e 	b.w	8003d06 <__retarget_lock_acquire_recursive>
 8003eea:	bf00      	nop
 8003eec:	20000340 	.word	0x20000340

08003ef0 <__malloc_unlock>:
 8003ef0:	4801      	ldr	r0, [pc, #4]	@ (8003ef8 <__malloc_unlock+0x8>)
 8003ef2:	f7ff bf09 	b.w	8003d08 <__retarget_lock_release_recursive>
 8003ef6:	bf00      	nop
 8003ef8:	20000340 	.word	0x20000340

08003efc <__sfputc_r>:
 8003efc:	6893      	ldr	r3, [r2, #8]
 8003efe:	3b01      	subs	r3, #1
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	b410      	push	{r4}
 8003f04:	6093      	str	r3, [r2, #8]
 8003f06:	da08      	bge.n	8003f1a <__sfputc_r+0x1e>
 8003f08:	6994      	ldr	r4, [r2, #24]
 8003f0a:	42a3      	cmp	r3, r4
 8003f0c:	db01      	blt.n	8003f12 <__sfputc_r+0x16>
 8003f0e:	290a      	cmp	r1, #10
 8003f10:	d103      	bne.n	8003f1a <__sfputc_r+0x1e>
 8003f12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f16:	f7ff bde8 	b.w	8003aea <__swbuf_r>
 8003f1a:	6813      	ldr	r3, [r2, #0]
 8003f1c:	1c58      	adds	r0, r3, #1
 8003f1e:	6010      	str	r0, [r2, #0]
 8003f20:	7019      	strb	r1, [r3, #0]
 8003f22:	4608      	mov	r0, r1
 8003f24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f28:	4770      	bx	lr

08003f2a <__sfputs_r>:
 8003f2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f2c:	4606      	mov	r6, r0
 8003f2e:	460f      	mov	r7, r1
 8003f30:	4614      	mov	r4, r2
 8003f32:	18d5      	adds	r5, r2, r3
 8003f34:	42ac      	cmp	r4, r5
 8003f36:	d101      	bne.n	8003f3c <__sfputs_r+0x12>
 8003f38:	2000      	movs	r0, #0
 8003f3a:	e007      	b.n	8003f4c <__sfputs_r+0x22>
 8003f3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f40:	463a      	mov	r2, r7
 8003f42:	4630      	mov	r0, r6
 8003f44:	f7ff ffda 	bl	8003efc <__sfputc_r>
 8003f48:	1c43      	adds	r3, r0, #1
 8003f4a:	d1f3      	bne.n	8003f34 <__sfputs_r+0xa>
 8003f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003f50 <_vfiprintf_r>:
 8003f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f54:	460d      	mov	r5, r1
 8003f56:	b09d      	sub	sp, #116	@ 0x74
 8003f58:	4614      	mov	r4, r2
 8003f5a:	4698      	mov	r8, r3
 8003f5c:	4606      	mov	r6, r0
 8003f5e:	b118      	cbz	r0, 8003f68 <_vfiprintf_r+0x18>
 8003f60:	6a03      	ldr	r3, [r0, #32]
 8003f62:	b90b      	cbnz	r3, 8003f68 <_vfiprintf_r+0x18>
 8003f64:	f7ff fd36 	bl	80039d4 <__sinit>
 8003f68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003f6a:	07d9      	lsls	r1, r3, #31
 8003f6c:	d405      	bmi.n	8003f7a <_vfiprintf_r+0x2a>
 8003f6e:	89ab      	ldrh	r3, [r5, #12]
 8003f70:	059a      	lsls	r2, r3, #22
 8003f72:	d402      	bmi.n	8003f7a <_vfiprintf_r+0x2a>
 8003f74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003f76:	f7ff fec6 	bl	8003d06 <__retarget_lock_acquire_recursive>
 8003f7a:	89ab      	ldrh	r3, [r5, #12]
 8003f7c:	071b      	lsls	r3, r3, #28
 8003f7e:	d501      	bpl.n	8003f84 <_vfiprintf_r+0x34>
 8003f80:	692b      	ldr	r3, [r5, #16]
 8003f82:	b99b      	cbnz	r3, 8003fac <_vfiprintf_r+0x5c>
 8003f84:	4629      	mov	r1, r5
 8003f86:	4630      	mov	r0, r6
 8003f88:	f7ff fdee 	bl	8003b68 <__swsetup_r>
 8003f8c:	b170      	cbz	r0, 8003fac <_vfiprintf_r+0x5c>
 8003f8e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003f90:	07dc      	lsls	r4, r3, #31
 8003f92:	d504      	bpl.n	8003f9e <_vfiprintf_r+0x4e>
 8003f94:	f04f 30ff 	mov.w	r0, #4294967295
 8003f98:	b01d      	add	sp, #116	@ 0x74
 8003f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f9e:	89ab      	ldrh	r3, [r5, #12]
 8003fa0:	0598      	lsls	r0, r3, #22
 8003fa2:	d4f7      	bmi.n	8003f94 <_vfiprintf_r+0x44>
 8003fa4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003fa6:	f7ff feaf 	bl	8003d08 <__retarget_lock_release_recursive>
 8003faa:	e7f3      	b.n	8003f94 <_vfiprintf_r+0x44>
 8003fac:	2300      	movs	r3, #0
 8003fae:	9309      	str	r3, [sp, #36]	@ 0x24
 8003fb0:	2320      	movs	r3, #32
 8003fb2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003fb6:	f8cd 800c 	str.w	r8, [sp, #12]
 8003fba:	2330      	movs	r3, #48	@ 0x30
 8003fbc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800416c <_vfiprintf_r+0x21c>
 8003fc0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003fc4:	f04f 0901 	mov.w	r9, #1
 8003fc8:	4623      	mov	r3, r4
 8003fca:	469a      	mov	sl, r3
 8003fcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003fd0:	b10a      	cbz	r2, 8003fd6 <_vfiprintf_r+0x86>
 8003fd2:	2a25      	cmp	r2, #37	@ 0x25
 8003fd4:	d1f9      	bne.n	8003fca <_vfiprintf_r+0x7a>
 8003fd6:	ebba 0b04 	subs.w	fp, sl, r4
 8003fda:	d00b      	beq.n	8003ff4 <_vfiprintf_r+0xa4>
 8003fdc:	465b      	mov	r3, fp
 8003fde:	4622      	mov	r2, r4
 8003fe0:	4629      	mov	r1, r5
 8003fe2:	4630      	mov	r0, r6
 8003fe4:	f7ff ffa1 	bl	8003f2a <__sfputs_r>
 8003fe8:	3001      	adds	r0, #1
 8003fea:	f000 80a7 	beq.w	800413c <_vfiprintf_r+0x1ec>
 8003fee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003ff0:	445a      	add	r2, fp
 8003ff2:	9209      	str	r2, [sp, #36]	@ 0x24
 8003ff4:	f89a 3000 	ldrb.w	r3, [sl]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	f000 809f 	beq.w	800413c <_vfiprintf_r+0x1ec>
 8003ffe:	2300      	movs	r3, #0
 8004000:	f04f 32ff 	mov.w	r2, #4294967295
 8004004:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004008:	f10a 0a01 	add.w	sl, sl, #1
 800400c:	9304      	str	r3, [sp, #16]
 800400e:	9307      	str	r3, [sp, #28]
 8004010:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004014:	931a      	str	r3, [sp, #104]	@ 0x68
 8004016:	4654      	mov	r4, sl
 8004018:	2205      	movs	r2, #5
 800401a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800401e:	4853      	ldr	r0, [pc, #332]	@ (800416c <_vfiprintf_r+0x21c>)
 8004020:	f7fc f8f6 	bl	8000210 <memchr>
 8004024:	9a04      	ldr	r2, [sp, #16]
 8004026:	b9d8      	cbnz	r0, 8004060 <_vfiprintf_r+0x110>
 8004028:	06d1      	lsls	r1, r2, #27
 800402a:	bf44      	itt	mi
 800402c:	2320      	movmi	r3, #32
 800402e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004032:	0713      	lsls	r3, r2, #28
 8004034:	bf44      	itt	mi
 8004036:	232b      	movmi	r3, #43	@ 0x2b
 8004038:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800403c:	f89a 3000 	ldrb.w	r3, [sl]
 8004040:	2b2a      	cmp	r3, #42	@ 0x2a
 8004042:	d015      	beq.n	8004070 <_vfiprintf_r+0x120>
 8004044:	9a07      	ldr	r2, [sp, #28]
 8004046:	4654      	mov	r4, sl
 8004048:	2000      	movs	r0, #0
 800404a:	f04f 0c0a 	mov.w	ip, #10
 800404e:	4621      	mov	r1, r4
 8004050:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004054:	3b30      	subs	r3, #48	@ 0x30
 8004056:	2b09      	cmp	r3, #9
 8004058:	d94b      	bls.n	80040f2 <_vfiprintf_r+0x1a2>
 800405a:	b1b0      	cbz	r0, 800408a <_vfiprintf_r+0x13a>
 800405c:	9207      	str	r2, [sp, #28]
 800405e:	e014      	b.n	800408a <_vfiprintf_r+0x13a>
 8004060:	eba0 0308 	sub.w	r3, r0, r8
 8004064:	fa09 f303 	lsl.w	r3, r9, r3
 8004068:	4313      	orrs	r3, r2
 800406a:	9304      	str	r3, [sp, #16]
 800406c:	46a2      	mov	sl, r4
 800406e:	e7d2      	b.n	8004016 <_vfiprintf_r+0xc6>
 8004070:	9b03      	ldr	r3, [sp, #12]
 8004072:	1d19      	adds	r1, r3, #4
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	9103      	str	r1, [sp, #12]
 8004078:	2b00      	cmp	r3, #0
 800407a:	bfbb      	ittet	lt
 800407c:	425b      	neglt	r3, r3
 800407e:	f042 0202 	orrlt.w	r2, r2, #2
 8004082:	9307      	strge	r3, [sp, #28]
 8004084:	9307      	strlt	r3, [sp, #28]
 8004086:	bfb8      	it	lt
 8004088:	9204      	strlt	r2, [sp, #16]
 800408a:	7823      	ldrb	r3, [r4, #0]
 800408c:	2b2e      	cmp	r3, #46	@ 0x2e
 800408e:	d10a      	bne.n	80040a6 <_vfiprintf_r+0x156>
 8004090:	7863      	ldrb	r3, [r4, #1]
 8004092:	2b2a      	cmp	r3, #42	@ 0x2a
 8004094:	d132      	bne.n	80040fc <_vfiprintf_r+0x1ac>
 8004096:	9b03      	ldr	r3, [sp, #12]
 8004098:	1d1a      	adds	r2, r3, #4
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	9203      	str	r2, [sp, #12]
 800409e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80040a2:	3402      	adds	r4, #2
 80040a4:	9305      	str	r3, [sp, #20]
 80040a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800417c <_vfiprintf_r+0x22c>
 80040aa:	7821      	ldrb	r1, [r4, #0]
 80040ac:	2203      	movs	r2, #3
 80040ae:	4650      	mov	r0, sl
 80040b0:	f7fc f8ae 	bl	8000210 <memchr>
 80040b4:	b138      	cbz	r0, 80040c6 <_vfiprintf_r+0x176>
 80040b6:	9b04      	ldr	r3, [sp, #16]
 80040b8:	eba0 000a 	sub.w	r0, r0, sl
 80040bc:	2240      	movs	r2, #64	@ 0x40
 80040be:	4082      	lsls	r2, r0
 80040c0:	4313      	orrs	r3, r2
 80040c2:	3401      	adds	r4, #1
 80040c4:	9304      	str	r3, [sp, #16]
 80040c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040ca:	4829      	ldr	r0, [pc, #164]	@ (8004170 <_vfiprintf_r+0x220>)
 80040cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80040d0:	2206      	movs	r2, #6
 80040d2:	f7fc f89d 	bl	8000210 <memchr>
 80040d6:	2800      	cmp	r0, #0
 80040d8:	d03f      	beq.n	800415a <_vfiprintf_r+0x20a>
 80040da:	4b26      	ldr	r3, [pc, #152]	@ (8004174 <_vfiprintf_r+0x224>)
 80040dc:	bb1b      	cbnz	r3, 8004126 <_vfiprintf_r+0x1d6>
 80040de:	9b03      	ldr	r3, [sp, #12]
 80040e0:	3307      	adds	r3, #7
 80040e2:	f023 0307 	bic.w	r3, r3, #7
 80040e6:	3308      	adds	r3, #8
 80040e8:	9303      	str	r3, [sp, #12]
 80040ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80040ec:	443b      	add	r3, r7
 80040ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80040f0:	e76a      	b.n	8003fc8 <_vfiprintf_r+0x78>
 80040f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80040f6:	460c      	mov	r4, r1
 80040f8:	2001      	movs	r0, #1
 80040fa:	e7a8      	b.n	800404e <_vfiprintf_r+0xfe>
 80040fc:	2300      	movs	r3, #0
 80040fe:	3401      	adds	r4, #1
 8004100:	9305      	str	r3, [sp, #20]
 8004102:	4619      	mov	r1, r3
 8004104:	f04f 0c0a 	mov.w	ip, #10
 8004108:	4620      	mov	r0, r4
 800410a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800410e:	3a30      	subs	r2, #48	@ 0x30
 8004110:	2a09      	cmp	r2, #9
 8004112:	d903      	bls.n	800411c <_vfiprintf_r+0x1cc>
 8004114:	2b00      	cmp	r3, #0
 8004116:	d0c6      	beq.n	80040a6 <_vfiprintf_r+0x156>
 8004118:	9105      	str	r1, [sp, #20]
 800411a:	e7c4      	b.n	80040a6 <_vfiprintf_r+0x156>
 800411c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004120:	4604      	mov	r4, r0
 8004122:	2301      	movs	r3, #1
 8004124:	e7f0      	b.n	8004108 <_vfiprintf_r+0x1b8>
 8004126:	ab03      	add	r3, sp, #12
 8004128:	9300      	str	r3, [sp, #0]
 800412a:	462a      	mov	r2, r5
 800412c:	4b12      	ldr	r3, [pc, #72]	@ (8004178 <_vfiprintf_r+0x228>)
 800412e:	a904      	add	r1, sp, #16
 8004130:	4630      	mov	r0, r6
 8004132:	f3af 8000 	nop.w
 8004136:	4607      	mov	r7, r0
 8004138:	1c78      	adds	r0, r7, #1
 800413a:	d1d6      	bne.n	80040ea <_vfiprintf_r+0x19a>
 800413c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800413e:	07d9      	lsls	r1, r3, #31
 8004140:	d405      	bmi.n	800414e <_vfiprintf_r+0x1fe>
 8004142:	89ab      	ldrh	r3, [r5, #12]
 8004144:	059a      	lsls	r2, r3, #22
 8004146:	d402      	bmi.n	800414e <_vfiprintf_r+0x1fe>
 8004148:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800414a:	f7ff fddd 	bl	8003d08 <__retarget_lock_release_recursive>
 800414e:	89ab      	ldrh	r3, [r5, #12]
 8004150:	065b      	lsls	r3, r3, #25
 8004152:	f53f af1f 	bmi.w	8003f94 <_vfiprintf_r+0x44>
 8004156:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004158:	e71e      	b.n	8003f98 <_vfiprintf_r+0x48>
 800415a:	ab03      	add	r3, sp, #12
 800415c:	9300      	str	r3, [sp, #0]
 800415e:	462a      	mov	r2, r5
 8004160:	4b05      	ldr	r3, [pc, #20]	@ (8004178 <_vfiprintf_r+0x228>)
 8004162:	a904      	add	r1, sp, #16
 8004164:	4630      	mov	r0, r6
 8004166:	f000 f879 	bl	800425c <_printf_i>
 800416a:	e7e4      	b.n	8004136 <_vfiprintf_r+0x1e6>
 800416c:	08004780 	.word	0x08004780
 8004170:	0800478a 	.word	0x0800478a
 8004174:	00000000 	.word	0x00000000
 8004178:	08003f2b 	.word	0x08003f2b
 800417c:	08004786 	.word	0x08004786

08004180 <_printf_common>:
 8004180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004184:	4616      	mov	r6, r2
 8004186:	4698      	mov	r8, r3
 8004188:	688a      	ldr	r2, [r1, #8]
 800418a:	690b      	ldr	r3, [r1, #16]
 800418c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004190:	4293      	cmp	r3, r2
 8004192:	bfb8      	it	lt
 8004194:	4613      	movlt	r3, r2
 8004196:	6033      	str	r3, [r6, #0]
 8004198:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800419c:	4607      	mov	r7, r0
 800419e:	460c      	mov	r4, r1
 80041a0:	b10a      	cbz	r2, 80041a6 <_printf_common+0x26>
 80041a2:	3301      	adds	r3, #1
 80041a4:	6033      	str	r3, [r6, #0]
 80041a6:	6823      	ldr	r3, [r4, #0]
 80041a8:	0699      	lsls	r1, r3, #26
 80041aa:	bf42      	ittt	mi
 80041ac:	6833      	ldrmi	r3, [r6, #0]
 80041ae:	3302      	addmi	r3, #2
 80041b0:	6033      	strmi	r3, [r6, #0]
 80041b2:	6825      	ldr	r5, [r4, #0]
 80041b4:	f015 0506 	ands.w	r5, r5, #6
 80041b8:	d106      	bne.n	80041c8 <_printf_common+0x48>
 80041ba:	f104 0a19 	add.w	sl, r4, #25
 80041be:	68e3      	ldr	r3, [r4, #12]
 80041c0:	6832      	ldr	r2, [r6, #0]
 80041c2:	1a9b      	subs	r3, r3, r2
 80041c4:	42ab      	cmp	r3, r5
 80041c6:	dc26      	bgt.n	8004216 <_printf_common+0x96>
 80041c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80041cc:	6822      	ldr	r2, [r4, #0]
 80041ce:	3b00      	subs	r3, #0
 80041d0:	bf18      	it	ne
 80041d2:	2301      	movne	r3, #1
 80041d4:	0692      	lsls	r2, r2, #26
 80041d6:	d42b      	bmi.n	8004230 <_printf_common+0xb0>
 80041d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80041dc:	4641      	mov	r1, r8
 80041de:	4638      	mov	r0, r7
 80041e0:	47c8      	blx	r9
 80041e2:	3001      	adds	r0, #1
 80041e4:	d01e      	beq.n	8004224 <_printf_common+0xa4>
 80041e6:	6823      	ldr	r3, [r4, #0]
 80041e8:	6922      	ldr	r2, [r4, #16]
 80041ea:	f003 0306 	and.w	r3, r3, #6
 80041ee:	2b04      	cmp	r3, #4
 80041f0:	bf02      	ittt	eq
 80041f2:	68e5      	ldreq	r5, [r4, #12]
 80041f4:	6833      	ldreq	r3, [r6, #0]
 80041f6:	1aed      	subeq	r5, r5, r3
 80041f8:	68a3      	ldr	r3, [r4, #8]
 80041fa:	bf0c      	ite	eq
 80041fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004200:	2500      	movne	r5, #0
 8004202:	4293      	cmp	r3, r2
 8004204:	bfc4      	itt	gt
 8004206:	1a9b      	subgt	r3, r3, r2
 8004208:	18ed      	addgt	r5, r5, r3
 800420a:	2600      	movs	r6, #0
 800420c:	341a      	adds	r4, #26
 800420e:	42b5      	cmp	r5, r6
 8004210:	d11a      	bne.n	8004248 <_printf_common+0xc8>
 8004212:	2000      	movs	r0, #0
 8004214:	e008      	b.n	8004228 <_printf_common+0xa8>
 8004216:	2301      	movs	r3, #1
 8004218:	4652      	mov	r2, sl
 800421a:	4641      	mov	r1, r8
 800421c:	4638      	mov	r0, r7
 800421e:	47c8      	blx	r9
 8004220:	3001      	adds	r0, #1
 8004222:	d103      	bne.n	800422c <_printf_common+0xac>
 8004224:	f04f 30ff 	mov.w	r0, #4294967295
 8004228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800422c:	3501      	adds	r5, #1
 800422e:	e7c6      	b.n	80041be <_printf_common+0x3e>
 8004230:	18e1      	adds	r1, r4, r3
 8004232:	1c5a      	adds	r2, r3, #1
 8004234:	2030      	movs	r0, #48	@ 0x30
 8004236:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800423a:	4422      	add	r2, r4
 800423c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004240:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004244:	3302      	adds	r3, #2
 8004246:	e7c7      	b.n	80041d8 <_printf_common+0x58>
 8004248:	2301      	movs	r3, #1
 800424a:	4622      	mov	r2, r4
 800424c:	4641      	mov	r1, r8
 800424e:	4638      	mov	r0, r7
 8004250:	47c8      	blx	r9
 8004252:	3001      	adds	r0, #1
 8004254:	d0e6      	beq.n	8004224 <_printf_common+0xa4>
 8004256:	3601      	adds	r6, #1
 8004258:	e7d9      	b.n	800420e <_printf_common+0x8e>
	...

0800425c <_printf_i>:
 800425c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004260:	7e0f      	ldrb	r7, [r1, #24]
 8004262:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004264:	2f78      	cmp	r7, #120	@ 0x78
 8004266:	4691      	mov	r9, r2
 8004268:	4680      	mov	r8, r0
 800426a:	460c      	mov	r4, r1
 800426c:	469a      	mov	sl, r3
 800426e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004272:	d807      	bhi.n	8004284 <_printf_i+0x28>
 8004274:	2f62      	cmp	r7, #98	@ 0x62
 8004276:	d80a      	bhi.n	800428e <_printf_i+0x32>
 8004278:	2f00      	cmp	r7, #0
 800427a:	f000 80d1 	beq.w	8004420 <_printf_i+0x1c4>
 800427e:	2f58      	cmp	r7, #88	@ 0x58
 8004280:	f000 80b8 	beq.w	80043f4 <_printf_i+0x198>
 8004284:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004288:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800428c:	e03a      	b.n	8004304 <_printf_i+0xa8>
 800428e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004292:	2b15      	cmp	r3, #21
 8004294:	d8f6      	bhi.n	8004284 <_printf_i+0x28>
 8004296:	a101      	add	r1, pc, #4	@ (adr r1, 800429c <_printf_i+0x40>)
 8004298:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800429c:	080042f5 	.word	0x080042f5
 80042a0:	08004309 	.word	0x08004309
 80042a4:	08004285 	.word	0x08004285
 80042a8:	08004285 	.word	0x08004285
 80042ac:	08004285 	.word	0x08004285
 80042b0:	08004285 	.word	0x08004285
 80042b4:	08004309 	.word	0x08004309
 80042b8:	08004285 	.word	0x08004285
 80042bc:	08004285 	.word	0x08004285
 80042c0:	08004285 	.word	0x08004285
 80042c4:	08004285 	.word	0x08004285
 80042c8:	08004407 	.word	0x08004407
 80042cc:	08004333 	.word	0x08004333
 80042d0:	080043c1 	.word	0x080043c1
 80042d4:	08004285 	.word	0x08004285
 80042d8:	08004285 	.word	0x08004285
 80042dc:	08004429 	.word	0x08004429
 80042e0:	08004285 	.word	0x08004285
 80042e4:	08004333 	.word	0x08004333
 80042e8:	08004285 	.word	0x08004285
 80042ec:	08004285 	.word	0x08004285
 80042f0:	080043c9 	.word	0x080043c9
 80042f4:	6833      	ldr	r3, [r6, #0]
 80042f6:	1d1a      	adds	r2, r3, #4
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	6032      	str	r2, [r6, #0]
 80042fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004300:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004304:	2301      	movs	r3, #1
 8004306:	e09c      	b.n	8004442 <_printf_i+0x1e6>
 8004308:	6833      	ldr	r3, [r6, #0]
 800430a:	6820      	ldr	r0, [r4, #0]
 800430c:	1d19      	adds	r1, r3, #4
 800430e:	6031      	str	r1, [r6, #0]
 8004310:	0606      	lsls	r6, r0, #24
 8004312:	d501      	bpl.n	8004318 <_printf_i+0xbc>
 8004314:	681d      	ldr	r5, [r3, #0]
 8004316:	e003      	b.n	8004320 <_printf_i+0xc4>
 8004318:	0645      	lsls	r5, r0, #25
 800431a:	d5fb      	bpl.n	8004314 <_printf_i+0xb8>
 800431c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004320:	2d00      	cmp	r5, #0
 8004322:	da03      	bge.n	800432c <_printf_i+0xd0>
 8004324:	232d      	movs	r3, #45	@ 0x2d
 8004326:	426d      	negs	r5, r5
 8004328:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800432c:	4858      	ldr	r0, [pc, #352]	@ (8004490 <_printf_i+0x234>)
 800432e:	230a      	movs	r3, #10
 8004330:	e011      	b.n	8004356 <_printf_i+0xfa>
 8004332:	6821      	ldr	r1, [r4, #0]
 8004334:	6833      	ldr	r3, [r6, #0]
 8004336:	0608      	lsls	r0, r1, #24
 8004338:	f853 5b04 	ldr.w	r5, [r3], #4
 800433c:	d402      	bmi.n	8004344 <_printf_i+0xe8>
 800433e:	0649      	lsls	r1, r1, #25
 8004340:	bf48      	it	mi
 8004342:	b2ad      	uxthmi	r5, r5
 8004344:	2f6f      	cmp	r7, #111	@ 0x6f
 8004346:	4852      	ldr	r0, [pc, #328]	@ (8004490 <_printf_i+0x234>)
 8004348:	6033      	str	r3, [r6, #0]
 800434a:	bf14      	ite	ne
 800434c:	230a      	movne	r3, #10
 800434e:	2308      	moveq	r3, #8
 8004350:	2100      	movs	r1, #0
 8004352:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004356:	6866      	ldr	r6, [r4, #4]
 8004358:	60a6      	str	r6, [r4, #8]
 800435a:	2e00      	cmp	r6, #0
 800435c:	db05      	blt.n	800436a <_printf_i+0x10e>
 800435e:	6821      	ldr	r1, [r4, #0]
 8004360:	432e      	orrs	r6, r5
 8004362:	f021 0104 	bic.w	r1, r1, #4
 8004366:	6021      	str	r1, [r4, #0]
 8004368:	d04b      	beq.n	8004402 <_printf_i+0x1a6>
 800436a:	4616      	mov	r6, r2
 800436c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004370:	fb03 5711 	mls	r7, r3, r1, r5
 8004374:	5dc7      	ldrb	r7, [r0, r7]
 8004376:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800437a:	462f      	mov	r7, r5
 800437c:	42bb      	cmp	r3, r7
 800437e:	460d      	mov	r5, r1
 8004380:	d9f4      	bls.n	800436c <_printf_i+0x110>
 8004382:	2b08      	cmp	r3, #8
 8004384:	d10b      	bne.n	800439e <_printf_i+0x142>
 8004386:	6823      	ldr	r3, [r4, #0]
 8004388:	07df      	lsls	r7, r3, #31
 800438a:	d508      	bpl.n	800439e <_printf_i+0x142>
 800438c:	6923      	ldr	r3, [r4, #16]
 800438e:	6861      	ldr	r1, [r4, #4]
 8004390:	4299      	cmp	r1, r3
 8004392:	bfde      	ittt	le
 8004394:	2330      	movle	r3, #48	@ 0x30
 8004396:	f806 3c01 	strble.w	r3, [r6, #-1]
 800439a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800439e:	1b92      	subs	r2, r2, r6
 80043a0:	6122      	str	r2, [r4, #16]
 80043a2:	f8cd a000 	str.w	sl, [sp]
 80043a6:	464b      	mov	r3, r9
 80043a8:	aa03      	add	r2, sp, #12
 80043aa:	4621      	mov	r1, r4
 80043ac:	4640      	mov	r0, r8
 80043ae:	f7ff fee7 	bl	8004180 <_printf_common>
 80043b2:	3001      	adds	r0, #1
 80043b4:	d14a      	bne.n	800444c <_printf_i+0x1f0>
 80043b6:	f04f 30ff 	mov.w	r0, #4294967295
 80043ba:	b004      	add	sp, #16
 80043bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043c0:	6823      	ldr	r3, [r4, #0]
 80043c2:	f043 0320 	orr.w	r3, r3, #32
 80043c6:	6023      	str	r3, [r4, #0]
 80043c8:	4832      	ldr	r0, [pc, #200]	@ (8004494 <_printf_i+0x238>)
 80043ca:	2778      	movs	r7, #120	@ 0x78
 80043cc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80043d0:	6823      	ldr	r3, [r4, #0]
 80043d2:	6831      	ldr	r1, [r6, #0]
 80043d4:	061f      	lsls	r7, r3, #24
 80043d6:	f851 5b04 	ldr.w	r5, [r1], #4
 80043da:	d402      	bmi.n	80043e2 <_printf_i+0x186>
 80043dc:	065f      	lsls	r7, r3, #25
 80043de:	bf48      	it	mi
 80043e0:	b2ad      	uxthmi	r5, r5
 80043e2:	6031      	str	r1, [r6, #0]
 80043e4:	07d9      	lsls	r1, r3, #31
 80043e6:	bf44      	itt	mi
 80043e8:	f043 0320 	orrmi.w	r3, r3, #32
 80043ec:	6023      	strmi	r3, [r4, #0]
 80043ee:	b11d      	cbz	r5, 80043f8 <_printf_i+0x19c>
 80043f0:	2310      	movs	r3, #16
 80043f2:	e7ad      	b.n	8004350 <_printf_i+0xf4>
 80043f4:	4826      	ldr	r0, [pc, #152]	@ (8004490 <_printf_i+0x234>)
 80043f6:	e7e9      	b.n	80043cc <_printf_i+0x170>
 80043f8:	6823      	ldr	r3, [r4, #0]
 80043fa:	f023 0320 	bic.w	r3, r3, #32
 80043fe:	6023      	str	r3, [r4, #0]
 8004400:	e7f6      	b.n	80043f0 <_printf_i+0x194>
 8004402:	4616      	mov	r6, r2
 8004404:	e7bd      	b.n	8004382 <_printf_i+0x126>
 8004406:	6833      	ldr	r3, [r6, #0]
 8004408:	6825      	ldr	r5, [r4, #0]
 800440a:	6961      	ldr	r1, [r4, #20]
 800440c:	1d18      	adds	r0, r3, #4
 800440e:	6030      	str	r0, [r6, #0]
 8004410:	062e      	lsls	r6, r5, #24
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	d501      	bpl.n	800441a <_printf_i+0x1be>
 8004416:	6019      	str	r1, [r3, #0]
 8004418:	e002      	b.n	8004420 <_printf_i+0x1c4>
 800441a:	0668      	lsls	r0, r5, #25
 800441c:	d5fb      	bpl.n	8004416 <_printf_i+0x1ba>
 800441e:	8019      	strh	r1, [r3, #0]
 8004420:	2300      	movs	r3, #0
 8004422:	6123      	str	r3, [r4, #16]
 8004424:	4616      	mov	r6, r2
 8004426:	e7bc      	b.n	80043a2 <_printf_i+0x146>
 8004428:	6833      	ldr	r3, [r6, #0]
 800442a:	1d1a      	adds	r2, r3, #4
 800442c:	6032      	str	r2, [r6, #0]
 800442e:	681e      	ldr	r6, [r3, #0]
 8004430:	6862      	ldr	r2, [r4, #4]
 8004432:	2100      	movs	r1, #0
 8004434:	4630      	mov	r0, r6
 8004436:	f7fb feeb 	bl	8000210 <memchr>
 800443a:	b108      	cbz	r0, 8004440 <_printf_i+0x1e4>
 800443c:	1b80      	subs	r0, r0, r6
 800443e:	6060      	str	r0, [r4, #4]
 8004440:	6863      	ldr	r3, [r4, #4]
 8004442:	6123      	str	r3, [r4, #16]
 8004444:	2300      	movs	r3, #0
 8004446:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800444a:	e7aa      	b.n	80043a2 <_printf_i+0x146>
 800444c:	6923      	ldr	r3, [r4, #16]
 800444e:	4632      	mov	r2, r6
 8004450:	4649      	mov	r1, r9
 8004452:	4640      	mov	r0, r8
 8004454:	47d0      	blx	sl
 8004456:	3001      	adds	r0, #1
 8004458:	d0ad      	beq.n	80043b6 <_printf_i+0x15a>
 800445a:	6823      	ldr	r3, [r4, #0]
 800445c:	079b      	lsls	r3, r3, #30
 800445e:	d413      	bmi.n	8004488 <_printf_i+0x22c>
 8004460:	68e0      	ldr	r0, [r4, #12]
 8004462:	9b03      	ldr	r3, [sp, #12]
 8004464:	4298      	cmp	r0, r3
 8004466:	bfb8      	it	lt
 8004468:	4618      	movlt	r0, r3
 800446a:	e7a6      	b.n	80043ba <_printf_i+0x15e>
 800446c:	2301      	movs	r3, #1
 800446e:	4632      	mov	r2, r6
 8004470:	4649      	mov	r1, r9
 8004472:	4640      	mov	r0, r8
 8004474:	47d0      	blx	sl
 8004476:	3001      	adds	r0, #1
 8004478:	d09d      	beq.n	80043b6 <_printf_i+0x15a>
 800447a:	3501      	adds	r5, #1
 800447c:	68e3      	ldr	r3, [r4, #12]
 800447e:	9903      	ldr	r1, [sp, #12]
 8004480:	1a5b      	subs	r3, r3, r1
 8004482:	42ab      	cmp	r3, r5
 8004484:	dcf2      	bgt.n	800446c <_printf_i+0x210>
 8004486:	e7eb      	b.n	8004460 <_printf_i+0x204>
 8004488:	2500      	movs	r5, #0
 800448a:	f104 0619 	add.w	r6, r4, #25
 800448e:	e7f5      	b.n	800447c <_printf_i+0x220>
 8004490:	08004791 	.word	0x08004791
 8004494:	080047a2 	.word	0x080047a2

08004498 <__sflush_r>:
 8004498:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800449c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044a0:	0716      	lsls	r6, r2, #28
 80044a2:	4605      	mov	r5, r0
 80044a4:	460c      	mov	r4, r1
 80044a6:	d454      	bmi.n	8004552 <__sflush_r+0xba>
 80044a8:	684b      	ldr	r3, [r1, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	dc02      	bgt.n	80044b4 <__sflush_r+0x1c>
 80044ae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	dd48      	ble.n	8004546 <__sflush_r+0xae>
 80044b4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80044b6:	2e00      	cmp	r6, #0
 80044b8:	d045      	beq.n	8004546 <__sflush_r+0xae>
 80044ba:	2300      	movs	r3, #0
 80044bc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80044c0:	682f      	ldr	r7, [r5, #0]
 80044c2:	6a21      	ldr	r1, [r4, #32]
 80044c4:	602b      	str	r3, [r5, #0]
 80044c6:	d030      	beq.n	800452a <__sflush_r+0x92>
 80044c8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80044ca:	89a3      	ldrh	r3, [r4, #12]
 80044cc:	0759      	lsls	r1, r3, #29
 80044ce:	d505      	bpl.n	80044dc <__sflush_r+0x44>
 80044d0:	6863      	ldr	r3, [r4, #4]
 80044d2:	1ad2      	subs	r2, r2, r3
 80044d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80044d6:	b10b      	cbz	r3, 80044dc <__sflush_r+0x44>
 80044d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80044da:	1ad2      	subs	r2, r2, r3
 80044dc:	2300      	movs	r3, #0
 80044de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80044e0:	6a21      	ldr	r1, [r4, #32]
 80044e2:	4628      	mov	r0, r5
 80044e4:	47b0      	blx	r6
 80044e6:	1c43      	adds	r3, r0, #1
 80044e8:	89a3      	ldrh	r3, [r4, #12]
 80044ea:	d106      	bne.n	80044fa <__sflush_r+0x62>
 80044ec:	6829      	ldr	r1, [r5, #0]
 80044ee:	291d      	cmp	r1, #29
 80044f0:	d82b      	bhi.n	800454a <__sflush_r+0xb2>
 80044f2:	4a2a      	ldr	r2, [pc, #168]	@ (800459c <__sflush_r+0x104>)
 80044f4:	40ca      	lsrs	r2, r1
 80044f6:	07d6      	lsls	r6, r2, #31
 80044f8:	d527      	bpl.n	800454a <__sflush_r+0xb2>
 80044fa:	2200      	movs	r2, #0
 80044fc:	6062      	str	r2, [r4, #4]
 80044fe:	04d9      	lsls	r1, r3, #19
 8004500:	6922      	ldr	r2, [r4, #16]
 8004502:	6022      	str	r2, [r4, #0]
 8004504:	d504      	bpl.n	8004510 <__sflush_r+0x78>
 8004506:	1c42      	adds	r2, r0, #1
 8004508:	d101      	bne.n	800450e <__sflush_r+0x76>
 800450a:	682b      	ldr	r3, [r5, #0]
 800450c:	b903      	cbnz	r3, 8004510 <__sflush_r+0x78>
 800450e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004510:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004512:	602f      	str	r7, [r5, #0]
 8004514:	b1b9      	cbz	r1, 8004546 <__sflush_r+0xae>
 8004516:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800451a:	4299      	cmp	r1, r3
 800451c:	d002      	beq.n	8004524 <__sflush_r+0x8c>
 800451e:	4628      	mov	r0, r5
 8004520:	f7ff fbf4 	bl	8003d0c <_free_r>
 8004524:	2300      	movs	r3, #0
 8004526:	6363      	str	r3, [r4, #52]	@ 0x34
 8004528:	e00d      	b.n	8004546 <__sflush_r+0xae>
 800452a:	2301      	movs	r3, #1
 800452c:	4628      	mov	r0, r5
 800452e:	47b0      	blx	r6
 8004530:	4602      	mov	r2, r0
 8004532:	1c50      	adds	r0, r2, #1
 8004534:	d1c9      	bne.n	80044ca <__sflush_r+0x32>
 8004536:	682b      	ldr	r3, [r5, #0]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d0c6      	beq.n	80044ca <__sflush_r+0x32>
 800453c:	2b1d      	cmp	r3, #29
 800453e:	d001      	beq.n	8004544 <__sflush_r+0xac>
 8004540:	2b16      	cmp	r3, #22
 8004542:	d11e      	bne.n	8004582 <__sflush_r+0xea>
 8004544:	602f      	str	r7, [r5, #0]
 8004546:	2000      	movs	r0, #0
 8004548:	e022      	b.n	8004590 <__sflush_r+0xf8>
 800454a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800454e:	b21b      	sxth	r3, r3
 8004550:	e01b      	b.n	800458a <__sflush_r+0xf2>
 8004552:	690f      	ldr	r7, [r1, #16]
 8004554:	2f00      	cmp	r7, #0
 8004556:	d0f6      	beq.n	8004546 <__sflush_r+0xae>
 8004558:	0793      	lsls	r3, r2, #30
 800455a:	680e      	ldr	r6, [r1, #0]
 800455c:	bf08      	it	eq
 800455e:	694b      	ldreq	r3, [r1, #20]
 8004560:	600f      	str	r7, [r1, #0]
 8004562:	bf18      	it	ne
 8004564:	2300      	movne	r3, #0
 8004566:	eba6 0807 	sub.w	r8, r6, r7
 800456a:	608b      	str	r3, [r1, #8]
 800456c:	f1b8 0f00 	cmp.w	r8, #0
 8004570:	dde9      	ble.n	8004546 <__sflush_r+0xae>
 8004572:	6a21      	ldr	r1, [r4, #32]
 8004574:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004576:	4643      	mov	r3, r8
 8004578:	463a      	mov	r2, r7
 800457a:	4628      	mov	r0, r5
 800457c:	47b0      	blx	r6
 800457e:	2800      	cmp	r0, #0
 8004580:	dc08      	bgt.n	8004594 <__sflush_r+0xfc>
 8004582:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004586:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800458a:	81a3      	strh	r3, [r4, #12]
 800458c:	f04f 30ff 	mov.w	r0, #4294967295
 8004590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004594:	4407      	add	r7, r0
 8004596:	eba8 0800 	sub.w	r8, r8, r0
 800459a:	e7e7      	b.n	800456c <__sflush_r+0xd4>
 800459c:	20400001 	.word	0x20400001

080045a0 <_fflush_r>:
 80045a0:	b538      	push	{r3, r4, r5, lr}
 80045a2:	690b      	ldr	r3, [r1, #16]
 80045a4:	4605      	mov	r5, r0
 80045a6:	460c      	mov	r4, r1
 80045a8:	b913      	cbnz	r3, 80045b0 <_fflush_r+0x10>
 80045aa:	2500      	movs	r5, #0
 80045ac:	4628      	mov	r0, r5
 80045ae:	bd38      	pop	{r3, r4, r5, pc}
 80045b0:	b118      	cbz	r0, 80045ba <_fflush_r+0x1a>
 80045b2:	6a03      	ldr	r3, [r0, #32]
 80045b4:	b90b      	cbnz	r3, 80045ba <_fflush_r+0x1a>
 80045b6:	f7ff fa0d 	bl	80039d4 <__sinit>
 80045ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d0f3      	beq.n	80045aa <_fflush_r+0xa>
 80045c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80045c4:	07d0      	lsls	r0, r2, #31
 80045c6:	d404      	bmi.n	80045d2 <_fflush_r+0x32>
 80045c8:	0599      	lsls	r1, r3, #22
 80045ca:	d402      	bmi.n	80045d2 <_fflush_r+0x32>
 80045cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80045ce:	f7ff fb9a 	bl	8003d06 <__retarget_lock_acquire_recursive>
 80045d2:	4628      	mov	r0, r5
 80045d4:	4621      	mov	r1, r4
 80045d6:	f7ff ff5f 	bl	8004498 <__sflush_r>
 80045da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80045dc:	07da      	lsls	r2, r3, #31
 80045de:	4605      	mov	r5, r0
 80045e0:	d4e4      	bmi.n	80045ac <_fflush_r+0xc>
 80045e2:	89a3      	ldrh	r3, [r4, #12]
 80045e4:	059b      	lsls	r3, r3, #22
 80045e6:	d4e1      	bmi.n	80045ac <_fflush_r+0xc>
 80045e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80045ea:	f7ff fb8d 	bl	8003d08 <__retarget_lock_release_recursive>
 80045ee:	e7dd      	b.n	80045ac <_fflush_r+0xc>

080045f0 <__swhatbuf_r>:
 80045f0:	b570      	push	{r4, r5, r6, lr}
 80045f2:	460c      	mov	r4, r1
 80045f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045f8:	2900      	cmp	r1, #0
 80045fa:	b096      	sub	sp, #88	@ 0x58
 80045fc:	4615      	mov	r5, r2
 80045fe:	461e      	mov	r6, r3
 8004600:	da0d      	bge.n	800461e <__swhatbuf_r+0x2e>
 8004602:	89a3      	ldrh	r3, [r4, #12]
 8004604:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004608:	f04f 0100 	mov.w	r1, #0
 800460c:	bf14      	ite	ne
 800460e:	2340      	movne	r3, #64	@ 0x40
 8004610:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004614:	2000      	movs	r0, #0
 8004616:	6031      	str	r1, [r6, #0]
 8004618:	602b      	str	r3, [r5, #0]
 800461a:	b016      	add	sp, #88	@ 0x58
 800461c:	bd70      	pop	{r4, r5, r6, pc}
 800461e:	466a      	mov	r2, sp
 8004620:	f000 f848 	bl	80046b4 <_fstat_r>
 8004624:	2800      	cmp	r0, #0
 8004626:	dbec      	blt.n	8004602 <__swhatbuf_r+0x12>
 8004628:	9901      	ldr	r1, [sp, #4]
 800462a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800462e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004632:	4259      	negs	r1, r3
 8004634:	4159      	adcs	r1, r3
 8004636:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800463a:	e7eb      	b.n	8004614 <__swhatbuf_r+0x24>

0800463c <__smakebuf_r>:
 800463c:	898b      	ldrh	r3, [r1, #12]
 800463e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004640:	079d      	lsls	r5, r3, #30
 8004642:	4606      	mov	r6, r0
 8004644:	460c      	mov	r4, r1
 8004646:	d507      	bpl.n	8004658 <__smakebuf_r+0x1c>
 8004648:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800464c:	6023      	str	r3, [r4, #0]
 800464e:	6123      	str	r3, [r4, #16]
 8004650:	2301      	movs	r3, #1
 8004652:	6163      	str	r3, [r4, #20]
 8004654:	b003      	add	sp, #12
 8004656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004658:	ab01      	add	r3, sp, #4
 800465a:	466a      	mov	r2, sp
 800465c:	f7ff ffc8 	bl	80045f0 <__swhatbuf_r>
 8004660:	9f00      	ldr	r7, [sp, #0]
 8004662:	4605      	mov	r5, r0
 8004664:	4639      	mov	r1, r7
 8004666:	4630      	mov	r0, r6
 8004668:	f7ff fbbc 	bl	8003de4 <_malloc_r>
 800466c:	b948      	cbnz	r0, 8004682 <__smakebuf_r+0x46>
 800466e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004672:	059a      	lsls	r2, r3, #22
 8004674:	d4ee      	bmi.n	8004654 <__smakebuf_r+0x18>
 8004676:	f023 0303 	bic.w	r3, r3, #3
 800467a:	f043 0302 	orr.w	r3, r3, #2
 800467e:	81a3      	strh	r3, [r4, #12]
 8004680:	e7e2      	b.n	8004648 <__smakebuf_r+0xc>
 8004682:	89a3      	ldrh	r3, [r4, #12]
 8004684:	6020      	str	r0, [r4, #0]
 8004686:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800468a:	81a3      	strh	r3, [r4, #12]
 800468c:	9b01      	ldr	r3, [sp, #4]
 800468e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004692:	b15b      	cbz	r3, 80046ac <__smakebuf_r+0x70>
 8004694:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004698:	4630      	mov	r0, r6
 800469a:	f000 f81d 	bl	80046d8 <_isatty_r>
 800469e:	b128      	cbz	r0, 80046ac <__smakebuf_r+0x70>
 80046a0:	89a3      	ldrh	r3, [r4, #12]
 80046a2:	f023 0303 	bic.w	r3, r3, #3
 80046a6:	f043 0301 	orr.w	r3, r3, #1
 80046aa:	81a3      	strh	r3, [r4, #12]
 80046ac:	89a3      	ldrh	r3, [r4, #12]
 80046ae:	431d      	orrs	r5, r3
 80046b0:	81a5      	strh	r5, [r4, #12]
 80046b2:	e7cf      	b.n	8004654 <__smakebuf_r+0x18>

080046b4 <_fstat_r>:
 80046b4:	b538      	push	{r3, r4, r5, lr}
 80046b6:	4d07      	ldr	r5, [pc, #28]	@ (80046d4 <_fstat_r+0x20>)
 80046b8:	2300      	movs	r3, #0
 80046ba:	4604      	mov	r4, r0
 80046bc:	4608      	mov	r0, r1
 80046be:	4611      	mov	r1, r2
 80046c0:	602b      	str	r3, [r5, #0]
 80046c2:	f7fc fc93 	bl	8000fec <_fstat>
 80046c6:	1c43      	adds	r3, r0, #1
 80046c8:	d102      	bne.n	80046d0 <_fstat_r+0x1c>
 80046ca:	682b      	ldr	r3, [r5, #0]
 80046cc:	b103      	cbz	r3, 80046d0 <_fstat_r+0x1c>
 80046ce:	6023      	str	r3, [r4, #0]
 80046d0:	bd38      	pop	{r3, r4, r5, pc}
 80046d2:	bf00      	nop
 80046d4:	2000033c 	.word	0x2000033c

080046d8 <_isatty_r>:
 80046d8:	b538      	push	{r3, r4, r5, lr}
 80046da:	4d06      	ldr	r5, [pc, #24]	@ (80046f4 <_isatty_r+0x1c>)
 80046dc:	2300      	movs	r3, #0
 80046de:	4604      	mov	r4, r0
 80046e0:	4608      	mov	r0, r1
 80046e2:	602b      	str	r3, [r5, #0]
 80046e4:	f7fc fc92 	bl	800100c <_isatty>
 80046e8:	1c43      	adds	r3, r0, #1
 80046ea:	d102      	bne.n	80046f2 <_isatty_r+0x1a>
 80046ec:	682b      	ldr	r3, [r5, #0]
 80046ee:	b103      	cbz	r3, 80046f2 <_isatty_r+0x1a>
 80046f0:	6023      	str	r3, [r4, #0]
 80046f2:	bd38      	pop	{r3, r4, r5, pc}
 80046f4:	2000033c 	.word	0x2000033c

080046f8 <_sbrk_r>:
 80046f8:	b538      	push	{r3, r4, r5, lr}
 80046fa:	4d06      	ldr	r5, [pc, #24]	@ (8004714 <_sbrk_r+0x1c>)
 80046fc:	2300      	movs	r3, #0
 80046fe:	4604      	mov	r4, r0
 8004700:	4608      	mov	r0, r1
 8004702:	602b      	str	r3, [r5, #0]
 8004704:	f7fc fc9a 	bl	800103c <_sbrk>
 8004708:	1c43      	adds	r3, r0, #1
 800470a:	d102      	bne.n	8004712 <_sbrk_r+0x1a>
 800470c:	682b      	ldr	r3, [r5, #0]
 800470e:	b103      	cbz	r3, 8004712 <_sbrk_r+0x1a>
 8004710:	6023      	str	r3, [r4, #0]
 8004712:	bd38      	pop	{r3, r4, r5, pc}
 8004714:	2000033c 	.word	0x2000033c

08004718 <_init>:
 8004718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800471a:	bf00      	nop
 800471c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800471e:	bc08      	pop	{r3}
 8004720:	469e      	mov	lr, r3
 8004722:	4770      	bx	lr

08004724 <_fini>:
 8004724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004726:	bf00      	nop
 8004728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800472a:	bc08      	pop	{r3}
 800472c:	469e      	mov	lr, r3
 800472e:	4770      	bx	lr
